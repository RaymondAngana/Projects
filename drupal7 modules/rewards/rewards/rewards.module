<?php
/**
 * @file
 * Provides functionality for the propco rewards redemption program.
 *
 * Allows admin users to import pins , adds a pin login form for customers.
 */

/**
 * Implementation of hook_menu().
 */
function propco_rewards_menu() {
  $items['admin/config/propco-rewards'] = array(
    'title' => 'Rewards Configuration',
    'description' => 'Options for configuration of propco rewards program',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer rewards configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/propco-rewards/settings'] = array(
    'title' => 'Rewards Settings',
    'description' => 'Configure Rewards Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('propco_rewards_admin_settings'),
    'access arguments' => array('administer rewards configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'propco_rewards.admin.inc',
  );
}

/**
 * Remove our views tabs on nodes that don't need them.
 */
function propco_rewards_menu_alter($items) {
  // Pin report view.

  $items['node/%node/manage']['access callback'] = '_pin_import_access';
  $items['node/%node/manage']['access arguments'] = array(1, 'administer rewards pins');

  $items['node/%node/rewards']['access callback'] = '_pin_import_access';
  $items['node/%node/rewards']['access arguments'] = array(1, 'administer rewards pins');

}


/**
 * Implements hook_ctools_plugin_directory.
 *
 * This lets ctools know to scan our module for a content_type plugin file
 * Detailed docks in ctools/ctools.api.php.
 */
function propco_rewards_ctools_plugin_directory($owner, $plugin_type) {
  // We'll be nice and limit scandir() calls.
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}


/**
 * Returns the list of award groups and their associated forms.
 *
 * @return array
 *   List of award groups and their forms.
 *
 * @ingroup propco_rewards_program_selection
 */
function _propco_rewards_program_selection_steps($award_groups, $reward_message, $row = 3) {

  $group_steps = array();
  $form_count = 0;

  // Add each award group.
  foreach ($award_groups as $group) {
    $form_count++;

    $group->row = $row;
    $group_steps[$form_count] = array(
      'form' => 'propco_rewards_program_selection_group_form_builder',
      'group' => $group,
      'title' => $group->title,
    );
  }

  // Add address collection.
  $form_count++;

  $group_steps[$form_count] = array(
    'form' => 'propco_rewards_program_selection_form_customer_info',
    'group' => $reward_message,
    'title' => t('Your Information'),
  );

  // Add preview step.
  $form_count++;

  $group_steps[$form_count] = array(
    'form' => 'propco_rewards_program_selection_form_review',
    'group' => '',
    'title' => t('Review'),
  );

  return $group_steps;
}


/**
 * The primary formbuilder function for the award selection form.
 *
 * @ingroup propco_rewards_program_selection
 */
function propco_rewards_program_selection_form($form, &$form_state, $program) {

  $program_wrapper = entity_metadata_wrapper('node', $program);
  $row = $program_wrapper->__isset('field_awards_row') ? $program_wrapper->field_awards_row->value() : 3;

  if (empty($form_state['step'])) {
    $form_state['step'] = 1;

    $reward_message = $program_wrapper->field_rewards_message->value();

    // Get our award groups for selection.
    $program_groups = array();

    foreach ($program_wrapper->field_award_groups->value() as $award_group) {
      $program_groups[] = $award_group;
    }

    // This array contains the function to be called at each step to get the
    // relevant form elements. It will also store state information for each
    // step.
    $group_steps = _propco_rewards_program_selection_steps($program_groups, $reward_message, $row, $program);
    $form_state['step_information'] = $group_steps;
  }

  $step = &$form_state['step'];
  // Show the 'previous' button if appropriate.

  // Call the function named in $form_state['step_information'] to get the
  // form elements to display for this step.
  $form = $form_state['step_information'][$step]['form']($form, $form_state, $form_state['step_information'][$step]['group']);
  $step_indicator = array();

  foreach ($form_state['step_information'] as $index => $stepitem) {

    $active_step = ($step == $index) ? 'active' : '';

    $step_indicator[] = array(
      'title' => $form_state['step_information'][$index]['title'],
      'active' => $active_step,
    );
  }

  if ($program_wrapper->field_survey->value()) {
    $step_indicator[] = array(
      'title' => t('Survey (Optional)'),
      'active' => '',
    );
  }

  $step_indicator[] = array(
    'title' => t('Confirmation'),
    'active' => '',
  );

  $form['step_indicator'] = array(
    '#markup' => propco_award_redemption_step_indicator($step_indicator),
    '#weight' => 50,
  );

  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('propco_rewards_program_selection_form_previous_submit'),
      '#limit_validation_errors' => array(),
      '#weight' => 52,
    );
  }

  // Show the Next button only if there are more steps defined.
  if ($step < count($form_state['step_information'])) {
    // Set the next button here to control enable-disabled state on the count condition..
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Save selection and continue'),
      '#name' => 'next',
      '#submit' => array('propco_rewards_program_selection_form_next_submit'),
      '#weight' => 51,
    );
  }
  else {
    // When there are no more steps, we use the default submit handler
    // propco_rewards_program_selection_form_submit handler will be called.
    $form['finish'] = array(
      '#type' => 'submit',
      '#value' => t('Finish'),
      '#weight' => 50,
    );
  }

  // Include each validation function defined for the different steps.
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['next']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }

  $terms = $program_wrapper->field_program_terms->value();

  $form['terms_wrapper'] = array(
    '#markup' => $terms['value'],
    '#prefix' => '<div id="terms-and-conditions">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Submit handler for the "previous" button.
 *
 * This function:
 * - Stores away $form_state['values']
 * - Decrements the step counter
 * - Replaces $form_state['values'] with the values from the previous state.
 * - Forces form rebuild.
 *
 * @ingroup propco_rewards_program_selection
 */
function propco_rewards_program_selection_form_previous_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the 'next' button.
 *
 * This function:
 * - Saves away $form_state['values']
 * - Increments the step count.
 * - Replace $form_state['values'] from the last time we were at this page
 *   or with array() if we haven't been here before.
 * - Force form rebuild.
 *
 * @ingroup propco_rewards_program_selection
 */
function propco_rewards_program_selection_form_next_submit($form, &$form_state) {

  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;
    return;
  }
}


/**
 * Returns form elements for the provided award group.
 *
 * @ingroup propco_rewards_program_selection.
 */
function propco_rewards_program_selection_group_form_builder($form, &$form_state, $award_group) {

  $form = array();

  $group_wrapper = entity_metadata_wrapper('node', $award_group);

  $award_list = $group_wrapper->__isset('field_awards') ? $group_wrapper->field_awards->value() : NULL;

  $row = !empty($award_group->row) ? $award_group->row : 3;

  $group_selection_total = $group_wrapper->__isset('field_award_total') ? $group_wrapper->field_award_total->value() : NULL;

  $selected_awards = array();

  $group_header_view = entity_view('node', array($award_group), 'award_selection');

  $group_render = drupal_render($group_header_view);

  $form['awards_header'] = array(
    '#markup' => $group_render,
  );

  $form['awards_indicator'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="awards_count_wrapper">',
    '#suffix' => '</div>',
    '#weight' => 0,
  );

  $form['awards_selection'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="awards_selection_wrapper" class="col-sm-' . $row . '">',
    '#suffix' => '</div>',
    '#weight' => 10,
  );

  $form['group_total'] = array(
    '#type' => 'hidden',
    '#value' => $group_selection_total,
  );

  $hide_description = $award_group->field_ag_hide_description[LANGUAGE_NONE][0]['value'];

  foreach ($award_list as $award) {
    $award_view = entity_view('node', array($award), 'award_selection');

    if ($hide_description) {
      $award_view['node'][$award->nid]['body']['#access'] = FALSE;
    }

    $award_render = drupal_render($award_view);

    $award_selected = '0';

    $form['awards_selection']['award-' . $award->nid] = array(
      '#type' => 'checkbox',
      '#title' => $award_render,
      '#default_value' => !empty($form_state['values']['award-' . $award->nid]) ? $form_state['values']['award-' . $award->nid] : '',
      '#attributes' => array('class' => array('award_selection_choice')),
      '#award_nid' => $award->nid,
    );

  }

  $form['awards_selection']['awards_selected'] = array(
    '#type' => 'hidden',
    '#value' => $selected_awards
  );

  $single_award = (bool) ($group_selection_total == 1);

  $form['awards_indicator']['#markup'] = propco_award_redemption_program_selection_count(array(
    'count' => count($selected_awards),
    'total' => $group_selection_total,
    'single' => $single_award
    )
  );

  if ($single_award) {
    $form['awards_indicator']['#prefix'] = '<div id="awards_count_wrapper" class="single">';
  }

  return $form;

}

/**
 * Validation for award . user must select the configured number of awards.
 *
 * @ingroup propco_rewards_program_selection.
 */
function propco_rewards_program_selection_group_form_builder_validate($form, &$form_state) {

  $selected_awards = array();

  $group_total = $form_state['values']['group_total'];
  $form_state['values']['awards_selected'] = array();

  foreach ($form['awards_selection'] as $key => $value) {
    if (isset($form['awards_selection'][$key]['#type'])) {
      if ($form['awards_selection'][$key]['#type'] == 'checkbox'
        && $form_state['values'][$key] == '1') {
        $selected_awards[] = $form['awards_selection'][$key]['#award_nid'];
      }
    }
  }

  if ($group_total != count($selected_awards)) {
    $remaining = $group_total - count($selected_awards);

    form_set_error('awards_selection', t('Please select %total awards to continue', array('%total' => $remaining)));
  }
  else {
    $form_state['values']['awards_selected'] = $selected_awards;
  }

}


/**
 * Returns form elements for'personal info'.
 *
 * @ingroup propco_rewards_program_selection.
 */
function propco_rewards_program_selection_form_customer_info($form, &$form_state, $info) {

  $form = array();
  $values = array(
    'type' => 'redemption',
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
    'title' => t('program redemption'),
  );

  $form['customer_info'] = array(
    '#prefix' => '<div id="customer_info_wrapper">',
    '#suffix' => '</div>',
    '#weight' => 20,
  );

  $redemption = entity_create('node', $values);

  $form['customer_info']['awards_header'] = array(
    '#markup' => t('<h2>Your Information</h2>'),
    '#weight' => -101,
  );

  $form['customer_info']['reward_message'] = array(
    '#markup' => $info,
    '#prefix' => '<div id="reward-message">',
    '#suffix' => '</div><br/>',
    '#weight' => -100,
  );
  $form['hide_intro'] = array(
    '#markup' => '<style>.panel-pane.pane-entity-field.pane-node-body{display:none;}</style>',
    '#weight' => -100,
  );
  $form['customer_info']['name_first'] = array(
    '#type' => 'textfield',
    '#title' => 'First Name',
    '#required' => TRUE,
    '#weight' => -99,
    '#default_value' => !empty($form_state['values']['name_first']) ? $form_state['values']['name_first'] : '',
  );

  $form['customer_info']['name_last'] = array(
    '#type' => 'textfield',
    '#title' => 'Last Name',
    '#required' => TRUE,
    '#weight' => -98,
    '#default_value' => !empty($form_state['values']['name_last']) ? $form_state['values']['name_last'] : '',
  );

  $form['customer_info']['address_wrapper'] = array(
    '#prefix' => '<div id="address_form_wrapper">',
    '#suffix' => '</div>',
    '#weight' => -97,
  );

  $form['customer_info']['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Email',
    '#required' => TRUE,
    '#weight' => -96,
    '#default_value' => !empty($form_state['values']['email']) ? $form_state['values']['email'] : '',
  );

  $form['customer_info']['email_check'] = array(
    '#type' => 'textfield',
    '#title' => 'Confirm Email',
    '#required' => TRUE,
    '#weight' => -95,
    '#default_value' => !empty($form_state['values']['email_check']) ? $form_state['values']['email_check'] : '',
  );

  $form['customer_info']['phone'] = array(
    '#type' => 'textfield',
    '#title' => 'Phone',
    '#required' => TRUE,
    '#weight' => -94,
    '#default_value' => !empty($form_state['values']['phone']) ? $form_state['values']['phone'] : '',
  );

  $selected_awards = array();
  $require_shipping = FALSE;

  // Retrive all selected awards and check for an address requirement.
  foreach ($form_state['step_information'] as $index => $value) {
    if (isset($value['stored_values']['awards_selected'])) {
      foreach ($value['stored_values']['awards_selected'] as $key => $selvalue) {
        $award = node_load($selvalue, FALSE);

        $award_wrapper = entity_metadata_wrapper('node', $award);

        $vendor_wrapper = entity_metadata_wrapper('node', $award_wrapper->field_vendor->value());

        $vendor_type = $vendor_wrapper->field_vendor_type->value();

        $require_shipping = (bool) ($vendor_type == 'shipped');

      }
    }
  }

  if ($require_shipping) {
    propco_rewards_field_attach_addressform('field_address', 'node', 'redemption', $redemption, $form['customer_info']['address_wrapper'], $form_state, LANGUAGE_NONE);
  }

  $form['customer_info']['accept_terms'] = array(
    '#type' => 'checkbox',
    '#prefix' => t('Terms & Conditions'),
    '#title' => t('I agree to the <a class="colorbox-inline" href="?width=500&height=500&inline=true#terms-and-conditions">Terms & Conditions</a>'),
    '#default_value' => !empty($form_state['values']['accept_terms']) ? $form_state['values']['accept_terms'] : '',
    '#required' => TRUE,
  );

  // Set the next button here to control enable-disabled state on the count condition.
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Continue to review'),
    '#name' => 'next',
    '#submit' => array('propco_rewards_program_selection_form_next_submit'),
    '#weight' => 0,
  );

  return $form;

}

/**
 * Implemements hook_form_validate().
 */
function propco_rewards_program_selection_form_customer_info_validate($form, &$form_state) {

  $mail = $form_state['values']['email'];
  $mail_check = $form_state['values']['email_check'];

  if ($mail != $mail_check) {
    form_set_error('email_check', t('Please confirm your email address.'));
  }

  if (!valid_email_address($mail)) {
    form_set_error('email', t('Please Enter a valid email address.'));
  }

  $phone = $form_state['values']['phone'];

  if (!valid_phone_number("ca", $phone)) {
    form_set_error('phone', t('Please Enter a valid phone number.'));
  }

}

/**
 * Form Selection review.
 */
function propco_rewards_program_selection_form_review($form, &$form_state) {

  $form = array();

  $form['awards_header'] = array(
    '#markup' => t('<h2>Review your selections</h2>'),
    '#weight' => -100,
  );

  $form['hide_intro'] = array(
    '#markup' => '<style>.panel-pane.pane-entity-field.pane-node-body{display:none;}</style>',
    '#weight' => -100,
  );

  $selected_awards = array();

  $customer_info = array();

  // Retrive all selected awards for review.
  foreach ($form_state['step_information'] as $index => $value) {
    if (isset($value['stored_values']['awards_selected'])) {
      foreach ($value['stored_values']['awards_selected'] as $key => $selvalue) {
        $selected_awards[] = $selvalue;
      }

      $customer_info = array_merge($customer_info, $value['stored_values']['awards_selected']);
    }
    if (isset($value['stored_values']['email'])) {
      $customer_info['email'] = $value['stored_values']['email'];
    }
    if (isset($value['stored_values']['phone'])) {
      $customer_info['phone'] = $value['stored_values']['phone'];
    }
    if (isset($value['stored_values']['field_address'])) {
      $customer_info['field_address'] = $value['stored_values']['field_address'];
    }
  }

  $award_view = entity_view('node', entity_load('node', $selected_awards, FALSE), 'award_review');
  $form['awards_review'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="awards_review_wrapper">',
    '#suffix' => '</div>',
    '#weight' => 49,
  );

  $form['awards_review']['email'] = array(
    '#markup' => $customer_info['email'],
    '#prefix' => '<div id="review_email"><label>Email:</label>',
    '#suffix' => '</div>',
  );

  $form['awards_review']['phone'] = array(
    '#markup' => $customer_info['phone'],
    '#prefix' => '<div id="review_phone"><label>Phone:</label>',
    '#suffix' => '</div>',
  );

  if (isset($customer_info['field_address'])) {

    $address_text = $customer_info['field_address']['und'][0]['thoroughfare'] . '<br> ';
    if (!empty($customer_info['field_address']['und'][0]['premise'])) {
      $address_text .= $customer_info['field_address']['und'][0]['premise'] . '<br> ';
    }
    $address_text .= $customer_info['field_address']['und'][0]['locality'] . ', ';
    $address_text .= $customer_info['field_address']['und'][0]['administrative_area'] . ' ';
    $address_text .= $customer_info['field_address']['und'][0]['postal_code'] . '<br/>';

    $form['awards_review']['address'] = array(
      '#markup' => $address_text,
      '#prefix' => '<div id="review_address"><label>Address:</label><span>',
      '#suffix' => '</span></div>',
    );
  }

  $form['awards_review']['awards_selected'] = array(
    '#markup' => drupal_render($award_view),
  );

  return $form;

}

/**
 * Implements hook_form_submit().
 *
 * @ingroup propco_rewards_program_selection.
 */
function propco_rewards_program_selection_form_submit($form, &$form_state) {

  $form = array();

  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  // Process the submitted information.
  $selected_awards = array();
  $selected_vendors = array();

  $customer_info = array();

  $customer_auth = session_cache_get('propco_rewards_user_pin_auth');
  $pin_nids = array();

  $pin_nids[] = $customer_auth['pin_id'];

  $customer_pin = entity_load('node', $pin_nids);

  $pin_wrapper = entity_metadata_wrapper('node', $customer_pin[$pin_nids[0]]);
  foreach ($form_state['step_information'] as $index => $value) {

    unset($value['stored_values']['form_id']);
    unset($value['stored_values']['form_build_id']);
    unset($value['stored_values']['form_token']);

    if (isset($value['stored_values']['awards_selected'])) {
      foreach ($value['stored_values']['awards_selected'] as $key => $selvalue) {
        $sel_award = node_load($selvalue, FALSE);
        $selected_awards[] = $sel_award;
        $selected_vendors[] = $sel_award->field_vendor[LANGUAGE_NONE][0]['target_id'];

      }
    }

    $customer_info = array_merge($customer_info, $value['stored_values']);
  }

  $values = array(
    'type' => 'redemption',
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
    'title' => t('Redemption ', array('%pincode' => $pin_wrapper->title->value())),
  );

  $redemption = entity_create('node', $values);

  $redemption_wrapper = entity_metadata_wrapper('node', $redemption);

  $redemption_wrapper->field_awards_selected->set($selected_awards);

  $redemption_wrapper->field_vendors->set($selected_vendors);

  if (isset($customer_info['field_address']['und'][0])) {
    $thorough_fare = $customer_info['field_address']['und'][0]['thoroughfare'];
    $premise = $customer_info['field_address']['und'][0]['premise'];
    $locality = $customer_info['field_address']['und'][0]['locality'];
    $admin_area = $customer_info['field_address']['und'][0]['administrative_area'];
    $postal_code = $customer_info['field_address']['und'][0]['postal_code'];

    $field_address['thoroughfare'] = _propco_rewards_encryption_pin_encrypt_decrypt($thorough_fare, 'encrypt');
    $field_address['premise'] = _propco_rewards_encryption_pin_encrypt_decrypt($premise, 'encrypt');
    $field_address['locality'] = _propco_rewards_encryption_pin_encrypt_decrypt($locality, 'encrypt');
    $field_address['administrative_area'] = _propco_rewards_encryption_pin_encrypt_decrypt($admin_area, 'encrypt');
    $field_address['postal_code'] = _propco_rewards_encryption_pin_encrypt_decrypt($postal_code, 'encrypt');

    $redemption_wrapper->field_address->set($field_address);
  }

  $redemption_wrapper->field_phone->set($customer_info['phone']);

  $email = _propco_rewards_encryption_pin_encrypt_decrypt($customer_info['email'], 'encrypt');
  $redemption_wrapper->field_email->set($email);

  $fname = _propco_rewards_encryption_pin_encrypt_decrypt($customer_info['name_first'], 'encrypt');
  $redemption_wrapper->field_first_name->set($fname);

  $lname = _propco_rewards_encryption_pin_encrypt_decrypt($customer_info['name_last'], 'encrypt');
  $redemption_wrapper->field_last_name->set($lname);

  $redemption_wrapper->field_redemption_program->set($pin_wrapper->field_program->value());

  $redemption_wrapper->field_redemption_pin->set($customer_pin[$pin_nids[0]]);

  $redemption_wrapper->field_confirmation_number->set(_rewards_generate_order());

  $redemption_wrapper->save();

  $pin_wrapper->field_redemption->set($redemption);

  $pin_wrapper->save();

  $pin_program = $pin_wrapper->field_program->value();

  try {
    // Invalidate the user's pin access.
    propco_login_invalidate_pin_auth();
    // Send our notificaton emails and set the pin to "redeemed".

    rules_invoke_component('rules_process_customer_redemption', $customer_pin[$pin_nids[0]], $redemption, $pin_program);
  }
  catch (Exception $e) {
    watchdog('propco_rewards', $e, array(), WATCHDOG_NOTICE, 'link');
  }
}

/**
 * Attach address form.
 */
function propco_rewards_field_attach_addressform($field_name, $entity_type, $bundle, $entity, &$form, &$form_state, $langcode = NULL) {

  // Set #parents to 'top-level' if it doesn't exist.
  $form += array(
    '#parents' => array(),
  );

  // If no language is provided use the default site language.
  $options = array(
    'language' => field_valid_language($langcode),
    'default' => TRUE,
  );

  // Append to the form.
  ctools_include('fields');
  $field_instance = field_info_instance($entity_type, $field_name, $bundle);
  $form += (array) ctools_field_invoke_field($field_instance, 'form', $entity_type, $entity, $form, $form_state, $options);
}

/**
 * Implements hook_permission().
 */
function propco_rewards_permission() {
  return array(
    'administer rewards pins' => array(
      'title' => t('Import and Modify reward Pin data'),
    ),
    'administer rewards configuration' => array(
      'title' => t('Administer Rewards Configuration'),
    )
  );

}

/**
 * Generate the order confirmtion number and check for duplicates.
 */
function _rewards_generate_order() {
  $order = '';
  do {
    // Generate the order confirmtion number and check for duplicates.

    $max = pow(10, 12);
    $order = mt_rand(0, $max);
    $order = str_pad($order, 12, '0', STR_PAD_LEFT);

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'redemption')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_confirmation_number', 'value', $order, '=')
      ->execute();

  } while (!empty($result['node']));
  return $order;
}

/**
 * Validate that the user has a valid pin to access the program , and that the pin is a valid one.
 */
function _propco_rewards_selection_access($node) {
  $has_access = TRUE;
  try {
    $program = $node;
    $pin_auth = session_cache_get('propco_rewards_user_pin_auth');

    if ($program->nid != $pin_auth['program_id']) {
      $has_access = FALSE;
      watchdog('propco_rewards', 'program access denied - program id doesnt match auth', array(), WATCHDOG_NOTICE, 'link');
    }
    if ($pin_auth['redeemed']) {

      $has_access = FALSE;

    }

  }
  catch (Exception $e) {
    watchdog('propco_rewards', $e, array(), WATCHDOG_NOTICE, 'link');
    drupal_set_message(t('error'), 'status', FALSE);
    return FALSE;
  }
  return $has_access;

}

/**
 * Validate program access.
 */
function propco_rewards_validate_program_access($pinvalue, $program_id) {
  try {
    // Invoke the rules component programmatically
    // passing the $pin parameter.
    $result = rules_invoke_component('rules_validate_program_access', $pinvalue, $program_id);
    return $result;
  }
  catch (Exception $e) {
    watchdog('propco_rewards', $e);
    return FALSE;
  }
  return FALSE;
}

/**
 * Validate pin dates.
 */
function propco_rewards_validate_pin_dates($pinvalue) {
  try {
    // Invoke the rules component programmatically
    // passing the $pin parameter.
    $result = rules_invoke_component('rules_validate_pin_dates', $pinvalue);
    return $result;

  }
  catch (Exception $e) {
    watchdog('propco_rewards', $e);
    return FALSE;
  }
  return FALSE;
}

/**
 * Validate pin status.
 */
function propco_rewards_validate_pin_status($pinvalue) {
  try {
    // Invoke the rules component programmatically
    // passing the $pin parameter.
    $result = rules_invoke_component('rules_validate_pin_dates', $pinvalue);
    return $result;

  }
  catch (Exception $e) {
    watchdog('propco_rewards', $e);
    return FALSE;
  }
  return FALSE;
}

/**
 * Validate program dates.
 */
function propco_rewards_validate_program_dates($programvalue) {
  try {
    // Invoke the rules component programmatically
    // passing the $program parameter.
    $result = rules_invoke_component('rules_validate_program_dates', $programvalue);
    return $result;

  }
  catch (Exception $e) {
    watchdog('propco_rewards', $e);
    return FALSE;
  }
  return FALSE;
}

/**
  * Encrypt and Decrypt PINS function.
  */
function _propco_rewards_encryption_pin_encrypt_decrypt($text, $op) {
  $propco_rewards_encrypted_variable_key = _propco_rewards_encryption_get_key();
  $key = _mysql_aes_key($propco_rewards_encrypted_variable_key);

  if (empty($text)) {
    return '';
  }

  if ($op == 'decrypt') {
    $result = db_query("SELECT
                          AES_DECRYPT(
                            UNHEX(:en_text), :key
                          )
                          AS title",
                            array(
                              ':en_text' => $text,
                              ':key' => $key
                            )
                      );
    $text = '';
    foreach ($result as $row) {
      $text = $row->title;
    }

  } elseif ($op == 'encrypt') {
    $result = db_query("SELECT
                          HEX(
                            AES_ENCRYPT(:en_text, :key)
                          )
                          AS title",
                            array(
                              ':en_text' => $text,
                              ':key' => $key
                            )
                      );
    $text = '';
    foreach ($result as $row) {
      $text = $row->title;
    }
  }

  return $text;
}

/**
 * Encryption key generation.
 */
function _propco_rewards_encryption_get_key() {
  $default_key = 'u1xnyr5zFzGj92gt';
  return variable_get('propco_rewards_encrypted_variable_key', $default_key);
}
