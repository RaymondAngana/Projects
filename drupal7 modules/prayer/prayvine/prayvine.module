<?php

$_SECRET_KEY = "prayvine-ian-prkos";
/*
 * create SQL tables: see tables.sql in modules files
 */

/**
 * Implements hook_views_api().
 */
function prayvine_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'prayvine'),
  );
}

/**
 * implement hook_menu
 * @return array
 */
function prayvine_menu() {
  $items['pray_silently/%/%'] = array
    ('page callback' => 'drupal_get_form',
    'page arguments' => array('prayvine_pray_verbaly', 1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['update/%'] = array
    ('page callback' => 'drupal_get_form',
    'page arguments' => array('prayvine_post_comment', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/topic_edit'] = array
    (
    'title' => 'Admin',
    'page callback' => 'prayvine_topic_edit_form',
    'page arguments' => array(1),
    'access callback' => 'prayvine_delete_topic_access',
    'access arguments' => array('delete topic', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['delete_update/%'] = array
    ('title' => 'Delete update',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('prayvine_confirm_update_delete', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['signin_register/%'] = array
    ('page callback' => 'drupal_get_form',
    'page arguments' => array('prayvine_signin_register', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['add'] = array
    ('page callback' => 'prayvine_add_subscription',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['remove'] = array
    ('page callback' => 'prayvine_remove_subscription',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['say_amen/%/%/%'] = array
    ('page callback' => 'prayvine_say_amen',
    'access arguments' => array('access content'),
    'page arguments' => array(1, 2, 3),
    'type' => MENU_CALLBACK,
  );
  $items['set_sharing'] = array
    ('page callback' => 'prayvine_set_sharing',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['node_delete/%node/delete_topic'] = array
    (
    'title' => 'Delete entire page',
    'page arguments' => array('node', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('prayvine_delete_topic'),
    'access callback' => 'prayvine_delete_topic_access',
    'access arguments' => array('delete topic', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['prayvine_ajax_comment'] = array(
    'page callback' => 'prayvine_ajax_comment_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['prayvine_ajax_prayer'] = array(
    'page callback' => 'prayvine_ajax_prayer_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/user/logout'] = array(
    'title' => 'Log out',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'user_logout',
    'menu_name' => 'user-menu',
    'file' => 'user.pages.inc',
    'file path' => '/modules/user/',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );
  $items['set_url'] = array(
    'page callback' => 'prayvine_set_url',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
//ajax autoload
  $items['topic_autoload'] = array(
    'page callback' => 'prayvine_autoload_topic',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
//admin pages
  $items['email_admin'] = array
    (
    'title' => 'Administry emails',
    'page callback' => 'prayvine_admin_emails',
    'access arguments' => array('administer nodes'), //admin permission
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['prayfor/%'] = array
    ('page callback' => 'prayvine_redirect',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['loadform/%/%'] = array(
    'page callback' => 'prayvine_loadform_make_link',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['loadformcancel/%/%'] = array(
    'page callback' => 'prayvine_loadformcancel',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function prayvine_get_webform_nid_by_title($title) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'webform')
      ->propertyCondition('title', $title)
      ->execute();
  return array_shift($entities['node']);
}

/**
 * Helper function to make a link.
 */
function prayvine_loadform_make_link($topic, $prayer_request_id) {

//echo $topic."---".$prayer_request_id;

  global $base_url;

  $node = prayvine_get_webform_nid_by_title('Set Follow-up Reminder');
  $path = drupal_get_path('module', 'prayvine');

  drupal_add_js(array('prayvine_reminder_node_id' => $node->nid), 'setting');
  drupal_add_js(array('prayvine_reminder_page_id' => $topic), 'setting');

  drupal_add_js($path . '/prayvine_loadform_general.js');
  $link_text = 'All Your Queries';
  return l($link_text, $base_url . '/modal_forms/nojs/webform/' . $node->nid, array('attributes' => array('id' => 'prayvine-loadform_general', 'class' => 'ctools-use-modal ctools-modal-modal-popup-small'),
    'query' => array('topic_id' => $topic, 'prayer_request_id' => $prayer_request_id),
  ));
}

/**
 * Helper function to make a link.
 */
function prayvine_loadformcancel($topic, $prayer_request_id) {
  $node = node_load($prayer_request_id);
  $node->field_want_reminder['und'][0]['value'] = 0;
//Saving updated node value.
  node_save($node);
  drupal_goto('node/' . $topic);
  drupal_exit();
}

/*
 *
 * function to redirect user
 *
 */

function prayvine_redirect($vanity_alias) {
  $vanity_alias = strtolower($vanity_alias);
  $iNid = db_query("select entity_id from {field_data_field_vanityurl} where LOWER(field_vanityurl_value) = :field_vanityurl_value ", array(':field_vanityurl_value' => $vanity_alias))->fetchField();
  if (!empty($iNid)) {
    $strCode = prayvine_generate_random_string(6);
    while (TRUE) {
      $iNumRows = db_query("select count(nid) from {prayvine_invites} where invite_code = ':invite_code'", array(':invite_code' => $strCode))->fetchField();
      if ($iNumRows == 0)
        break;
      $strCode = prayvine_generate_random_string(6);
    }
    $iAuthorId = prayvine_get_authorid($iNid);
    global $user;
    if ($user->uid) {
      $subscriberID = db_query("select count(*) from {prayvine_subscriptions} where nid = :nid and uid = :uid", array(':nid' => $iNid, ':uid' => $user->uid))->fetchField();
      $iAuthorId = prayvine_get_authorid($iNid);
      ;

      if ($user->uid == $iAuthorId || $subscriberID > 0) {
        $redirectUrl = $base_url . '/node/' . $iNid;
        header('Location: ' . $redirectUrl, TRUE, '302');
        drupal_exit($redirectUrl);
      }
      else {
//subscribe this user and take to node page
        db_query("insert into {prayvine_invites} (mail, nid, status, inviter_uid, invite_code, sent) values (:mail, :nid, 1, :inviter_uid, :invite_code, now())", array(':mail' => $user->mail, ':nid' => $iNid, ':inviter_uid' => $iAuthorId, ':invite_code' => $strCode));
        $redirectUrl = '';
        $redirectUrl = $base_url . '/node/' . $iNid . '?token=' . $strCode;
        header('Location: ' . $redirectUrl, TRUE, '302');
        drupal_exit($redirectUrl);
      }
    }
    else {
//case for anonymous user
      db_query("insert into {prayvine_invites} (mail, nid, status, inviter_uid, invite_code, sent) values ('', :nid, 1, :inviter_uid, :invite_code, now())", array(':nid' => $iNid, ':inviter_uid' => $iAuthorId, ':invite_code' => $strCode));

      $redirectUrl = '';

      $redirectUrl = $base_url . '/node/' . $iNid . '?token=' . $strCode;
      header('Location: ' . $redirectUrl, TRUE, '302');
      drupal_exit($redirectUrl);
    }
  }
}

/**
 * used to set #hash anchor after user is logged in so redirect will be perform
 * php not recognize # anchor so it can not be used by default
 */
function prayvine_set_url() {

//it is used to track user so proper redirect can assign;
  $temp['url'] = $_POST['url'];
//create track id
  if (empty($_COOKIE['prayvine_track_logged_in'])) {
    $cookie = uniqid('prayvine_url_', true);
    setcookie('prayvine_track_logged_in', $cookie);
    $_COOKIE['prayvine_track_logged_in'] = $cookie;
    //variable_set($cookie, $value);
  }
  $temp['unique_cookie'] = $_COOKIE['prayvine_track_logged_in'];
  if (!empty($temp['url']) && !empty($temp['url'])) {
    variable_set($temp['unique_cookie'], $temp['url']);
  }

  $data = drupal_json_output($temp);
  return $data;
}

/**
 * pray verbaly on prayer request
 * @param array $form
 * @param type $form_state
 * @param type $request_id
 * @return type
 */
function prayvine_pray_verbaly($form, &$form_state, $request_id, $user_uid, $comment) {

  $path = drupal_get_path('module', 'prayvine');
  drupal_add_css($path . '/prayvine.css');
  global $user;

  // Set variable title.
  $title = '';
  $pr_req = node_load($request_id);
  if (isset($pr_req->title)) {
    $title = $pr_req->title;
  }

  // Set variable topic_id.
  $topic_id = -1;
  $pr_req = node_load($request_id);
  if (isset($pr_req->field_topic_id['und'][0]['value'])) {
    $topic_id = $pr_req->field_topic_id['und'][0]['value'];
  }

  $class = 'silent-none';
  if (empty($comment)) {
    $request = node_load($request_id);
    $class = 'silent-node';
    if ($request->nid == 0) {
      drupal_set_message(t('Request with id @nid not found!', array('@nid' => $request_id)));
      drupal_goto();
    }
    $topic_id = $request->field_topic_id['und'][0]['value'];
    $subcribers = prayvine_get_subscriber_ids($topic_id);
    if (!in_array($user_uid, $subcribers)) {
      drupal_set_message(t('You are not subscribed to topic @nid!', array('@nid' => $topic_id)));
//drupal_goto();
    }
    $author_name = prayvine_get_name($request->uid);
    $author_first_name = prayvine_get_first_name($request->uid);
    $author = user_load($request->uid);
    $render_array = node_view($request, 'full');
    $render_array['links']['#access'] = FALSE;
    $render_array['#node']->status = 1;
    $render_array['body']['#object']->name = $author_name;
    $title = $render_array['#node']->title;
    $render_array['#node']->title = '';
    $render_array['body']['#attributes'] = array('class' => array('nesto'));
    $unit_html = drupal_render($render_array);
    if (empty($author->picture)) {//no image
      $unit_html = str_replace('node-' . $request_id, 'node-' . $request_id . ' user-image-default', $unit_html);
    }


    $unit_html = str_replace(
      '<span property="dc:date',
      '<span class="prayer-author">'.t('@author', array('@author' => $author_name)).'</span><span property="dc:date',
      $unit_html);

    $unit_html = str_replace(
      '<span property="dc:date',
      '<span class="prayer-title">'.$title.'</span><span property="dc:date',
      $unit_html);

    $unit_html = "<div class=\"prayer-container\">" . $unit_html . "</div>";

  }
  else {
    $class = 'silent-comment';
    $request = comment_load($request_id);
    $author = user_load($request->uid);
    if (!empty($author->picture)) {
      $unit_html = '<div class="silent-comment-content"><p class="submitted">';
      $unit_html .= '<span class="user-picture"><a title="View user profile." href="/user/' . $request->uid . '">' . prayvine_get_picture($request->uid) . '</a></span>';
    }
    else {
      $unit_html = '<div class="silent-comment-content user-image-default"><p class="submitted">';
    }

    $unit_html .= '<span property="dc:date dc:created">' . t('Sent on ') . format_date($request->created, 'long') . '</span></p>';
    $unit_html .= $request->comment_body['und'][0]['safe_value'] . '</div>';
    $author_name = prayvine_get_name($request->uid);
    $author_first_name = prayvine_get_first_name($request->uid);

    $unit_html = str_replace(
      '<span property="dc:date',
      '<span class="prayer-author">'.t('@author', array('@author' => $author_name)).'</span><span property="dc:date',
      $unit_html);

    $unit_html = str_replace(
      '<span property="dc:date',
      '<span class="prayer-title">'.$title.'</span><span property="dc:date',
      $unit_html);

    $unit_html = "<div class=\"prayer-container\">" . $unit_html . "</div>";

  }

  $key = $_GET['key'];
  $compare_key = md5('ve1b2!!' . $request_id . $user_uid . 've2b1!!');
  if ($compare_key != $key) {
    drupal_set_message(t('Access key is not valid contact support or system administrator!'));
    drupal_goto();
  }

  $topic = node_load($topic_id);
  if (isset($topic->field_ministry['und'][0]['value']) && !empty($topic->field_ministry['und'][0]['value'])) {
    $image_array = field_view_field('node', $topic, 'field_logo');
    $image_array['#title'] = '';
    $image_array['#label_display'] = 'hidden';
    $image = drupal_render($image_array);
    $request_html = '<div id="logo-fullscreen-ministry">' . $image . '</div>';
  }
  else {
    $logo = theme_get_setting('logo');
    $request_html = '<a id="logo-fullscreen" rel="home" title="Home" href="/"><img alt="Home" src="' . $logo . '"></a>';
  }

  $request_html .= $unit_html;
  //$request_html .= '<h1>' . t('Prayer request / update from @author', array('@author' => $author_name)) . '</h1>';
  $request_html .= '<button id="full-screen">' . t('Full screen') . '</button>';
  $request_html .= '<button class="pv-hidden" id="full-screen-exit">' . t('Exit Full screen') . '</button>';

  $request_html .= '<p class="encourage">' . t('Did you pray for this? If so, please encourage @author-firstname by clicking this button:', array('@author-firstname' => $author_first_name)) . '</p>';
  // $request_html .= '<hr>';
  $form['#attributes'] = array('class' => array($class));

  $form['request'] = array(
    '#markup' => $request_html,
  );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'prayvine') . '/prayvine_screen.js',
  );
  $form['request_notify'] = array(
    '#type' => 'submit',
    '#value' => t('I prayed for this', array('@author-firstname' => $author_first_name)),
    '#submit' => array('prayvine_pray_verbaly_notify'),
  );
  /* $form['request_secret'] = array(
    '#type' => 'submit',
    '#value' => t('I prayed in secret. Notify @author-firstname that someone prayed anonymously.',array('@author-firstname' => $author_first_name)),
    '#submit' => array('prayvine_pray_verbaly_secret'),
    ); */
  $form['request_id'] = array(
    '#type' => 'hidden',
    '#value' => $request_id,
  );
  $form['user_id'] = array(
    '#type' => 'hidden',
    '#value' => $user_uid,
  );
  $form['comment'] = array(
    '#type' => 'hidden',
    '#value' => $comment,
  );
  return $form;
}

/**
 * notify author of request about praying
 * @param type $form
 * @param type $form_state
 * @param type $request_id
 */
function prayvine_pray_verbaly_notify($form, &$form_state) {
  $request_id = $form_state['input']['request_id'];
  $comment = $form_state['input']['comment'];
  $user_id = $form_state['input']['user_id'];
  if (empty($comment)) {
    $request = node_load($request_id);
    $topic_id = $request->field_topic_id['und'][0]['value'];
    $topic = node_load($topic_id);
    $author = user_load($request->uid);
    $prayer = user_load($user_id);
    if (empty($topic->field_ministry['und'][0]['value'])) {
      $ministry = 0;
    }
    else {
      $ministry = $topic->field_ministry['und'][0]['value'];
    }
    $footer = prayvine_get_email_footer($prayer->mail, $prayer, $topic->title);
    rules_invoke_event('prayvine_pray_verbaly_notify', $request, $author, $topic, $prayer, $footer, $ministry);
  }
  else {
    $comment = comment_load($request_id);
    $topic_id = $comment->nid;
    $topic = node_load($topic_id);
    $author = user_load($comment->uid);
    $prayer = user_load($user_id);
    if (empty($topic->field_ministry['und'][0]['value'])) {
      $ministry = 0;
    }
    else {
      $ministry = $topic->field_ministry['und'][0]['value'];
    }
    $footer = prayvine_get_email_footer($prayer->mail, $prayer, $topic->title);
    rules_invoke_event('prayvine_pray_verbaly_notify_comment', $comment, $author, $topic, $prayer, $footer, $ministry);
  }
  global $user;
  if ($user->uid > 0) {
    drupal_goto('node/' . $topic->nid); //redirect user when prayed silently to topic page
  }

  if (module_exists('prayvine_logger')) {

    if ($user_id > 0) {
      prayvine_logger_log($user_id, $request_id, 'pray_silently');
    }
    else {
      if (!empty($strToken)) {
        prayvine_logger_log($strToken, $request_id, 'pray_silently');
      }
      else {
        prayvine_logger_log(0, $request_id, 'pray_silently');
      }
    }
  }
}

/**
 * notify author of request about praying anonymously
 * @param type $form
 * @param type $form_state
 * @param type $request_id
 */
function prayvine_pray_verbaly_secret($form, &$form_state) {
  $request_id = $form_state['input']['request_id'];
  $user_id = $form_state['input']['user_id'];
  $request = node_load($request_id);
  $topic_id = $request->field_topic_id['und'][0]['value'];
  $topic = node_load($topic_id);
  $author = user_load($request->uid);
  $prayer = user_load($user_id);
  if (empty($topic->field_ministry['und'][0]['value'])) {
    $ministry = 0;
  }
  else {
    $ministry = $topic->field_ministry['und'][0]['value'];
  }
  $footer = prayvine_get_email_footer($prayer->mail, $prayer, $topic->title);
  rules_invoke_event('prayvine_pray_verbaly_secret', $request, $author, $topic, $prayer, $footer, $ministry);
//count pray silently
  if (module_exists('prayvine_logger')) {
    global $user;
    if ($user_id > 0) {
      prayvine_logger_log($user_id, $request_id, 'pray_silently');
    }
    else {
      if (!empty($strToken)) {
        prayvine_logger_log($user_id, $request_id, 'pray_silently');
      }
      else {
        prayvine_logger_log(0, $request_id, 'pray_silently');
      }
    }
  }
}

/**
 * get comment submit form
 */
function prayvine_ajax_comment_callback($nid) {
// $nid = $_GET['nid'];

  if ($nid <= 0) {
    drupal_set_message("Please try again", 'error');
    drupal_goto("");
  }
  $strToken = "";
  global $user;
  if ($user->uid <= 0) {
    if (isset($_GET['token']))
      $strToken = $_GET['token'];
    if (empty($strToken)) {
      drupal_set_message("Please try again", 'error');
      drupal_goto("");
    }
  }

  $iNid = $nid;
  if (!is_numeric($iNid) || ($iNid < 1)) {
    drupal_set_message("Invalid prayer journal.", 'error');
    drupal_goto("");
  }
  $strToken = $_GET['token'];
  global $user;
  $iAuthorId = prayvine_get_authorid($iNid);

  $strMail = "";
  $strName = "";
  if ($user->uid <= 0) {
    if (empty($strToken)) {
      drupal_set_message("Insufficient permissions", 'error');
      drupal_goto("");
    }
    $strMail = prayvine_get_mail_from_token($strToken);
    $strName = $strMail;
  }
  else {
    $strMail = $user->mail;
    $strName = $user->name;
  }
  $comment = new stdClass;
  $comment->nid = $nid;
  $comment->mail = $strMail; // user's email
  $comment->name = $strName; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymo
  $comment_form = drupal_get_form('comment_form', $comment);
  $comment_form['author']['#access'] = false;
  $comment_form['subject']['#access'] = false;
  $comment_form['comment_body']['und'][0]['format']['#access'] = false;
  $comment_form['actions']['preview']['#access'] = false;
  $comment_form['comment_body']['und']['#title'] = t('Your update will be shared with this prayer community only.');
  $comment_form['comment_body']['und'][0]['#title'] = t('Your update will be shared with this prayer community only.');
  $comment_form['comment_body']['und'][0]['value']['#title'] = t('Your update will be shared with this prayer community only.');
  $comment_form['actions']['submit']['#value'] = t('Post update');
  $comment_form['field_add_photo']['und'][0]['upload_button']['#value'] = t('Preview photo');
//add show hide buttons
  $comment_form['field_add_photo']['#prefix'] = t('Optional:') . ' <span class="photo-add">' . t('Add photo') . '</span>' . ' |  <span class="pdf-add">' . t('Add PDF or Word document') . '</span>';
  $comment_form['field_pdf_doc']['und'][0]['upload_button']['#value'] = t('Upload document');

  $topic = node_load($nid);
  if (empty($topic->field_ministry['und'][0]['value'])) {
    $comment_form['field_add_photo']['#access'] = false;
    $comment_form['field_pdf_doc']['#access'] = false;
  }
  $comment_form['nid'] = array
    ('#type' => 'hidden',
    '#value' => $nid,
  );
  $comment_form['token'] = array
    ('#type' => 'hidden',
    '#value' => $strToken,
  );


  $data = drupal_render($comment_form);
  return $data;
//drupal_json_output($data);
}

/**
 * get prayer submit form
 * ajax callback for prayer insert
 */
function prayvine_ajax_prayer_callback($topic, $token) {
  module_load_include('inc', 'node', 'node.pages');
//$topic = $_GET['topic'];
//$token = $_GET['token']; //needed to be able to insert prayer to right user when user is not logged on
  $_GET['token'] = $token;
  $_GET['topic'] = $topic;
  $topic_node = node_load($topic);
  if (true) {
    $form = node_add('prayer');

    $form['revision_information']['#access'] = false;
    $form['author']['#access'] = false;
    $form['options']['#access'] = false;
    $form['path']['#access'] = false;
    $form['comment_settings']['#access'] = false;
//$form['#action'].='&destination=signin_register/' . $topic . '&token=' . $token . '&topic=' . $topic;
    $form['#action'].='&destination=node/' . $topic;
    $form['field_prayer_text']['und'][0]['#rows'] = 5;
    $form['field_prayer_text']['und'][0]['value']['#rows'] = 5;
    $form['field_add_photo']['und'][0]['upload_button']['#value'] = t('Preview');
    if (empty($topic_node->field_ministry['und'][0]['value'])) {
      $form['field_add_photo']['#access'] = false;
    }
    $data = drupal_render($form);
  }
//drupal_json_output($data);
  return $data;
}

/**
 * get prayer request submit form
 * ajax callback for prayer insert
 */
function prayvine_ajax_request_callback($topic, $token) {
  module_load_include('inc', 'node', 'node.pages');
//$topic = $_GET['topic'];
//$token = $_GET['token']; //needed to be able to insert prayer to right user when user is not logged on
  $_GET['token'] = $token;
  $_GET['topic'] = $topic;
  $topic_node = node_load($topic);
  if (true) {
    $form = node_add('prayer_request');
    $form['#prefix'] = '<h2>' . t('Your request will be shared with this prayer community only. ') . '</h2>';
    $form['revision_information']['#access'] = false;
    $form['author']['#access'] = false;
    $form['options']['#access'] = false;
    $form['path']['#access'] = false;
    $form['comment_settings']['#access'] = false;

//$form['#action'].='&destination=signin_register/' . $topic . '&token=' . $token . '&topic=' . $topic;
    $form['#action'].='&destination=node/' . $topic;
    $form['field_mark_as_urgent']['und']['#title'] = ''; //remove label
    $form['field_mark_as_urgent']['#weight'] = '150';
    $form['title']['#access'] = false;
    $form['body']['und'][0]['value']['#rows'] = 5;
    $form['body']['und'][0]['value']['#title'] = '';
    $form['actions']['submit']['#attributes'] = array('class' => array('button-pray-request'));
    $form['field_add_photo']['und'][0]['upload_button']['#value'] = t('Preview');
    if (empty($topic_node->field_ministry['und'][0]['value'])) {
      $form['field_add_photo']['#access'] = false;
    }
    $data = drupal_render($form);
  }
//drupal_json_output($data);
  return $data;
}

/**
 * create private replay message
 * @param type $prayer
 */
function prayvine_private_replay_create() {
  $form = drupal_get_form('prayvine_private_replay');
  $message = drupal_render($form);

  return $message;
}

function prayvine_private_replay_create_missionary() {
  $form = drupal_get_form('prayvine_private_replay_missionary');
  $message = drupal_render($form);

  return $message;
}

/**
 * private mail
 * @param type $form
 * @param type $form_state
 */
function prayvine_private_replay($form, &$form_state) {

  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
  );
  $form['user_uid'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#attributes' => array('class' => array('user_uid'))
  );
  $form['request_id'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#attributes' => array('class' => array('request_id'))
  );
  $form['comment_id'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#attributes' => array('class' => array('comment_id'))
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send message')
  );

  return $form;
}

function prayvine_private_replay_missionary($form, &$form_state) {

  $Node = explode("/", $_GET['q']);
  $node = node_load($Node[1]);
  $missionaryName = "<UNKNOWN>";
  if (array_key_exists('und', $node->field_prayer_recipient)) {
    $missionaryName = $node->field_prayer_recipient['und'][0]['value'];
  }
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
  );
  $form['user_uid'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#attributes' => array('class' => array('user_uid'))
  );
  $form['request_id'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#attributes' => array('class' => array('request_id'))
  );
  $form['comment_id'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#attributes' => array('class' => array('comment_id'))
  );


  $form['submit'] = array(
    '#suffix' => '<div class="center-content"><p class="permissions">Sent to ' . $missionaryName . ' only.</p></div>',
    '#type' => 'submit',
    '#value' => t('Send message')
  );

  return $form;
}

/**
 * submit private mail
 * @param type $form
 * @param type $form_state
 */
function prayvine_private_replay_submit($form, &$form_state) {
  $message = check_plain($form_state['input']['message']);
  $user_uid = $form_state['input']['user_uid'];
  $request_nid = $form_state['input']['request_id'];
  $comment_id = $form_state['input']['comment_id'];

  if ($user_uid > 0) {
    $recipient = user_load($user_uid);
    if ($request_nid > 0) {
      $request = node_load($request_nid);
      $topic_id = $request->field_topic_id['und'][0]['value'];
      $topic = node_load($topic_id);
      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }
      rules_invoke_event('prayvine_private_message', $recipient, $message, $request, $topic, $ministry);
    }
    if ($comment_id > 0) {
      $comment = comment_load($comment_id);
      $topic_id = $comment->nid;
      $topic = node_load($topic_id);
      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }
      rules_invoke_event('prayvine_private_message_comment', $recipient, $message, $comment, $topic, $ministry);
    }
  }
}

/**
 * This function will be called for pray silent feature
 * @return string
 */
function pray_silenty_get() {
  $form = drupal_get_form('pray_silenty');
  $message = drupal_render($form);
  return $message;
}

/**
 * This will render form for pray silent
 * @param object $form
 * @param object $form_state
 * @return multitype:string multitype:string
 */
function pray_silenty($form, &$form_state) {
  global $user;
//   $query_invite_token = db_select('prayvine_silent_log"', 'silent')->fields('silent', array('uid'));
//   $query_invite_token->condition('silent.uid', $user->uid);
//   $query_invite_token->condition('silent.nid', arg(1));
//   $invite_token_result = $query_invite_token->execute()->fetchCol();
//   $invite_token = $invite_token_result[0];

 // if (empty($invite_token)) {
    $node = node_load(arg(1));
    $form['request_id'] = array(
      '#type' => 'hidden',
      '#value' => arg(1),
    );
    $form['prayvine_fieldset'] = array(
      '#prefix' => '<div id="prayvine-div" class="white-box">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
    );
    if (array_key_exists('und', $node->field_prayer_recipient)) {
      $form['prayvine_fieldset']['message_markup_prayed'] = array(
      '#markup' => '<div class="submitt-message"><div><span>Please take a moment close your eyes, quiet your heart and pray for ' . $node->field_prayer_recipient['und'][0]['value'] . '.</span></div><div><span>Did you pray for ' . $node->field_prayer_recipient['und'][0]['value'] . '? If so, let them know by clicking "Yes, I prayed!"</span></div></div>',
      );
    } else {
      $form['prayvine_fieldset']['message_markup_prayed'] = array(
      '#markup' => '<div class="submitt-message"><div><span>Please take a moment close your eyes, quiet your heart and pray for <UNKNOWN>.</span></div><div><span>Did you pray for <UNKNOWN>? If so, let them know by clicking "Yes, I prayed!"</span></div></div>',
      );
    }
    $form['prayvine_fieldset']['submit'] = array(
      '#title' => t('Call ajax request for silent pray'),
      '#type' => 'button',
      '#value' => t('Yes, I Prayed!'),
      '#ajax' => array(
        'callback' => 'ajax_prayvine_silent_pray_callback',
        'wrapper' => 'prayvine-div',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#submit' => array('trial_registration_form_submit'),
    );
 // }

//   else {
//     $form['message_markup'] = array(
//       '#markup' => '<div class="white-box"><p>You have allready submitted pray request.</p></div>',
//     );
//   }

  return $form;
}
/**
 * This perform pray silent
 * @param object $form
 * @param object $form_state
 * @return string
 */
function ajax_prayvine_silent_pray_callback($form, &$form_state) {
  global $user;
  $request_id = $form_state['values']['request_id'];
  $user_id = $user->uid;
  if (empty($comment)) {
    $request = node_load($request_id);
    $topic_id = $request_id;//arg(1);
    $topic = node_load($topic_id);
    $author = user_load($request->uid);
    $prayer = user_load($user_id);
    if (empty($topic->field_ministry['und'][0]['value'])) {
      $ministry = 0;
    }
    else {
      $ministry = $topic->field_ministry['und'][0]['value'];
    }

    $footer = prayvine_get_email_footer($prayer->mail, $prayer, $topic->title);

    //insert into db
    insert_db_log_status($prayer->uid, $request_id);

    //for node author
    rules_invoke_event('prayvine_pray_verbaly_notify', $request, $author, $topic, $prayer, $footer, $ministry);

    //for ministry communicators
    $settings_text = $topic->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);

   // insert_db_log_status($prayer->uid, $request_id);
    if (!empty($settings['ministry_communicator'])) {
      foreach ($settings['ministry_communicator'] as $ministryCommID) {
        $author = '';
        $author = user_load($ministryCommID);
        rules_invoke_event('prayvine_pray_verbaly_notify_ministry_communicator', $request, $author, $topic, $prayer, $footer, $ministry);

        //insert_db_log_status($prayer->uid, $request_id);
      }
    }
    return '<div class="white-box"><p>Thanks for your faithfulness in prayer!<br>"For I know the plans I have for you, declares the Lord, plans to prosper you and not to harm you, plans to give you hope and a future." -Jeremiah 29:11</p></div>'; //You have submitted silent pray request.
  }
}

/**
 * Log the prayer for user
 * @param integer $uid
 * @param integer $nid
 */
function insert_db_log_status($uid, $nid) {
  db_insert('prayvine_silent_log') // Table name no longer needs {}
      ->fields(array(
        'nid' => $nid,
        'uid' => $uid,
        'created' => $time,
      ))
      ->execute();
}
/**
 * Fetch all silent payers for topic
 * @param integer $topic_id
 */
function get_all_prayer_silent_record($topic_id) {
  $query = db_select('prayvine_silent_log', 'v');
  $query->fields('v', array('uid', 'nid', 'created'));
  $query->condition('nid', $topic_id);
  $result = $query->execute();
  $val = array();
  while ($record = $result->fetchAssoc()) {
    $user = user_load($record['uid']);
    $output = '<div class="prayer-silently white-box" style="display:none;">';
    $output.='<span class="date">Date ' . $record['created'] . ' </span>';
    $output.='<span class="user-name"> ' . l($user->field_first_name['und'][0]['value'] . ' ' . $user->field_last_name['und'][0]['value'], 'user/' . $record['uid']) . ' Prayed silently</span>';
    $output.='</div>';
    echo $output;
  }
}
/**
 * Fetch silent prayer for user.
 * @param int $uid
 * @param int $topic_id
 */
function get_single_prayer_silent_record($uid, $topic_id=0) {
  $query = db_select('prayvine_silent_log', 'v');
  $query->fields('v', array('uid', 'nid', 'created'));
  $query->condition('nid', $topic_id);
  $query->condition('uid', $uid);
  $result = $query->execute();
  $val = array();
  while ($record = $result->fetchAssoc()) {
    if ($record['uid'] == $uid) {
      $user = user_load($record['uid']);
      $output = '<div class="prayer-silently white-box" style="margin-bottom:8px;display:none;">';
      $output.='<span class="date">Date ' . $record['created'] . ' </span>';
      $output.='<span class="user-name"> ' . l($user->field_first_name['und'][0]['value'] . ' ' . $user->field_last_name['und'][0]['value'], 'user/' . $record['uid']) . ' Prayed silently</span>';
      $output.='</div>';
      echo $output;

    }
    else {
      echo '';
    }
  }
}

/* * ****End* */

function prayvine_private_replay_missionary_submit($form, &$form_state) {

  $action = $form_state['complete form']['#action'];
  $message = check_plain($form_state['input']['message']);
  global $user;
  $user_uid = $user->uid;
  $strMail = $user->mail;
  $strName = $user->name;
  $Node = explode("/", $action);

  $topic_id = $Node[2];
  $topic = node_load($topic_id);
  $recipient = '';
  $recipient = user_load($topic->uid);
// $recipient = user_load($user_uid); //looged in user
  if (empty($topic->field_ministry['und'][0]['value'])) {
    $ministry = 0;
  }
  else {
    $ministry = $topic->field_ministry['und'][0]['value'];
  }

//for topic author
  rules_invoke_event('prayvine_message_to_ministry_communicator', $recipient, $message, $topic, $ministry);

//for ministry communicators
  $settings_text = $topic->field_settings['und'][0]['value'];
  $settings = unserialize($settings_text);
  if (!empty($settings['ministry_communicator'])) {
    foreach ($settings['ministry_communicator'] as $ministryCommID) {
      $recipient = '';
      $recipient = user_load($ministryCommID);
      rules_invoke_event('prayvine_message_to_ministry_communicator', $recipient, $message, $topic, $ministry);
    }

    drupal_set_message(t('Your message has been sent successfully to ministry communicator.'), 'status');
  }
}

/**
 * implemented hook_menu_alter
 * @param array $items
 */
function prayvine_menu_alter(&$items) {
  $items['user/register'] = array
    ('access arguments' => array('administer users'),
  );
}

function prayvine_menu_local_tasks_alter(&$data, $router_item, $root_path) {
//dpm($data);dpm($router_item);
}

/**
 * access function
 * @param type $string
 * @param type $account
 */
function prayvine_delete_topic_access($string, $node) {
  global $user;
  $is_admin = FALSE;

  if ($user->uid == $node->uid) {
    $is_admin = TRUE;
  }

  if (!empty($node->field_settings['und'][0])) {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    if (!empty($settings['ministry_communicator'][$user->uid])) {
      $is_admin = true;
    }
  }

  if ($is_admin == TRUE && $node->type == 'topic') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * prayvine delete entire topic and prayers that belongs to topic
 * link should be delete_topic?topic_id=149
 * @param $form - form array
 * @param $form_state - submmited data
 */
function prayvine_delete_topic($form, $form_state) {
  $string = explode('/', $_GET['q']);
  $topic_id = $string[1];
  $topic = node_load($topic_id);
  global $user;

  if (empty($topic)) {
    $form['message'] = array(
      '#markup' => '<p>' . t('This prayer topic doesn\'t exist!')
    );
    return $form;
  }
  if ($user->uid != $topic->uid) {
    $form['message'] = array(
      '#markup' => '<p>' . t('You don\'t have access to this page!')
    );
    return $form;
  }
  $form['topic'] = array(
    '#type' => 'value',
    '#value' => $topic_id,
  );
  $form = confirm_form($form, t('Are you sure you want to delete this prayer community: %title?', array('%title' => $topic->title)), 'node/' . $topic->nid, t('Any prayers and updates in this journal will be lost. This action cannot be undone.'), t('Delete'), t('Cancel'), 'prayvine_delete_topic');

  return $form;
}

/**
 * submit of delete topic page
 * @param type $form
 * @param type $form_state
 */
function prayvine_delete_topic_submit($form, $form_state) {
  $topic_id = $form_state['values']['topic'];
  $topic = node_load($topic_id);

  $prayres = prayvine_get_prayers($topic_id);

  //delete all prayers attached to topic it will also delete all comments
  foreach ($prayres as $prayer) {
    node_delete($prayer->nid);
    prayvine_delete_prayvine_entries($prayer->nid);
  }
  node_delete($topic_id);
  prayvine_delete_prayvine_entries($topic_id);
  //delete all prayvine data
  $message = t('Prayer community %title has been deleted', array('%title' => $topic->title));
  drupal_set_message($message);
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('delete-topic');
  }

  drupal_goto("");
}

/**
 * deletes entries in prayvine tables
 * @param type $nid
 */
function prayvine_delete_prayvine_entries($nid) {
  db_query("delete from {prayvine_anonymous_posts} where nid = :nid", array(':nid' => $nid));
  db_query("delete from {prayvine_invites} where nid = :nid", array(':nid' => $nid));
  db_query("delete from {prayvine_prayer_amens} where nid = :nid", array(':nid' => $nid));
  db_query("delete from {prayvine_subscriptions} where nid = :nid", array(':nid' => $nid));
  /*
    db_delete('prayvine_anonymous_posts')->condition('nid',$nid)->execute();
    db_delete('prayvine_invites')->condition('nid',$nid)->execute();
    db_delete('prayvine_prayer_amens')->condition('nid',$nid)->execute();
    db_delete('prayvine_subscriptions')->condition('nid',$nid)->execute();
   */
}

/**
 * forward user to its user account
 * @global type $user
 */
function pray_vine_forward() {
  global $user;
  if ($user->uid <= 0)
    drupal_goto("");
  else
    drupal_goto("user/");
}

/**
 * create topic form used to enter new pray topic
 * @return type
 */
function prayvine_create_topic_form() {
  $form = array();
  $form['set'] = array('#type' => 'fieldset',
    '#title' => t('Create a Prayer Community'),
    '#prefix' => "<div class='content-row'>",
    '#suffix' => "</div>",
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['set']['intro'] = array('#type' => 'item',
    '#title' => t('<p>It\'s easy to start a new prayer community on Prayvine. Start by naming your community. <span class="pv-example">Examples: Bible study group, India missions trip, children\'s ministry, personal prayer journal, etc. </span></p>'),
  );
  $form['set']['topic'] = array('#type' => 'textfield',
    '#title' => t('Name your prayer community'),
    '#attributes' => array('placeholder' => t('Enter a name here')),
  );
  $form['set']['submit'] = array('#type' => 'submit',
    '#value' => t('Create new prayer community'),
    '#attributes' => array('text-align' => 'right'),
  );
  return $form;
}

/**
 * submit new prayer topic
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function prayvine_create_topic_form_submit($form, &$form_state) {
// create topic node
// goto node/add/prayer?topic=X
// in form_alter, set X in form
// in node_save, store X
  global $user;
  if (is_null($user) || !isset($user->uid) || ($user->uid <= 0)) {
    drupal_set_message("Please log in");
    drupal_goto("");
  }
  $strTitle = $form_state['values']['topic'];
  if (empty($strTitle)) {
    drupal_set_message("Please specify a topic title");
    drupal_goto("");
  }
  $node = new stdClass();
  $node->type = "topic";
  node_object_prepare($node); // sets the uid
  $node->title = $strTitle;
  $node->language = LANGUAGE_NONE;
  $node = node_submit($node);
  if ($node != null) {
    node_save($node);
    $nid = db_insert('prayvine_subscriptions') // Table name no longer needs {}
        ->fields(array(
          'nid' => $node->nid,
          'uid' => $user->uid,
        ))
        ->execute();


    drupal_goto("node/" . $node->nid);
  }
  else {
    drupal_set_message("Encountered error when creating topic page");
    drupal_goto("");
  }
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('create-topic');
  }
}

/**
 * confirmation form when comment is deleted
 * @param type $form
 * @param type $args
 * @return type
 */
function prayvine_confirm_update_delete($form, $args) {
  $cid = 0;

  if (isset($args['build_info']['args'][0]))
    $cid = $args['build_info']['args'][0];
  if ($cid <= 0) {
    drupal_set_message("Invalid comment id", 'error');
    drupal_goto("");
  }

  $form = array();
  $form['cid'] = array('#type' => 'value', '#value' => $cid);
  $comment = db_query("select b.comment_body_value, c.nid from {field_data_comment_body} b, {comment} c where b.entity_type = 'comment' and b.entity_id = c.cid and b.entity_id = :cid", array(':cid' => $cid))->fetchObject();
  if ($comment == NULL) {
    drupal_set_message("Could not find comment", 'error');
    drupal_goto("");
  }
  return confirm_form($form, t('Are you sure you want to delete this update?'), 'node/' . $comment->nid, t('%title', array('%title' => $comment->comment_body_value)), t('Delete'), t('Cancel'), 'prayvine_confirm_update_delete');
}

/**
 * perform comment deletion when confirmation form is submmited
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function prayvine_confirm_update_delete_submit($form, &$form_state) {
// Delete the comment and its replies.
  $iCid = $form_state['values']['cid'];

  global $user;
  if ($user->uid == 0) {
    drupal_set_message("Please log in to delete the comment", 'error');
    drupal_goto("");
  }
  else {
    $uid = db_query("select uid from {comment} where cid = :cid", array(':cid' => $iCid))->fetchField();
    if ($user->uid != $uid) {
      drupal_set_message("You are not authorized to delete that comment", 'error');
      drupal_goto("");
    }
  }
  comment_delete($iCid);
  drupal_set_message(t('Your update has been deleted.'));
  watchdog('content', 'Deleted comment @cid and its replies.', array('@cid' => $iCid));
// Clear the cache so an anonymous user sees that his comment was deleted.
  cache_clear_all();
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('delete-comment');
  }
}

/**
 * lazy registration redirects - add
 * @param type $form
 * @param type $args
 */
function prayvine_signin_register($form, $args) {
  $iNid = 0;
//drupal_set_message("<pre>" . print_r($args, true) . "</pre>");
  if (isset($args['build_info']['args'][0]))
    $iNid = $args['build_info']['args'][0];
  drupal_goto("lr", array("query" => array("destination" => "node/" . $iNid)));
}


/**
 * password/confirm
 * @param type $element
 */
function register_alter_password_confirm($element) {
  //Call original process handler
  $element = user_form_process_password_confirm($element);

  //add placeholder text
  $element['pass1']['#title_display'] = 'invisible';
  $element['pass1']['#title'] = '';
  $element['pass1']['#attributes']['placeholder'] = t('Enter new password');
  $element['pass2']['#title_display'] = 'invisible';
  $element['pass2']['#title'] = '';
  $element['pass2']['#attributes']['placeholder'] = t('Confirm new password');

  return $element;
}

/**
 * hook_form_alter - make some tweaks and chages on differents forms
 * @global type $user
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function prayvine_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['field_settings'])) {
    $form['field_settings']['#access'] = 0;
  }

  if ($form_id == 'views_form_subscribers_default') {

    $form['views_bulk_operations'][0]['#access'] = false;
  }
  switch ($form_id) {
    case "prayer_node_form":

      $path = drupal_get_path('module', 'prayvine');
      drupal_add_css($path . '/prayvine.css');

      $form['title']['#title'] = t('Opening');
      $form['field_prayer_text']['#after_build'][] = 'prayvine_node_form_after_build';

      if (!isset($form['field_topic_id']['und'][0]['value']['#default_value']) || empty($form['field_topic_id']['und'][0]['value']['#default_value'])
      ) {
        global $user;
        if (isset($_GET['topic'])) {
          $iTopicId = $_GET['topic'];
        }
//set topic id when ajax in form is used
        if (stripos($_GET['q'], 'file/ajax/field_add_photo') !== FALSE) {
          $iTopicId = $_SESSION['topic_id'];
        }
        if (empty($iTopicId) || !is_numeric($iTopicId) || ($iTopicId <= 0)
        ) {

//do not treat ajax call - redirect will break file upload
          if (stripos($_GET['q'], 'file/ajax/field_add_photo') === FALSE) {
            drupal_set_message("Please use the user interface to add a prayer");
            drupal_goto("");
          }
        }

        drupal_set_title("Write a prayer about " . prayvine_get_title($iTopicId));
        $form['actions']['submit']['#value'] = "Post prayer";
        $form['field_topic_id']['und'][0]['value']['#default_value'] = $iTopicId;
        $form['title']['#default_value'] = "Dear God,";

//code for modifying radio button starts here
        $TopicData = node_load($iTopicId);
        $form['field_prayer_permission_type']['und']['#default_value'] = 0;
        if (empty($TopicData->field_ministry['und'][0]['value'])) {
//void
        }
        else {
          $MissionayName = '';
          if (!empty($TopicData->field_prayer_recipient['und'][0]['value'])) {
            $MissionayName = $TopicData->field_prayer_recipient['und'][0]['value'];
          }

//0|This prayer community
//1|Only me
//2|Specific people...

          $options = array(
            0 => t($MissionayName . ' and prayer partners'),
            1 => t($MissionayName . ' only')
          );

          $form['field_prayer_permission_type']['und']['#options'] = $options;
          //$form['field_prayer_permission_type']['und']['#default_value'] = 0;
        }

//code for modifying radio button ends here
      }
      else {

      }
      $form['field_topic_id']['#access'] = FALSE;
      $form['actions']['submit']['#submit'][] = "prayvine_message_override";

      if (stripos($_GET['q'], 'node/add/prayer') !== FALSE) {//remove fields that is not required when prayer community is created
        if ($user->uid == 0) {
          drupal_goto("");
        }
        $form['field_prayer_permission_type']['#access'] = FALSE;
        $form['field_prayer_select_people']['#access'] = FALSE;
        $form['field_prayer_id']['#access'] = FALSE;
        $form['field_comment_id']['#access'] = FALSE;
        $form['field_add_photo']['#access'] = FALSE;
      }

      break;
  }
  if ($form_id == 'prayer_request_node_form') {
    $form['field_prayer_text']['#after_build'][] = 'prayvine_node_form_after_build';

    if (!isset($form['field_topic_id']['und'][0]['value']['#default_value']) || empty($form['field_topic_id']['und'][0]['value']['#default_value'])
    ) {
      global $user;
      if (isset($_GET['topic'])) {
        $iTopicId = $_GET['topic'];
      }
//set topic id when ajax in form is used
      if (stripos($_GET['q'], 'file/ajax/field_add_photo') !== FALSE) {
        $iTopicId = $_SESSION['topic_id'];
      }
      if (empty($iTopicId) || !is_numeric($iTopicId) || ($iTopicId <= 0)
      ) {
//do not use if ajax is used
        if (stripos($_GET['q'], 'file/ajax/field_add_photo') === FALSE) {
          drupal_set_message("Please use the user interface to add a prayer");
          drupal_goto("");
        }
      }

      drupal_set_title("Write a prayer request about " . prayvine_get_title($iTopicId));
      $form['actions']['submit']['#value'] = "Send prayer request";
      $form['field_topic_id']['und'][0]['value']['#default_value'] = 1;
      $form['field_topic_id']['und'][0]['value']['#default_value'] = $iTopicId;
      $form['title']['#default_value'] = "Dear God,";
    }
    else {

    }
    $form['field_topic_id']['#access'] = FALSE;
    $form['actions']['submit']['#submit'][] = "prayvine_message_override";
    $form['title']['#access'] = false;
  }
  if ($form_id == 'node_delete_confirm') {//delete prayer confrimation form
    $form['#submit'][] = "prayvine_message_override";

    if ($opening = $form['#node']->type == 'prayer') {
      $title = t("Are you sure you want to delete this prayer?");
      drupal_set_title($title);
      $prayer_text = $form['#node']->field_prayer_text['und'][0]['value'];
      $opening = $form['#node']->title;
      $closing = $form['#node']->field_closing['und'][0]['value'];
      $markup = '<br /><br /><p>' . $opening . '<br />' . $prayer_text . '<br />' . $closing . '</p>';
      $form['description']['#markup'] = $form['description']['#markup'] . $markup;
    }
    if ($form['#node']->type == 'prayer_request') {

      $title = t("Are you sure you want to delete this prayer request?");
      drupal_set_title($title);
    }
  }

  if ($form_id == 'user_register_form') {



    $form['field_first_name']['#weight'] = -21;
    $form['field_last_name']['#weight'] = -20;
    $form['account']['mail']['#description'] = '';
    $form['account']['pass']['#description'] = '';
    $form['#after_build'][] = 'prayvine_register_form_after_build';
    $form['#submit'][] = "prayvine_message_override";
    $form['field_tos']['#access'] = false;

    $form['field_first_name']['und'][0]['value']['#title_display'] = 'invisible';
    $form['field_first_name']['und'][0]['value']['#title'] = '';
    $form['field_first_name']['und'][0]['value']['#attributes']['placeholder'] = t('First Name');
    $form['field_last_name']['und'][0]['value']['#title_display'] = 'invisible';
    $form['field_last_name']['und'][0]['value']['#title'] = '';
    $form['field_last_name']['und'][0]['value']['#attributes']['placeholder'] = t('Last Name');
    $form['account']['mail']['#title_display'] = 'invisible';
    $form['account']['mail']['#title'] = '';
    $form['account']['mail']['#attributes']['placeholder'] = t('E-mail');

    // register process handler to change password fields in function register_alter_password_confirm above
    $form['account']['pass']['#process'] = array('form_process_password_confirm', 'register_alter_password_confirm');

  }

  if($form_id == 'user_login') {
    $form['name']['#title_display'] = 'invisible';
    $form['name']['#title'] = '';
    $form['name']['#attributes']['placeholder'] = t('E-mail');

    $form['pass']['#title_display'] = 'invisible';
    $form['pass']['#title'] = '';
    $form['pass']['#attributes']['placeholder'] = t('Password');
  }

  if ($form_id == 'user_pass') {

    $form['name']['#description'] = t('A password reset message will be sent to your email address. If you are unsure what your login email is, try entering an email address you could have used when registering. You can try as many of your email addresses as you like.');
  }

  if ($form_id == 'user_login') {
    $form['#submit'][] = "prayvine_message_override";
    $form['name']['#description'] = '';
    $form['pass']['#description'] = '';
  }
  if ($form_id == 'comment_node_topic_form') {//comment update post override messages
   // $form['field_prayer_permission_type']['und']['#default_value'] = 0;

    $path = drupal_get_path('module', 'prayvine');
    drupal_add_css($path . '/prayvine-view.css');
    $form['#submit'][] = "prayvine_message_override";
  }

// Edit account (email, password, timezone, email preferences)
  if ($form_id == 'user_profile_form') {
    $form['account']['mail']['#prefix'] = '<h2>Email address</h2>';
    $form['field_first_name']['#prefix'] = '<h1><strong>' . t("Account settings:") . '</strong> ' . t('Edit your account settings below. Click "Save" when finished. ') . '</h1>';
    $form['account']['mail']['#weight'] = -50;
    $form['account']['mail']['#title'] = t('Email address (required, used to login to Prayvine):') . ' ';
    $form['account']['mail']['#size'] = 35;
    $form['account']['current_pass']['#prefix'] = '<h2>' . t('Change password (optional)') . '</h2>';
    $form['field_receive_topic_updates']['#prefix'] = '<h2>' . t('Email Preferences') . '</h2>';
    $form['contact']['#weight'] = 50;
  }

// Edit profile form (name, user photo, churches...)
  if ($form_id == 'edit_profile_user_profile_form') {
// $save_button_begin = '<input id="edit-submit" name="op" value="Save" class="form-submit" type="submit">';
// generate save buttons
// for ($i = 1;$i < 8; $i++) {
// $save_button[$i] = str_replace('edit-submit', 'edit-submit_'.$i, $save_button_begin);
// }

    $form['field_first_name']['#prefix'] = '<h1><strong>' . t("Profile settings:") . '</strong> ' . t('Complete your profile to help your prayer partners know you better. Click "Save" when finished. ') . '</h1>';
    $form['field_first_name']['und']['0']['value']['#size'] = 30;
    $form['field_last_name']['und']['0']['value']['#size'] = 30;
    $form['picture']['#title'] = t('Current Photo');
    $form['picture']['picture_upload']['#title'] = t('Choose file to upload new profile photo:');
    $form['picture']['picture_upload']['#size'] = 20;
    $form['field_current_church']['#prefix'] = '<h2>' . t('Churches Attended') . '</h2>';
    $form['field_current_church']['und']['add_more']['#value'] = t('add another current church') . htmlspecialchars('?');
    $form['field_previous_church']['und']['add_more']['#value'] = t('add another previous church') . htmlspecialchars('?');

    $form['field_favorite_bible_verses']['und']['add_more']['#value'] = t('add another favorite Bible verse') . htmlspecialchars('?');
// $form['field_favorite_bible_verses']['#prefix'] = $save_button[3];
    $form['field_favorite_hymns_and_worship']['und']['add_more']['#value'] = t('add another favorite hymn or worship song') . htmlspecialchars('?');
// $form['field_favorite_hymns_and_worship']['#prefix'] = $save_button[4];
    $form['field_ministries_i_care_about']['und']['add_more']['#value'] = t('add another ministry') . htmlspecialchars('?');
// $form['field_ministries_i_care_about']['#prefix'] = $save_button[5];
    $form['field_books_i_like']['und']['add_more']['#value'] = t('add another reading suggestion') . htmlspecialchars('?');
// $form['field_books_i_like']['#suffix'] = $save_button_all;
  }

  if ($form_id == 'views_form_subscribers_default') {
    $form['output']['#weight'] = -99;
  }
  if ($form_id == 'views_form_prayvine_invites_default') {
    $form['output']['#weight'] = -99;
  }
  if ($form_id == 'views_exposed_form') {
    if ($form['#id'] == 'views-exposed-form-subscribers-default' || $form['#id'] == 'views-exposed-form-prayvine-invites-default') {
      $form['submit']['#value'] = t('Search');
    }
  }
  if ($form_id == 'prayer_node_form') {//create list of subscribers;change node form  for paryers
    global $user;
    $topic_id = $form['field_topic_id']['und'][0]['value']['#default_value'];
    $alSubscriberIds = prayvine_get_subscriber_ids($topic_id);

    $prayer_author = $form['uid']['#value'];
    foreach ($alSubscriberIds as $uid) {
      $name = prayvine_get_name($uid);
      $options[$uid] = $name;
    }
    unset($options[$prayer_author]); //remove author from list
    $prayer_id = $form['nid']['#value'];

    $default_value = prayvine_get_prayer_permissions($prayer_id);
    if (!empty($options)) {
      $form['field_prayer_select_people']['und']['#options'] = $options;
      $form['field_prayer_select_people']['und']['#default_value'] = $default_value;
    }
  }
//handle topic form
  if ($form_id == 'topic_node_form') {
    $form['field_prayer_recipient']['#prefix'] = t('In email notification, Prayvine often uses sentences like "Please pray for Joseph and Mary".'
        . ' For your minitsry, what would you like Prayvine to use in place of <strong>Joseph and Mary</strong>?');

    $form['vanity_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('<h2>Custom Invitation Url(optional)</h2>' .
          'You can create a short URL for easier sharing. This is not as secure as individually inviting ministry partners, but can be useful in some circumstances. '),
      '#weight' => 50,
      '#collapsible' => false,
      '#collapsed' => false,
    );
    global $base_url;
    $form['field_vanityurl']['#prefix'] = t($base_url . '/prayfor/');
    $form['field_vanityurl']['#size'] = 10;
    $form['field_vanityurl']['und'][0]['value']['#title'] = '';
    $form['vanity_fieldset']['field_vanityurl'] = $form['field_vanityurl'];
    unset($form['field_vanityurl']);

    /*
     * Ministry reminder fields
     */
    $form['ministry_reminder_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('<h2>Ministry Communication Goal</h2>' .
          'Consistent communication with your ministry partners is vital to keeping your supporters engaged and praying for ' .
          'your ministry. Based on your goals, Prayvine sends reminders to help you stay connected. '),
      '#weight' => 50,
      '#collapsible' => false,
      '#collapsed' => false,
    );

    $form['field_email_reminder']['#prefix'] = t('How often do you want to communicate with your ministry partners? Prayvine will send you reminder this number of days'
        . ' since your last communication');
    $form['field_email_reminder']['#size'] = 10;
    $form['field_email_reminder']['und'][0]['value']['#title'] = '<strong>Days</strong>';
    $form['field_email_reminder']['und'][0]['value']['#title_display'] = 'after';
    if (empty($form['field_email_reminder']['und'][0]['value']['#default_value'])) {
      $form['field_email_reminder']['und'][0]['value']['#default_value'] = 30;
    }

    $form['ministry_reminder_fieldset']['field_email_reminder'] = $form['field_email_reminder'];
    unset($form['field_email_reminder']);

    $form['field_email_reminder_frequency']['#prefix'] = t('Once you\'ve missed your goal, how often do you want a reminder?');
    $form['field_email_reminder_frequency']['#size'] = 10;
    $form['field_email_reminder_frequency']['und'][0]['value']['#title'] = '<strong>Days</strong>';
    $form['field_email_reminder_frequency']['und'][0]['value']['#title_display'] = 'after';
    if (empty($form['field_email_reminder_frequency']['und'][0]['value']['#default_value'])) {
      $form['field_email_reminder_frequency']['und'][0]['value']['#default_value'] = 2;
    }

    $form['ministry_reminder_fieldset']['field_email_reminder_frequency'] = $form['field_email_reminder_frequency'];
    unset($form['field_email_reminder_frequency']);



//add default value
    if (empty($form['field_prayer_recipient']['und'][0]['value']['#default_value'])) {
      $form['field_prayer_recipient']['und'][0]['value']['#default_value'] = $form['#node']->title;
    }

//unique field
    $form['#validate'][] = 'prayvine_vanityurl_validate';
//unique field

    //Disabling additional fields
    $form['field_purpose']['#access'] = FALSE;
    $form['field_purpose_other']['#access'] = FALSE;
  }

//handle webform
  $reminderPopupNode = prayvine_get_webform_nid_by_title('Set Follow-up Reminder');
  ;

  if ($form_id == 'webform_client_form_' . $reminderPopupNode->nid) {

//Cancel Button
    $link = explode('?', $_SERVER['REQUEST_URI']);
    parse_str($link[1], $get_args);
    $topic = $get_args['topic_id'];
    $prayer_request_id = $get_args['prayer_request_id'];

    $destination = 'node/' . $topic;
    $node = node_load($prayer_request_id);
    $cancelurl = 'loadformcancel/' . $topic . '/' . $prayer_request_id;

//load values from db
    if (!empty($node->field_email_reminder['und'])) {
      $form['submitted']['first_reminder']['#default_value'] = $node->field_email_reminder_prayer['und'][0]['value'];
    }
    if (!empty($node->field_email_reminder_frequency['und'])) {
      $form['submitted']['second_reminder']['#default_value'] = $node->field_email_reminder_frequency_p['und'][0]['value'];
    }

    $form['actions']['cancel'] = array(
      '#markup' => l(t('No thanks, I don\'t want a reminder'), $cancelurl),
      '#weight' => 20,
      '#attributes' => array('class' => array('followup-cancel'))
    );

//Cancel Button
    $form['actions']['submit']['#submit'][] = 'prayvine_webform_submit';
//return $form_state;
  }
}

function prayvine_webform_submit(&$form, &$form_state) {

  $link = explode('?', $form_state['complete form']['#action']);
  parse_str($link[1], $get_args);
  $topic = $get_args['topic_id'];
  $prayer_request_id = $get_args['prayer_request_id'];

  $destination = 'node/' . $topic;
//Loading node
  $node = node_load($prayer_request_id);
  $node->field_email_reminder_prayer['und'][0]['value'] = $form_state['values']['submitted']['first_reminder'];
  $node->field_email_reminder_frequency_p['und'][0]['value'] = $form_state['values']['submitted']['second_reminder'];
//Saving updated node value.
  node_save($node);

  ctools_include('ajax');
  ctools_add_js('ajax-responder');
// Path to redirect to
  $path = $destination; //$form_state['values']['red_path'];
  $commands[] = ctools_ajax_command_redirect($path);
  print ajax_render($commands);
  drupal_exit();
}

function prayvine_vanityurl_validate(&$form, &$form_state) {
// echo "<pre>";print_r($form_state['node']->nid);die;
  $alias = strtolower($form_state['values']['field_vanityurl']['und'][0]['value']);
  $check_unique_query = db_query("select count(*) from {field_data_field_vanityurl} where LOWER(field_vanityurl_value) = :field_vanityurl_value and entity_id != :entity_id ", array(':field_vanityurl_value' => $alias, ':entity_id' => $form_state['node']->nid))->fetchField();
  if ($check_unique_query) {
    form_set_error('field_vanityurl', 'This vanity url is already in use');
  }
}

/**
 * after build function used to remove some text from timezone field
 * @param type $form
 * @return string
 */
function prayvine_register_form_after_build($form) {

  $form['timezone']['#description'] = '';
  $form['timezone']['timezone']['#description'] = '';
  return $form;
}

/**
 * hide text format for prayer text field
 * @param array $form
 * @return boolean
 */
function prayvine_node_form_after_build($form) {

  $form['und'][0]['format']['#access'] = FALSE;
  return $form;
}

/**
 * implement hook_user_profile_form_alter - control what field will be visible to account or profile
 * @param type $form
 * @param type $form_state
 */
function prayvine_min_form_user_profile_form_alter(&$form, &$form_state) {
  $form['account']['name']['#access'] = false;
  $form['overlay_control']['#access'] = FALSE;
  $form['picture']['#access'] = FALSE;
  $form['field_tos']['#access'] = FALSE;
  $form['field_receive_topic_updates']['#access'] = TRUE;
  $form['field_receive_site_updates']['#access'] = TRUE;
  $form['field_first_name']['#access'] = TRUE;
  $form['field_last_name']['#access'] = TRUE;
  $form['field_first_name']['#weight'] = -100;
  $form['field_last_name']['#weight'] = -100;
}

/**
 * implement hook_user_profile_form_alter - control what field will be visible to account or profile
 * @param type $form
 * @param type $form_state
 */
function prayvine_min_form_edit_profile_user_profile_form_alter(&$form, &$form_state) {
  $form['picture']['#access'] = TRUE;
  $form['field_tos']['#access'] = FALSE;
  $form['field_receive_topic_updates']['#access'] = TRUE;
  $form['field_receive_site_updates']['#access'] = TRUE;
  $form['field_first_name']['#access'] = FALSE;
  $form['field_last_name']['#access'] = FALSE;
  $form['field_current_church']['#weight'] = 3;
  $form['field_previous_church']['#weight'] = 4;
  $form['field_favorite_bible_verses']['#weight'] = 6;
  $form['field_favorite_hymns_and_worship']['#weight'] = 7;
  $form['save_photo'] = array(
    '#type' => 'submit',
    '#value' => t('Save Profile Photo'),
    '#submit' => array('user_profile_form_submit'),
    '#weight' => 2,
  );
  $form['save_churches'] = array(
    '#type' => 'submit',
    '#value' => t('Save Churches'),
    '#submit' => array('user_profile_form_submit'),
    '#weight' => 5,
  );
}

/**
 * used to notify abour new prayer
 * @param type $node - prayer content type
 */
function prayvine_notify_prayer_insert($node, $user = null) {
  $iTopicId = $_GET['topic'];
  $iTopicId = $node->field_topic_id['und'][0]['value'];
  $strUrl = prayvine_get_prayer_page_url($iTopicId);

  //modification for sending mails to misntry communicator only if second option is selected
  $field_prayer_permission_type = $node->field_prayer_permission_type['und'][0]['value'];
  $topic = node_load($iTopicId);
  $settings_text = $topic->field_settings['und'][0]['value'];
  $settings = unserialize($settings_text);
  if (empty($topic->field_ministry['und'][0]['value'])) {
          $ministry = 0;
        }
  else {
    $ministry = $topic->field_ministry['und'][0]['value'];
  }
  $BypassPerm = 0;
  if($field_prayer_permission_type == 1 && !empty($ministry)){ // only me is selected && minitry communicator is not blank and type of community is ministry
    if(!empty($settings['ministry_communicator'])){
      $alSubscriberIds = $settings['ministry_communicator'];
    }
    //$alSubscriberIds[0] = 1;
    $strTopicAuthorId = prayvine_get_authorid($iTopicId);
    $alSubscriberIds[$strTopicAuthorId] = $strTopicAuthorId; //node author should also get mail
    $BypassPerm = 1;
  }else{
    $alSubscriberIds = prayvine_get_subscriber_ids($iTopicId, true);
  }

  //modification for sending mails to misntry communicator only if second option is selected
  if(!empty($alSubscriberIds)){
    $alSubscribers = user_load_multiple($alSubscriberIds);
  }

  $strAuthorFirstName = prayvine_get_name((int) $node->uid, 1);
  $strAuthorName = prayvine_get_name((int) $node->uid);
  $strTopic = prayvine_get_title($iTopicId);
  $strTopicAuthorId = prayvine_get_authorid($iTopicId);
  $strTopicAuthorName = prayvine_get_name($strTopicAuthorId);
  _prayvine_do_add_subscription($iTopicId, (int) $node->uid);

  //prayvine_add_subscription($iTopicId, $strToken = "");
  foreach ($alSubscribers as $subscriber) {
    if ($subscriber->uid == $node->uid) {

    }
    else {
      global $base_url;
      global $base_path;

      $footer = prayvine_get_email_footer($subscriber->mail, $subscriber, $strTopic);
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('prayer-posted-email');
      }
      //pray silently
      $key = md5('ve1b2!!' . $node->nid . $subscriber->uid . 've2b1!!');
      $access_link = $base_url . $base_path . 'pray_silently/' . $node->nid . '/' . $subscriber->uid . '/0?key=' . $key;

      //sayamen
      $key_sayamen = md5($node->nid . 'pt1!3434$6567' . $subscriber->uid);
      $say_amen_link = $base_url . $base_path . 'say_amen/' . $node->nid . '/1/0?subscriber=' . $subscriber->uid . '&key=' . $key_sayamen;

      if (!empty($node->field_comment_id['und'][0]['target_id'])) {//access to pray silently
        $comment_id = $node->field_comment_id['und'][0]['target_id'];
        $key = md5('ve1b2!!' . $comment_id . $subscriber->uid . 've2b1!!');
        $access_link = $base_url . $base_path . 'pray_silently/' . $comment_id . '/' . $subscriber->uid . '/1?key=' . $key; //comment=1
      }
      if (!empty($node->field_prayer_id['und'][0]['target_id'])) {//access to pray silently
        $reqeust_id = $node->field_prayer_id['und'][0]['target_id'];
        $request = node_load($reqeust_id);
        $key = md5('ve1b2!!' . $reqeust_id . $subscriber->uid . 've2b1!!');
        $access_link = $base_url . $base_path . 'pray_silently/' . $reqeust_id . '/' . $subscriber->uid . '/0?key' . $key;
      }
      else {
        $request = $node;
      }

      $prayer = $node;
      //check if user has permission to recieve emails
      if (prayvine_check_prayer_permission($prayer, $subscriber->uid,$BypassPerm)) {
        $topic = node_load($iTopicId);
        if (empty($topic->field_ministry['und'][0]['value'])) {
          $ministry = 0;
        }
        else {
          $ministry = $topic->field_ministry['und'][0]['value'];
        }
        rules_invoke_event('prayvine_send_mail_prayer_insert', $subscriber, $strAuthorName, $strAuthorFirstName, $strTopic, $strUrl, $footer, $prayer, $say_amen_link, $access_link, $request, $ministry, $topic);
      }
    }
  }
  //mail to invited users

  //modification for sending mails to misntry communicator only if second option is selected
  if($field_prayer_permission_type == 1 && !empty($ministry)){
    //void

    if(!empty($settings['ministry_communicator'])){

      //PRAY 89-trigger mail to unreistred users only when min comm posts.
      if(in_array((int) $user->uid, $settings['ministry_communicator'])){

        $unregistered_subscribers = prayvine_get_invited_mails($iTopicId);
        $is_owner = prayvine_topic_owner($topic, (int) $user->uid);

        foreach ($unregistered_subscribers as $inviteId => $mail) {
          $is_public = $node;

          if ($node->field_prayer_permission_type['und'][0]['value'] == 0) {//trigger event only if author of topic posted prayer
            $footer = prayvine_get_email_footer($mail, null, $strTopic);
            if (module_exists('prayvinestat')) {
              prayvinestat_stat_event('prayer-posted-email');
            }

            $prayer = $node;
            $unsubscribe_link = prayvine_unsuscribe_link($inviteId);

            $query_invite_token = db_select('prayvine_invites', 'i')->fields('i', array('invite_code'));
            $query_invite_token->condition('i.inviteId', $inviteId);
            $invite_token_result = $query_invite_token->execute()->fetchCol();
            $invite_token = $invite_token_result[0];

            rules_invoke_event('prayvine_send_mail_prayer_insert_un', $mail, $strAuthorName, $strAuthorFirstName, $strTopic, $strUrl, $footer, $prayer, $unsubscribe_link, $ministry, $topic, $is_owner, $invite_token);
          }
        }

      }
    }

  }else{

      $unregistered_subscribers = prayvine_get_invited_mails($iTopicId);
      $is_owner = prayvine_topic_owner($topic, (int) $user->uid);

      foreach ($unregistered_subscribers as $inviteId => $mail) {
        $is_public = $node;

        if ($node->field_prayer_permission_type['und'][0]['value'] == 0) {//trigger event only if author of topic posted prayer
          $footer = prayvine_get_email_footer($mail, null, $strTopic);
          if (module_exists('prayvinestat')) {
            prayvinestat_stat_event('prayer-posted-email');
          }

          $prayer = $node;
          $unsubscribe_link = prayvine_unsuscribe_link($inviteId);

          $query_invite_token = db_select('prayvine_invites', 'i')->fields('i', array('invite_code'));
          $query_invite_token->condition('i.inviteId', $inviteId);
          $invite_token_result = $query_invite_token->execute()->fetchCol();
          $invite_token = $invite_token_result[0];

          rules_invoke_event('prayvine_send_mail_prayer_insert_un', $mail, $strAuthorName, $strAuthorFirstName, $strTopic, $strUrl, $footer, $prayer, $unsubscribe_link, $ministry, $topic, $is_owner, $invite_token);
        }
      }
  }
  //modification for sending mails to misntry communicator only if second option is selected
}

/**
 * used to notify abour new prayer
 * @param type $node - prayer content type
 */
function prayvine_notify_request_insert($node, $user = null) {
  $iTopicId = $_GET['topic'];
  $iTopicId = $node->field_topic_id['und'][0]['value'];
  $strUrl = prayvine_get_prayer_page_url($iTopicId);
  $alSubscriberIds = prayvine_get_subscriber_ids($iTopicId, true);
  $alSubscribers = user_load_multiple($alSubscriberIds);
  $strAuthorFirstName = prayvine_get_name((int) $node->uid, 1);
  $strAuthorName = prayvine_get_name((int) $node->uid);
  $strTopic = prayvine_get_title($iTopicId);
  $strTopicAuthorId = prayvine_get_authorid($iTopicId);
  $strTopicAuthorName = prayvine_get_name($strTopicAuthorId);
  _prayvine_do_add_subscription($iTopicId, (int) $node->uid);
  $topic = node_load($iTopicId);



  //prayvine_add_subscription($iTopicId, $strToken = "");
  foreach ($alSubscribers as $subscriber) {
    if ($subscriber->uid == (int) $node->uid) {

    }
    else {
      global $base_url;
      global $base_path;
      if (!empty($node->field_mark_as_urgent['und'][0]['value'])) {
        $mark_as_urgent = 1;
      }
      else {
        $mark_as_urgent = 0;
      }

      $key = md5('ve1b2!!' . $node->nid . $subscriber->uid . 've2b1!!');
      $access_link = $base_url . $base_path . 'pray_silently/' . $node->nid . '/' . $subscriber->uid . '/0?key=' . $key;
      $footer = prayvine_get_email_footer($subscriber->mail, $subscriber, $strTopic);
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('request-posted-email');
      }

      $request = $node;
      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }
      rules_invoke_event('prayvine_send_mail_request_insert', $subscriber, $strAuthorName, $strAuthorFirstName, $strTopic, $strUrl, $footer, $request, $access_link, $mark_as_urgent, $ministry, $topic);
    }
  }
  //mail to invited users

  $unregistered_subscribers = prayvine_get_invited_mails($iTopicId);
  $is_owner = prayvine_topic_owner($topic, (int) $user->uid);
  foreach ($unregistered_subscribers as $inviteId => $mail) {


    if (true) {//trigger event only if author of topic posted request
      $footer = prayvine_get_email_footer($mail, null, $strTopic);
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('request-posted-email');
      }

      $request = $node;
      $unsubscribe_link = prayvine_unsuscribe_link($inviteId);
      if (!empty($node->field_mark_as_urgent['und'][0]['value'])) {
        $mark_as_urgent = 1;
      }
      else {
        $mark_as_urgent = 0;
      }

      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }

      $query_invite_token = db_select('prayvine_invites', 'i')->fields('i', array('invite_code'));
      $query_invite_token->condition('i.inviteId', $inviteId);
      $invite_token_result = $query_invite_token->execute()->fetchCol();
      $invite_token = $invite_token_result[0];


      rules_invoke_event('prayvine_send_mail_request_insert_un', $mail, $strAuthorName, $strAuthorFirstName, $strTopic, $strUrl, $footer, $request, $mark_as_urgent, $unsubscribe_link, $ministry, $topic, $is_owner, $invite_token);
    }
  }
}

/**
 * Implements hook_node_presave();
 */
function prayvine_node_presave($node) {
  //exlode this on live site;
  if ($node->type == 'test_nodes') {
    $body = $node->body['und'][0]['value'];
    $emails = prayvine_extract_emails($body);
  }
  if ($node->type == 'topic') {
    $node->status = 1;
  }

  if ($node->type == 'prayer_request') {
    $list_destination = array(
      'loadformcancel',
      'node',
    );

    $get_destination = drupal_get_destination();
    $exp_dest = explode('/', $get_destination['destination']);

    if (in_array($exp_dest[0], $list_destination)) {
      $cache_id = 'requests_'. $exp_dest[1];
      $request_cache = cache_get($cache_id);

      if (!empty($request_cache->data)) {
        cache_clear_all($cache_id, 'cache', TRUE);
      }
    }
  }
}

/**
 * implement hook_node_insert -  trigger notification when new prayer is added
 * @global type $user
 * @param type $node
 */
function prayvine_node_insert($node) {

  if ($node->type == 'prayer') {
    global $user;

    if (module_exists('prayvinestat')) {
      prayvinestat_stat_event('create-prayer');
    }
    $cache_id = 'prayers_' . prayvine_get_topic_id($node->nid);
    cache_clear_all($cache_id, 'cache', FALSE);
    //clear prayers that belong to request
    if (!empty($node->field_prayer_id['und'][0]['target_id'])) {
      $cache_id = 'requests_prayers' . $node->field_prayer_id['und'][0]['target_id']; //clear cache of prayers that belongs request
      cache_clear_all($cache_id, 'cache', FALSE);
    }
    //clear prayers that belong to comment
    if (!empty($node->field_comment_id['und'][0]['target_id'])) {
      $cache_id = 'comments_prayers' . $node->field_comment_id['und'][0]['target_id']; //clear cache of prayers that belongs comment
      cache_clear_all($cache_id, 'cache', FALSE);
    }
    if (!empty($_SESSION['prayvine_tokens'][0])) {//set action that user use for get to site
      $_SESSION['action'] = 'add-prayer';
      $_SESSION['topic_id'] = prayvine_get_topic_id($node->nid);
    }
    if (isset($user->mail)) {
      if (!prayvine_gear_prayer_notify($node)) {
        prayvine_notify_prayer_insert($node, $user);
      }
    }
    else if (isset($_GET['token']) && !empty($_GET['token'])) {
      $iId = db_query("select inviteid from {prayvine_invites} where invite_code = :invite_code", array(':invite_code' => $_GET['token']))->fetchField();
      if (!is_null($iId) && ($iId > 0)) {
        db_query("insert into {prayvine_anonymous_posts} (inviteId, nid) values (:inviteId, :nid)", array(':inviteId' => $iId, ':nid' => $node->nid));
        if (module_exists('prayvinestat')) {
          prayvinestat_invitations('create-prayer', $iId);
        }
      }
    }
  }

  if ($node->type == 'prayer_request') {
    global $user;
    if (module_exists('prayvinestat')) {
      prayvinestat_stat_event('create-prayer_request');
    }
    //clear cache of topic request
    $cache_id = 'requests_' . prayvine_get_topic_id($node->nid);
    cache_clear_all($cache_id, 'cache', FALSE);

    if (!empty($_SESSION['prayvine_tokens'][0])) {//set action that user use for get to site
      $_SESSION['action'] = 'add-prayer_request';
      $_SESSION['topic_id'] = prayvine_get_topic_id($node->nid);
    }

    if (isset($user->mail)) {
      if (!prayvine_gear_request_notify($node)) {
        prayvine_notify_request_insert($node, $user);
      }
    }
    else if (isset($_GET['token']) && !empty($_GET['token'])) {
      $iId = db_query("select inviteid from {prayvine_invites} where invite_code = :invite_code", array(':invite_code' => $_GET['token']))->fetchField();

      if (!is_null($iId) && ($iId > 0)) {
        db_query("insert into {prayvine_anonymous_posts} (inviteId, nid) values (:inviteId, :nid)", array(':inviteId' => $iId, ':nid' => $node->nid));
        if (module_exists('prayvinestat')) {
          prayvinestat_invitations('create-prayer_request', $iId);
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete();
 */
function prayvine_node_delete($node) {
  if ($node->type == 'prayer') {
    if (module_exists('prayvinestat')) {
      prayvinestat_stat_event('delete-prayer');
    }
    $cache_id = 'prayers_' . prayvine_get_topic_id($node->nid);
    cache_clear_all($cache_id, 'cache', FALSE);

    //clear prayers that belong to request
    if (!empty($node->field_prayer_id['und'][0]['target_id'])) {
      $cache_id = 'requests_prayers' . $node->field_prayer_id['und'][0]['target_id']; //clear cache of prayers that belongs request
      cache_clear_all($cache_id, 'cache', FALSE);
    }

    //clear prayers that belong to comment
    if (!empty($node->field_comment_id['und'][0]['target_id'])) {
      $cache_id = 'comments_prayers' . $node->field_comment_id['und'][0]['target_id']; //clear cache of prayers that belongs comment
      cache_clear_all($cache_id, 'cache', FALSE);
    }
  }
  if ($node->type == 'prayer_request') {
    $cache_id = 'prayers_' . prayvine_get_topic_id($node->nid);
    cache_clear_all($cache_id, 'cache', FALSE);
  }
}

/**
 * clear cache node hook update
 * @param type $node
 */
function prayvine_node_update($node) {
  if ($node->type == 'prayer') {
    $cache_id = 'prayers_' . prayvine_get_topic_id($node->nid);
    cache_clear_all($cache_id, 'cache', FALSE);
    //clear prayers that belong to request
    if (!empty($node->field_prayer_id['und'][0]['target_id'])) {
      $cache_id = 'requests_prayers' . $node->field_prayer_id['und'][0]['target_id']; //clear cache of prayers that belongs request
      cache_clear_all($cache_id, 'cache', FALSE);
    }
    //clear prayers that belong to comment
    if (!empty($node->field_comment_id['und'][0]['target_id'])) {
      $cache_id = 'comments_prayers' . $node->field_comment_id['und'][0]['target_id']; //clear cache of prayers that belongs comment
      cache_clear_all($cache_id, 'cache', FALSE);
    }
  }

  if ($node->type == 'prayer_request') {
    $cache_id = 'prayers_' . prayvine_get_topic_id($node->nid);
    cache_clear_all($cache_id, 'cache', FALSE);
  }
}

/**
 * hook comment update - clear cache
 * @param type $comment
 */
function prayvine_comment_update($comment) {
  $cache_id = 'comments_' . $comment->nid;
  cache_clear_all($cache_id, 'cache', FALSE);
}

/**
 * comment delete clear cache
 * @param type $comment
 */
function prayvine_comment_delete($comment) {
  $cache_id = 'comments_' . $comment->nid;
  cache_clear_all($cache_id, 'cache', FALSE);
}

/**
 * get invited mails to topic - users that are not registrated
 * @param type $topic -
 * @return type
 */
function prayvine_get_invited_mails($topic_id) {
  $query = db_select('prayvine_invites', 'i')->fields('i', array('nid', 'inviter_uid', 'claimed_uid', 'mail', 'inviteId'));
  $query->condition('i.nid', $topic_id);
  $result = $query->execute()->fetchAll();
  $invited_mails = array();
  foreach ($result as $record) {
    if (empty($record->claimed_uid)) {
      $invited_mails[$record->inviteId] = $record->mail;
    }
  }
  return $invited_mails;
}

/**
 * create unsubscribe link
 * @param type $inviteId - invite ID
 */
function prayvine_unsuscribe_link($inviteId) {
  global $base_url;
  global $base_path;
  $key = md5('!optout163##123' . $inviteId);
  $link = $base_url . $base_path . 'prayvine_unsubscribe/' . $inviteId . '/' . $key;
  return $link;
}

/**
 * insert comment function
 * @param type $comment
 */
function prayvine_notify_comment_insert($comment, $user = null) {
  //drupal_set_message("<pre>" . print_r($comment, true) . "</pre>");
  $alSubscriberIds = prayvine_get_subscriber_ids($comment->nid, true);
  $alSubscribers = user_load_multiple($alSubscriberIds);
  $strUrl = prayvine_get_prayer_page_url($comment->nid);
  $strAuthorFirstName = prayvine_get_name($comment->uid, 1);
  $strAuthorName = prayvine_get_name($comment->uid);
  $strTopic = prayvine_get_title($comment->nid);
  $strTopicAuthorId = prayvine_get_authorid($comment->nid);
  $strTopicAuthorName = prayvine_get_name($strTopicAuthorId);
  _prayvine_do_add_subscription($comment->nid, $comment->uid);
  $topic = node_load($comment->nid);


  global $base_url;
  global $base_path;
  foreach ($alSubscribers as $subscriber) {
    if ($subscriber->uid == $comment->uid) {

    }
    else {
      $key = md5('ve1b2!!' . $comment->cid . $subscriber->uid . 've2b1!!');
      $access_link = $base_url . $base_path . 'pray_silently/' . $comment->cid . '/' . $subscriber->uid . '/1?key=' . $key; //'&comment=1';
      $footer = prayvine_get_email_footer($subscriber->mail, $subscriber, $strTopic);
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('comment-posted-email');
      }

      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }

      //PRAY82- if on ministry page, the update should trigger:Update Posted: Branded Registered if on non-ministry page, the update should trigger:Update Posted: Unbranded
      //if(!empty($ministry)){
        rules_invoke_event('prayvine_send_mail_prayer_comment_insert', $subscriber, $strAuthorName, $strAuthorFirstName, $strTopicAuthorName, $strTopic, $strUrl, $comment, $footer, $access_link, $ministry, $topic);
     // }

    }
  }
  //mail to invited users
  $unregistered_subscribers = prayvine_get_invited_mails($comment->nid);
  $is_owner = prayvine_topic_owner($topic, $user->uid);
  foreach ($unregistered_subscribers as $inviteId => $mail) {

    if (true) {//triger event only if author of topic posted comment
      $footer = prayvine_get_email_footer($mail, null, $strTopic);
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('comment-posted-email');
      }
      $unsubscribe_link = prayvine_unsuscribe_link($inviteId);
      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }
      $query_invite_token = db_select('prayvine_invites', 'i')->fields('i', array('invite_code'));
      $query_invite_token->condition('i.inviteId', $inviteId);
      $invite_token_result = $query_invite_token->execute()->fetchCol();
      $invite_token = $invite_token_result[0];

      //PRAY82- if on ministry page, the update should trigger:Update Posted: Branded Unregistered
      if(!empty($ministry)){
           rules_invoke_event('prayvine_send_mail_prayer_comment_insert_un', $mail, $strAuthorName, $strAuthorFirstName, $strTopicAuthorName, $strTopic, $strUrl, $comment, $footer, $unsubscribe_link, $ministry, $topic, $is_owner, $invite_token);
      }

    }
  }
}

/**
 * implement hook_comment_insert
 * @param type $comment
 */
function prayvine_comment_insert($comment) {
  //drupal_set_message("comment = <pre>" . print_r($comment, true) . "</pre>");
  if ($comment->node_type == 'comment_node_topic') {
    if (module_exists('prayvinestat')) {
      prayvinestat_stat_event('create-comment');
    }
    $cache_id = 'comments_' . $comment->nid;
    cache_clear_all($cache_id, 'cache', FALSE);
    if ($comment->uid > 0) {
      global $user;
      comment_save($comment);
      if (!prayvine_gear_comment_notify($comment)) {
        prayvine_notify_comment_insert($comment, $user);
      }
    }
    else if (isset($_GET['token']) && !empty($_GET['token'])) {
      $iId = db_query("select inviteId from {prayvine_invites} where invite_code = :token", array(':token' => $_GET['token']))->fetchField();
      if (!is_null($iId) && ($iId > 0)) {
        db_query("insert into {prayvine_anonymous_posts} (inviteId, cid) values (:inviteId, :cid)", array(':inviteId' => $iId, ':cid' => $comment->cid));
        if (module_exists('prayvinestat')) {
          prayvinestat_invitations('create-comment', $iId);
        }
      }
      if (!empty($_SESSION['prayvine_tokens'][0])) {//set action that user use for get to site
        $_SESSION['action'] = 'add-comment';
        $_SESSION['topic_id'] = $iId;
      }
    }
  }
}

/**
 * get node author id
 * @param type $iNid
 * @return type
 */
function prayvine_get_authorid($iNid) {
  return db_query("select uid from {node} where nid = :nid", array(':nid' => $iNid))->fetchField();
}

/**
 * get title of node
 * @param type $iNid
 * @return type
 */
function prayvine_get_title($iNid) {
  return db_query("select title from {node} where nid = :nid", array(':nid' => $iNid))->fetchField();
}

/**
 * get topic id
 * @param type $iNid
 * @return type
 */
function prayvine_get_topic_id($iNid) {
  return db_query("select field_topic_id_value from {node} n, {field_data_field_topic_id} f where n.vid = f.revision_id and f.entity_type = 'node' and n.nid = :nid", array(':nid' => $iNid))->fetchField();
}

/**
 * get subscriber id
 * @param type $iNid
 * @param type $bKeepOnlyWantUpdates
 * @return type
 */
function prayvine_get_subscriber_ids($iNid, $bKeepOnlyWantUpdates = false) {
  $strQuery = "select uid from {prayvine_subscriptions} where nid = :nid and uid > 0";
  if ($bKeepOnlyWantUpdates)
    $strQuery = "select s.uid from {prayvine_subscriptions} s, {field_data_field_receive_topic_updates} u where s.nid = :nid and u.entity_type='user' and u.entity_id = s.uid and u.field_receive_topic_updates_value > 0 and s.uid > 0";
  $subscribersResultSet = db_query($strQuery, array(':nid' => $iNid));

  $alSubscriberIds = array();
  while (($row = $subscribersResultSet->fetchObject()) != NULL) {
    $alSubscriberIds[] = $row->uid;
  }
  $iAuthorId = prayvine_get_authorid($iNid);
  if (!in_array($iAuthorId, $alSubscriberIds))
    $alSubscriberIds[] = prayvine_get_authorid($iNid);
  return $alSubscriberIds;
}

/**
 * invite token
 * @param type $strToken
 * @return string
 */
function prayvine_get_mail_from_token($strToken) {
  $strMail = db_query("select mail from {prayvine_invites} where invite_code = :invite_code", array(':invite_code' => $strToken))->fetchField();
  if (empty($strMail))
    return "";
  else
    return $strMail;
}

/**
 * post comment form
 * @global type $user
 * @param type $form
 * @param type $args
 * @return string
 */
function prayvine_post_comment($form, $args) {
  $nid = 0;
  if (isset($args['build_info']['args'][0]))
    $nid = $args['build_info']['args'][0];
  if ($nid <= 0) {
    drupal_set_message("Please try again", 'error');
    drupal_goto("");
  }
  $strToken = "";
  global $user;
  if ($user->uid <= 0) {
    if (isset($_GET['token']))
      $strToken = $_GET['token'];
    if (empty($strToken)) {
      drupal_set_message("Please try again", 'error');
      drupal_goto("");
    }
  }

  $comment = new stdClass;
  $comment->nid = 213;
  $form_comment = drupal_get_form('comment_form', $comment);

  $form['comment'] = array
    ('#title' => 'Your update will be shared with this prayer community only.',
    '#type' => 'textarea',
  );
  $form['comment'] = $form_comment['comment_body'];
  $form['field_add_photo'] = $form_comment['comment_body'];
  $form['nid'] = array
    ('#type' => 'hidden',
    '#value' => $nid,
  );
  $form['token'] = array
    ('#type' => 'hidden',
    '#value' => $strToken,
  );
  $form['submit'] = array
    ('#type' => 'submit',
    '#value' => 'Post update',
  );
  return $form;
}

/**
 * post comment submit fuction
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function prayvine_post_comment_submit($form, $form_state) {
  $alValues = $form_state['values'];
  $iNid = $alValues['nid'];
  if (!is_numeric($iNid) || ($iNid < 1)) {
    drupal_set_message("Invalid prayer journal.", 'error');
    drupal_goto("");
  }
  $strToken = $alValues['token'];
  global $user;
  $iAuthorId = prayvine_get_authorid($iNid);

  $strMail = "";
  $strName = "";
  if ($user->uid <= 0) {
    if (empty($strToken)) {
      drupal_set_message("Insufficient permissions", 'error');
      drupal_goto("");
    }
    $strMail = prayvine_get_mail_from_token($strToken);
    $strName = $strMail;
  }
  else {
    $strMail = $user->mail;
    $strName = $user->name;
  }
  $comment = new stdClass();
  $comment->nid = $iNid; // nid of a node you want to attach a comment to
  $comment->cid = 0; // leave it as is
  $comment->pid = 0; // parent comment id, 0 if none
  $comment->uid = $user->uid; // user's id, who left the comment
  $comment->mail = $strMail; // user's email
  $comment->name = $strName; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
  $comment->created = time(); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
  $comment->is_anonymous = 0; // leave it as is
  $comment->homepage = ''; // you can add homepage URL here
  $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
  $comment->language = LANGUAGE_NONE; // The same as for a node
  $comment->subject = '';
  $comment->comment_body[$comment->language][0]['value'] = $alValues['comment'];
  $comment->comment_body[$comment->language][0]['format'] = 'filtered_html';
  comment_submit($comment); // saving a comment
  comment_save($comment);
  if ($user->uid <= 0)
    drupal_goto("lr", array('query' => array('nid' => $iNid)));
  else
    drupal_goto("node/" . $iNid);
}

/**
 * get add new prayer url
 * @param type $iNid
 * @param type $strToken
 * @return type
 */
function prayvine_get_add_prayer_url($iNid, $strToken) {
  return "/node/add/prayer/?topic=" . $iNid . "&destination=signin_register/"
      . $iNid . "&token=" . $strToken;
}

/**
 * get edit prayer url
 * @param type $bPrayer
 * @param type $iNid
 * @param type $iTopicId
 * @param type $strAction
 * @return type
 */
function prayvine_get_edit_prayer_url($bPrayer, $iNid, $iTopicId, $strAction = 'edit') {
  if ($bPrayer)
    return "/node/" . $iNid . "/" . $strAction
        . "?destination=node/" . $iTopicId;
  if ($strAction == 'edit')
    return "/comment/" . $iNid . "/" . $strAction
        . "?destination=node/" . $iTopicId;
  else
    return "/delete_update/" . $iNid . "?destination=node/" . $iTopicId;
}

/**
 * get prayer page url
 * @global type $base_url
 * @param type $iNid
 * @return type
 */
function prayvine_get_prayer_page_url($iNid) {
  global $base_url;
  return $base_url . "/node/" . $iNid;
}

/**
 * get link for lazy registration
 * @param type $user
 * @param type $iNid
 * @param type $strUrl
 * @return type
 */
function prayvine_get_link($user, $iNid, $strUrl) {
  if ($user->uid > 0)
    return $strUrl;
  else
    return "/lr?nid=" . $iNid . "&destination=" . $strUrl;
}

/**
 * get real name of user
 * @param type $uid
 * @param type $iParts
 * @return type
 */
function prayvine_get_name($uid, $iParts = 0) {
  $names = db_query("select f.field_first_name_value, l.field_last_name_value from {field_data_field_first_name} f, {field_data_field_last_name} l where f.entity_type = 'user' and f.entity_id = :uid and l.entity_type = 'user' and l.entity_id = f.entity_id", array(':uid' => $uid))->fetchObject();
  if ($names == NULL)
    return db_query("select name from {users} where uid = :uid", array(':uid' => $uid))->fetchField();
  if ($iParts == 1)
    return $names->field_first_name_value;
  return $names->field_first_name_value . " " . $names->field_last_name_value;
}

/**
 * get only firts name
 * @param type $uid
 * @return type
 */
function prayvine_get_first_name($uid) {
  $names = db_query("select f.field_first_name_value, l.field_last_name_value from {field_data_field_first_name} f, {field_data_field_last_name} l where f.entity_type = 'user' and f.entity_id = :uid and l.entity_type = 'user' and l.entity_id = f.entity_id", array(':uid' => $uid))->fetchObject();
  if ($names == NULL)
    return db_query("select name from {users} where uid = :uid", array(':uid' => $uid))->fetchField();
  return $names->field_first_name_value;
}

/**
 * check if user want ti receive updates via email
 * @param type $iUid
 * @return type
 */
function prayvine_wants_updates($iUid) {

  return (db_query("select count(*) from {field_data_field_receive_topic_updates} where entity_type='user' and entity_id = :uid and field_receive_topic_updates_value > 0;", array(":uid" => $iUid))->fetchField()) > 0;
}

/**
 * get image url of user
 * @param type $uid
 * @return string
 */
function prayvine_get_picture($uid) {
  $user = user_load($uid);
  if ($user != NULL)
    return prayvine_get_picture_from_user_object($user);
  else
    return "";
}

/**
 * extract url from user profile
 * @param type $user
 * @return string
 */
function prayvine_get_picture_from_user_object($user) {

  $default_pic = variable_get('user_picture_default', 'none');

  if (isset($user->picture) && !is_null($user->picture)) {
    $pic_url = image_style_url('medium', $user->picture->uri);
    return '<img class="user-profile-img" src="' . $pic_url . '" alt="" />';
  }
  else {
    if ($default_pic != 'none') {
      return '<img class="" src="/' . $default_pic . '" alt="" />';
    }
  }

  return "";
}

/**
 * prayer nodes connected to topics
 * @param type $iTopicId
 * @return type
 */
function prayvine_get_prayers($iTopicId) {
  $ids = array();
  $rows = db_query("select distinct f.entity_id from {field_data_field_topic_id} f, {node} n where f.entity_type = 'node' and f.bundle = 'prayer' and f.entity_id = n.nid and n.uid > 0 and f.field_topic_id_value = :topic_id order by entity_id desc", array(':topic_id' => $iTopicId));
  while (($row = $rows->fetchObject()) != NULL) {
    $ids[] = $row->entity_id;
  }
  return node_load_multiple($ids);
}

/**
 * prayer nodes connected to topics
 * @param type $iTopicId
 * @return type
 */
function prayvine_get_requests($iTopicId) {
  $ids = array();
  $rows = db_query("select distinct f.entity_id from {field_data_field_topic_id} f, {node} n where f.entity_type = 'node' and f.bundle = 'prayer_request' and f.entity_id = n.nid and n.uid > 0 and f.field_topic_id_value = :topic_id order by entity_id desc", array(':topic_id' => $iTopicId));
  while (($row = $rows->fetchObject()) != NULL) {
    $ids[] = $row->entity_id;
  }
  return node_load_multiple($ids);
}

/**
 * get comments connected to topic
 * @param type $iTopicId
 * @return type
 */
function prayvine_get_comments($iTopicId) {
  $ids = array();
  $rows = db_query("select distinct cid from {comment} where uid > 0 and nid = :nid", array(':nid' => $iTopicId));
  while (($row = $rows->fetchObject()) != NULL) {
    $ids[] = $row->cid;
  }
  return comment_load_multiple($ids);
}

/**
 * get people list to be able to see prayer
 * @param type $prayer_id - prayer id
 */
function prayvine_get_prayer_permissions($prayer_id) {
  $query = db_select('field_data_field_prayer_select_people', 'p')->fields('p', array('field_prayer_select_people_value'));
  $query->condition('entity_id', $prayer_id);
  $result = $query->execute()->fetchAll();
  $uids = array();
  foreach ($result as $uid) {
    $uids[$uid->field_prayer_select_people_value] = $uid->field_prayer_select_people_value;
  }
  return $uids;
}

/**
 * generate random strings used
 * @param type $iLen
 * @return type
 */
function prayvine_generate_random_string($iLen) {

  $string = time() . "prayvine10312013" . time() . rand(0, 1000);
  $strResult = md5($string);
  return $strResult;
}

/**
 * generate user image token
 * @global type $user
 * @return strin
 */
function prayvine_user_image_token($uid) {
  $user_full = user_load($uid);
  $pic_class = 'email-body-column'; //image exits
  $user_imag = prayvine_get_picture_from_user_object($user_full);
  if (empty($user_full->picture)) {
    $pic_class = '';
    $user_imag = '';
  }
  $image['image'] = '<div class="user-image-email">' . $user_imag . '</div>';
  $image['pic_class'] = $pic_class;
  return $image;
}

function prayvine_token_matches($nid, $strToken) {
  $inviteResultSet = db_query("select claimed_uid from {prayvine_invites} where invite_code = :token and nid = :nid", array(':token' => $strToken, ':nid' => $nid));
  while (($row = $inviteResultSet->fetchObject()) != NULL) {
    //if (is_null($row->claimed_uid) || ($row->claimed_uid == $uid)) {
    return true;
    //break;
    //}
  }
  return false;
}

function prayvine_has_permission($uid, $nid, $strToken) {
  $bHasPermission = FALSE;
  if ($uid > 0) {
    $bHasPermission = (db_query("select count(nid) from {prayvine_subscriptions} where uid = :uid and nid = :nid", array(':uid' => $uid, ':nid' => $nid))->fetchField() > 0);
    if (!$bHasPermission) {
      $iAuthorId = db_query("select uid from {node} where nid = :nid", array(':nid' => $nid))->fetchField();
      //drupal_set_message("iAuthorId = " . $iAuthorId . " for " . $nid);
      if ($iAuthorId == $uid)
        $bHasPermission = TRUE;
    }
  }
  if (!$bHasPermission && !empty($strToken)) {
    $bHasPermission = prayvine_token_matches($nid, $strToken);
  }
  if (!$bHasPermission && isset($_SESSION['prayvine_tokens']) && is_array($_SESSION['prayvine_tokens'])) {
    foreach ($_SESSION['prayvine_tokens'] as $strToken) {
      $bHasPermission = prayvine_token_matches($nid, $strToken);
      if ($bHasPermission)
        break;
    }
  }

  return $bHasPermission;
}

function _prayvine_do_add_subscription($nid, $uid) {
  $iNumSubscriptions = db_query("select count(uid) from {prayvine_subscriptions} where nid = :nid and uid = :uid", array(':nid' => $nid, ':uid' => $uid))->fetchField();
  if ($uid == 0) {
    watchdog('prayvine', 'Anonymous user was attempted to subscriber');
  }
  if ($iNumSubscriptions > 0 || $uid == 0)
    return;
  db_query("insert into {prayvine_subscriptions} (nid, uid) values (:nid, :uid)", array(':nid' => $nid, ':uid' => $uid));

  if (!empty($_GET['token'])) {
    // Accepts the email invitation.
    db_update('prayvine_invites')
      ->fields(array(
        'first_access' => date('Y-m-d H:i:s'),
        'claimed_uid' => $uid,
      ))
      ->condition('invite_code', $_GET['token'])
      ->execute();
  }

  if (stripos($_GET['q'], 'say_amen') !== FALSE) {
    $link = explode('/', $_GET['q']);
    $token = $link[3];
    db_update('prayvine_invites')
      ->fields(array(
        'first_access' => date('Y-m-d H:i:s'),
        'claimed_uid' => $uid,
      ))
      ->condition('invite_code', $token)
      ->execute();
  }

  // Sent notify email about subscription.
  $subscriber = user_load($uid);
  if ($subscriber->uid > 0) {
    $node = node_load($nid);
    $author = user_load($node->uid);
    if (isset($author) && prayvine_wants_updates($author->uid) && $subscriber->uid != $author->uid) {
      $strSubscriberName = prayvine_get_name($subscriber->uid);
      $strTopic = $node->title;
      $strUrl = prayvine_get_prayer_page_url($node->nid);
      $footer = prayvine_get_email_footer($author->mail, $author, $strTopic);
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('email-sent');
      }
      $topic = $node;
      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }
      rules_invoke_event('prayvine_send_mail_add_subscription', $author, $strSubscriberName, $subscriber, $strTopic, $strUrl, $footer, $ministry, $topic);
    }
  }
}

/**
 * user click add me button - it is confirmation that user accept inivitation
 * @global type $user
 * @param type $nid
 * @param type $strToken
 */
function prayvine_add_subscription($nid, $strToken = "", $subscriber = NULL) {
  global $user;
  if ($user->uid > 0) {//for logged in users
    if ($user->uid <= 0) {
      drupal_set_message("You must be logged in to subscribe");
      drupal_goto("");
    }
    if (empty($strToken)) {
      drupal_set_message("Please specify an authorization token");
      drupal_goto("");
    }
    $subscriber = $user;
  }


  if ($nid < 0) {
    drupal_set_message("Invalid page");
    drupal_goto("");
  }
  $node = node_load($nid);
  if (is_null($node)) {
    drupal_set_message("Unable to load prayer journal.");
    drupal_goto("");
  }

  if (!prayvine_has_permission($user->uid, $nid, $strToken)) {
    drupal_set_message("I'm afraid that you don't have access to read that prayer journal");
    drupal_goto("");
    //drupal_access_denied();
  }
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('add-subscription');
  }

  if ($user->uid > 0) {//for logged in users
    _prayvine_do_add_subscription($nid, $user->uid);
  }
  unset($_SESSION['prayer_destination']);
  db_query("update {prayvine_invites} set claimed_uid = :uid, first_access = now() where invite_code = :invite_code and nid = :nid and (claimed_uid is null)", array(':nid' => $nid, ':uid' => $subscriber->uid, ':invite_code' => $strToken));

  if ($user->uid > 0)//for logged in users
    drupal_goto("node/" . $nid);
}

/**
 * remove subscription to prayer topic
 * @global type $user
 * @param type $nid
 */
function prayvine_remove_subscription($nid) {
  global $user;
  if ($user->uid < 0) {
    drupal_set_message("You must be logged in to unsubscribe");
    drupal_goto("");
  }
  if ($nid < 0) {
    drupal_set_message("Invalid page");
    drupal_goto("");
  }
  if (!prayvine_has_permission($user->uid, $nid, "")) {
    drupal_set_message("I'm afraid that you don't have access to read that prayer journal");
    drupal_goto("");
  }
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('remove-subscription');
  }

  db_query("delete from {prayvine_subscriptions} where nid = :nid and uid = :uid", array(':nid' => $nid, ':uid' => $user->uid));
  drupal_goto("");
}

/**
 * process say amen - when user click say amen button
 * @global type $user
 * @param type $iNid
 * @param type $iStatus
 * @param type $strToken
 */
function prayvine_say_amen($iNid, $iStatus, $strToken) {
  global $user;
  $sayamen_user = $user;
  $key_verify = false;

  if (!empty($_GET['key'])) {//execute no loggin sayamen link
    $key = $_GET['key'];
    $subscriber = $_GET['subscriber'];
    $sayamen_user = user_load($subscriber);
    $compare_key = md5($iNid . 'pt1!3434$6567' . $sayamen_user->uid);
    if ($compare_key == $key) {
      $key_verify = true;
    }
  }

  if ($sayamen_user->uid < 0) {
    drupal_set_message("You must be logged in to call this function");
    drupal_goto("");
  }
  if ($iNid <= 0) {
    drupal_set_message("Invalid prayer ID");
    drupal_goto("");
  }
  $iTopicId = prayvine_get_topic_id($iNid);
  if ($iTopicId <= 0) {
    drupal_set_message("That prayer is not associated with an appropriate prayer journal.");
    drupal_goto("");
  }
  if (!prayvine_has_permission($sayamen_user->uid, $iTopicId, $strToken) && $key_verify) {
    drupal_set_message("--I'm afraid that you don't have access to access that prayer journal. " . $strToken);
    drupal_goto("");
  }
  if ($iStatus == "0")
    $iStatus = "0";
  else
    $iStatus = "1";
  $iNumRows = db_query("select count(uid) from {prayvine_prayer_amens} where nid = :nid and uid = :uid", array(':nid' => $iNid, ':uid' => $sayamen_user->uid))->fetchField();

  if ($iNumRows == 0) {
    if (module_exists('prayvinestat')) {
      prayvinestat_stat_event('say-amen');
    }

    //get token
    $split = explode('/', $_GET['q']);
    $token = $split[3];
    if (!empty($token)) {//if you not logged in
      if (module_exists('prayvinestat')) {
        prayvinestat_invitations('say-amen', NULL, $token);
      }
    }

    db_query("insert into {prayvine_prayer_amens} (nid, uid, status, updated) values (:nid, :uid, :status, now())", array(':nid' => $iNid, ':uid' => $sayamen_user->uid, ':status' => $iStatus));
    _prayvine_do_add_subscription($iTopicId, $sayamen_user->uid); ///add to subscribers list

    if (!empty($_SESSION['prayvine_tokens'][0])) {//set action that user use for get to site
      $_SESSION['action'] = 'say-amen';
      $_SESSION['topic_id'] = $iTopicId;
    }
    rules_invoke_event('prayvine_photo_reminder');
    $iAuthorId = db_query("select uid from {node} where nid = :nid", array(':nid' => $iNid))->fetchField();
    if (($iAuthorId > 0) && ($iAuthorId != $sayamen_user->uid)) {
      $author = user_load($iAuthorId);
      if (!is_null($author) && prayvine_wants_updates($author->uid)) {
        $strTopic = prayvine_get_title($iTopicId);

        $strUrl = prayvine_get_prayer_page_url($iTopicId);
        $strUserName = prayvine_get_name($sayamen_user->uid);
        $footer = prayvine_get_email_footer($author->mail, $author, $strTopic);
        $topic = node_load($iTopicId);
        $prayer = node_load($iNid);
        if (empty($topic->field_ministry['und'][0]['value'])) {
          $ministry = 0;
        }
        else {
          $ministry = $topic->field_ministry['und'][0]['value'];
        }
        rules_invoke_event('prayvine_send_say_amen', $author, $strUserName, $sayamen_user, $strTopic, $strUrl, $footer, $ministry, $topic, $prayer);
        if (module_exists('prayvinestat')) {
          prayvinestat_stat_event('email-sent');
        }
      }
    }
  }
  else {
    db_query("update {prayvine_prayer_amens} set nid = :nid, uid = :uid, status = :status, updated = now() where nid = :nid and uid = :uid", array(':nid' => $iNid, ':uid' => $user->uid, ':status' => $iStatus));
    _prayvine_do_add_subscription($iTopicId, $user->uid); ///add to subscribers list
  }
  if (!$key_verify) {
    drupal_goto("node/" . $iTopicId);
  }
  else {
    $prayer = node_load($iNid);
    $author_name = prayvine_get_name($prayer->uid);
    $strTopic = prayvine_get_title($iTopicId);
    drupal_set_message(t('You successfully said Amen to @author\'s prayer about @topic', array('@author' => $author_name, '@topic' => $strTopic)));
    drupal_goto();
  }
}

function prayvine_set_sharing($iNid, $iPermission) {
  global $user;
  if ($user->uid < 0) {
    drupal_set_message("You must be logged in to call this function");
    drupal_goto("");
  }
  if ($iNid < 0) {
    drupal_set_message("Invalid prayer journal.");
    drupal_goto("");
  }
  $node = node_load($iNid);
  if (is_null($node)) {
    drupal_set_message("Unable to load the prayer journal.");
    drupal_goto("");
  }
  if (($iPermission != "0") && ($iPermission != "1")) {
    drupal_set_message("Invalid permission specified");
    drupal_goto("");
  }
  $iAuthorId = db_query("select uid from {node} where nid = :nid", array(':nid' => $iNid))->fetchField();
  if ($user->uid != $iAuthorId) {
    drupal_set_message("Only the creator of the prayer journal is allowed to change its sharing settings");
    drupal_goto("");
  }
  $node->field_shareable['und'][0]['value'] = $iPermission;
  $node->status = 1;
  node_save($node);
  //db_query("update field_data_field_shareable set field_shareable_value = :permission where bundle = 'prayer' and entity_id = :nid", array(':permission' => $iPermission, ':nid' => $iNid));
  // clear cache
  //drupal_flush_all_caches(); -- is slow
  //node_load($iNid, $iNid, TRUE); -- doesn't seem to work
  drupal_goto("node/" . $iNid);
}

function prayvine_user_login(&$edit, $account) {

  global $user; //hanlding invite if user exist but not logged in.
  if ((stripos($_GET['q'], 'node') !== FALSE) && !empty($_GET['token']) && $user->uid > 0) {
    $q = explode('/', $_GET['q']);
    $iNid = $q[1];
    _prayvine_do_add_subscription($iNid, $user->uid);
    $token = $_GET['token'];
    prayvine_add_subscription($iNid, $token, $account);
  }

  if (isset($_SESSION['prayer_destination']) && empty($_GET['destination']) && (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset')) {
    $edit['redirect'] = $_SESSION['prayer_destination'];
    //$_GET['destination'] = $_SESSION['prayer_destination'];
  }
  else
    $edit['redirect'] = "main";
  //if (isset($_SESSION['prayvine_tokens'])) drupal_set_message("<pre>" . print_r($_SESSION['prayvine_tokens'], true) . "</pre>");
  //else drupal_set_message("no session");
  if (isset($_SESSION['prayvine_tokens'])) {
    foreach ($_SESSION['prayvine_tokens'] as $strToken) {
      $rows = db_query("select p.nid, p.cid from {prayvine_anonymous_posts} p, {prayvine_invites} i where p.inviteid = i.inviteid and i.invite_code = :invite_code", array(':invite_code' => $strToken));
      while (($row = $rows->fetchObject()) != NULL) {
        if ($row->nid > 0) {
          $node = node_load($row->nid);
          if (($node != NULL) && ($node->uid == 0)) {
            $node->uid = $account->uid;
            node_save($node);
            if (module_exists('prayvinestat')) {
              prayvinestat_stat_event('userlogin-prayer');
            }
            if (!prayvine_gear_prayer_notify($node)) {
              prayvine_notify_prayer_insert($node, $user);
            }
          }
        }
        if ($row->cid > 0) {
          $comment = comment_load($row->cid);
          if (($comment != NULL) && ($comment->uid == 0)) {
            $comment->uid = $account->uid;
            comment_save($comment);
            if (module_exists('prayvinestat')) {
              prayvinestat_stat_event('userlogin-comment');
            }

            if (!prayvine_gear_comment_notify($comment)) {
              prayvine_notify_comment_insert($comment, $user);
            }
          }
        }
      }
    }
  }
  if (isset($_GET['nid']) && is_numeric($_GET['nid']) && ($_GET['nid'] > 0)) {
    drupal_goto("node/" . $_GET['nid']);
  }
}

/**
 * Implements hook_user_delete();
 * delete user form prayvine tables
 */
function prayvine_user_delete($account) {
  db_delete('prayvine_subscriptions')->condition('uid', $account->uid)->execute();
}

/**
 * Retrieves the email footer output.
 */
function prayvine_get_email_footer($strEmail, $user, $strTopic) {
  global $base_url;
  $strFooter = "\n\n =========================\nFor help with Prayvine, contact us at help@prayvine.org.\n\nThis message was sent to " . $strEmail . ", because you are also praying about " . $strTopic . ".";
  if (isset($user->uid) && $user->uid > 0) {
    $strFooter .= " If you don't want to receive these emails from Prayvine in the future, click to unsubscribe: " . $base_url . "/user/" . $user->uid . "/edit";
  }
  return $strFooter;
}

function prayvine_send_email($strFromName, $strFrom, $strTo, $strCc, $strBcc, $strSubject, $strMsg) {
  //drupal_set_message("simulating mail from " . $strFrom . " to " . $strTo . " with subject '" . $strSubject . "' and text '" . $strMsg . "'");
  //$strSubject = str_replace("\n", " ", $strSubject);
  $strMsg = wordwrap(str_replace("\n", "\r\n", $strMsg), 75, "\r\n");
  mail($strTo, $strSubject, $strMsg, "From: " . $strFromName . " <"
      . $strFrom . ">\r\n" . "Reply-To: " . $strFrom . "\r\n");
}

/**
 * mail_alter hook
 * @param type $message
 */
function prayvine_mail_alter(&$message) {
  //drupal_set_message("<pre>" . print_r($message, true) . "</pre>");

  if ($message['module'] == 'rules') {//use reply-to in from to compose reply to field
    $text = $message['from'];
    $rep_from = explode('reply-to:', $text);
    $message['from'] = $rep_from[0];
    if (!empty($rep_from[1])) {
      $message['headers']['Reply-To'] = $rep_from[1];
    }
    $message['headers']['From'] = $rep_from[0];
  }

  //clean up from header from additional address
  switch ($message['id']) {

    case 'user_register_no_approval_required': // cascade
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('email-sent');
      }

      $message['from'] = $message['from'];

    case 'user_password_reset':
      $account = $message['params']['account'];
      $message['from'] = '"Prayvine" <' . $message['from'] . '>';
      if (module_exists('prayvinestat')) {
        prayvinestat_stat_event('email-sent');
      }

      $strFirstName = prayvine_get_name($account->uid, 1);
      $strName = prayvine_get_name($account->uid);
      $message['subject'] = str_replace("%first_name", $strFirstName, $message['subject']);
      $message['subject'] = str_replace("%name", $strName, $message['subject']);
      $message['body'][0] = str_replace("%first_name", $strFirstName, $message['body'][0]);
      $message['body'][0] = str_replace("%name", $strName, $message['body'][0]);
      break;
  }
  //drupal_set_message("<pre>" . print_r($message, true) . "</pre>");
}

function prayvine_createtopic_submit() {
  drupal_set_message("hello");
}

/**
 * implements hook comment_presave
 * @param type $comment
 */
function prayvine_comment_presave($comment) {

  $created = db_query("select created from {comment} where cid = :cid", array(':cid' => $comment->cid))->fetchField();
  if (!empty($created))
    $comment->created = $created;
}

function prayvine_node_view($node, $view_mode) {
  //drupal_set_message("<pre>" . print_r($node, true) . "</pre>");
  if ($node->type == 'login') {
    drupal_goto(); //this is not used at the moment so redirect to front page to login
    $node->forms = array();
    $node->forms['user_register_form'] = drupal_get_form('user_register_form');
    $node->forms['user_login'] = drupal_get_form("user_login");
  }
}

/**
 * hook_user_insert - used to add subscription to newly created user
 * @param type $edit
 * @param type $account
 * @param type $category
 */
function prayvine_user_insert(&$edit, $account, $category) {
  //drupal_set_message("<pre>" . print_r($edit, true) . "</pre>");
  //drupal_set_message("destination = " . $_GET['destination']);
  $iNid = 0;
  if (!empty($_GET['destination']) && (strlen($_GET['destination']) > 5)) {
    if (substr($_GET['destination'], 0, 5) == '/add/') {
      $iEndIndex = strpos($_GET['destination'], '/', 5);
      if ($iEndIndex > 5)
        $iNid = substr($_GET['destination'], 5, ($iEndIndex - 5));
    }
  }

  //drupal_set_message("nid = " . $iNid . "; uid = " . $edit['uid']);

  if (!empty($_GET['q']) && !empty($_GET['token']) && !empty($edit['uid'])) {
    $q = explode('/', $_GET['q']);
    $iNid = $q[1];
    _prayvine_do_add_subscription($iNid, $edit['uid']);
    $token = $_GET['token'];
    prayvine_add_subscription($iNid, $token, $account);
  }
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('user-signin');
  }
}

/**
 * used to override drupal messages and redirect user to node after login
 * @param type $form
 * @param type $form_state
 */
function prayvine_message_override($form, $form_state) {

  if ($form['#form_id'] == 'prayer_node_form') {
    $title = $form_state['input']['title'];
    $topic_id = $form_state['values']['field_topic_id']['und'][0]['value'];
    $topic = node_load($topic_id);
    $message = 'Your prayer has been posted. God loves and hears you.';
    unset($_SESSION['messages']['status']);
    $_SESSION['messages']['status'][0] = $message;

    global $user;
    if ($user->uid == 0) {
      unset($_SESSION['messages']);
    }
    //redirect submited prayer to prayers topic page
    $topic_id = $form_state['values']['field_topic_id']['und'][0]['value'];
    drupal_goto('node/' . $topic_id);
  }
  if ($form['#form_id'] == 'prayer_request_node_form') {
    $topic_id = $form_state['values']['field_topic_id']['und'][0]['value'];
    $topic = node_load($topic_id);
    $message = 'Your prayer request about <em class="placeholder">' . $topic->title . '</em> has been sent.';
    unset($_SESSION['messages']['status']);
    $_SESSION['messages']['status'][0] = $message;

    global $user;
    if ($user->uid == 0) {
      unset($_SESSION['messages']);
    }
    //redirect submited prayer to prayers topic page
    $topic_id = $form_state['values']['field_topic_id']['und'][0]['value'];
    $prayer_request_id = $form_state['nid'];

    $topic = node_load($topic_id);
    if (empty($topic->field_ministry['und'][0]['value'])) {
      drupal_goto('node/' . $topic_id);
    }
    else {
      drupal_goto('loadform/' . $topic_id . '/' . $prayer_request_id);
      exit;
    }


    // drupal_goto('node/'.$topic_id);
  }
  if ($form['#form_id'] == 'user_register_form' || $form['#form_id'] == 'user_login') { //redirect user to node where he is subscribed
    $action_link = $form['#action'];
    $link = explode('?', $action_link);
    if (!empty($link[0])) {
      drupal_goto(substr($link[0], 1)); //remove front /
    }
  }

  if ($form['#form_id'] == 'comment_node_topic_form') {
    $message = t('Your comment has been updated');
    $_SESSION['messages']['status'][0] = $message;
  }

  if ($form['#form_id'] == 'node_delete_confirm') {
    $node_del = $form_state['complete form']['#node'];

    if ($node_del->type == 'prayer') {
      $message = t('Your prayer has been deleted.');
      $_SESSION['messages']['status'][0] = $message;
    }
    if ($node_del->type == 'prayer_request') {
      $message = t('Your prayer request has been deleted.');
      $_SESSION['messages']['status'][0] = $message;
    }
  }
}

/**
 * Santize page - there is no reverse operation.
 */
function prayvine_sanitize_site() {
  // Santize user names and emails.
  $email_domain = '@skele.prayvine.org';
  // Sanitize invites.
  $ctr = 1;
  $result = db_query("SELECT inviteId, mail FROM {prayvine_invites} WHERE (mail NOT LIKE 'test+%') AND (mail != 'ian@kitepluskey.com')");
  foreach ($result as $row) {
    $ctr++;
    $invite_id = $row->inviteId;
    $mail = 'invite_' . $invite_id . $email_domain;
    $updated = db_update('prayvine_invites')->fields(array(
      'mail' => $mail,
    ))->condition('inviteId', $invite_id)->execute();
  }
  print "Updated " . $ctr . " records.\n\n";
  $c = 1;
  $result = db_query("SELECT uid, name, mail FROM {users} WHERE (mail NOT LIKE 'test+%') AND (mail != 'ian@kitepluskey.com')");
  foreach ($result as $row) {
    $c++;
    $uid = $row->uid;
    $name = 'user_name_' . $uid;
    $mail = 'user_name_' . $uid . $email_domain;
    $updated = db_update('users')->fields(array(
      'name' => $name,
      'mail' => $mail,
    ))->condition('uid', $uid)->execute();
  }
  print "Updated " . $c . " records.\n\n";

  // Drupal_comment - subject.
  $query = db_select('comment', 'f')->fields('f', array('cid', 'subject'));
  $fields = $query->execute();
  while ($field = $fields->fetchAssoc()) {
    $value = $field['subject'];
    $en_value = "Subject - " . $field['cid'];
    db_update('comment')->fields(array('subject' => $en_value))->condition('cid', $field['cid'])->execute();
  }

  // Drupal_node - title.
  // Types.
  $or = db_or();
  $or->condition('type', 'prayer');
  $or->condition('type', 'topic');
  $query = db_select('node', 'f')->fields('f', array('nid', 'title'));
  $query->condition($or);
  $fields = $query->execute();
  while ($field = $fields->fetchAssoc()) {
    $value = $field['title'];
    $en_value = 'Node title - ' . $field['nid'];
    db_update('node')->fields(array('title' => $en_value))->condition('nid', $field['nid'])->execute();
  }
  // Drupal_node_revision - title.
  $query = db_select('node_revision', 'f')->fields('f', array('nid', 'title'));
  $fields = $query->execute();
  while ($field = $fields->fetchAssoc()) {
    $value = 'Node title - ' . $field['nid'];
    db_update('node_revision')->fields(array('title' => $value))->condition('nid', $field['nid'])->execute();
  }

  // Drupal_field_data_field_last_name - field_last_name_value.
  prayvine_santize_fields('field_data_field_last_name', 5);
  // Drupal_field_data_field_first_name - field_first_name_value.
  prayvine_santize_fields('field_data_field_first_name', 5);
  // Drupal_field_data_field_prayer_text - field_prayer_text_value.
  prayvine_santize_fields('field_data_field_prayer_text', 0);
  // Drupal_field_data_field_current_church - field_current_church_value.
  prayvine_santize_fields('field_data_field_current_church', 10);
  // Drupal_field_data_field_closing - field_closing_value.
  prayvine_santize_fields('field_data_field_closing', 7);
  // Drupal_field_data_field_books_i_like - field_books_i_like_value.
  prayvine_santize_fields('field_data_field_books_i_like', 7);
  // Drupal_field_data_comment_body - comment_body_value.
  prayvine_santize_fields('field_data_comment_body', 0);
}

/**
 * encrypt value of text drupal fields
 * @param type $field_name
 */
function prayvine_santize_fields($field_name, $length) {
  $value_name = str_replace('field_data_', '', $field_name);
  $value_name = $value_name . '_value';

  $query = db_select($field_name, 'f')->fields('f', array('entity_id', $value_name));
  $fields = $query->execute();
  while ($field = $fields->fetchAssoc()) {
    $value = $field[$value_name];
    $en_value = prayvine_Loremipsum($length);
    if ($field_name == 'field_data_field_first_name') {
      $en_value = 'F_Name-' . $field['entity_id'];
    }
    if ($field_name == 'field_data_field_last_name') {
      $en_value = 'L_Name-' . $field['entity_id'];
    }
    db_update($field_name)->fields(array($value_name => $en_value))->condition('entity_id', $field['entity_id'])->execute();
  }
  //encrypt revisions
  $rev_field_name = str_replace('field_data', 'field_revision', $field_name);
  $query = db_select($rev_field_name, 'f')->fields('f', array('entity_id', $value_name));
  $fields = $query->execute();
  while ($field = $fields->fetchAssoc()) {
    $value = $field[$value_name];
    $en_value = prayvine_Loremipsum($length);
    db_update($rev_field_name)->fields(array($value_name => $en_value))->condition('entity_id', $field['entity_id'])->execute();
  }
}

/**
 * hook_init
 */
function prayvine_init() {
  $opts = array('absolute' => TRUE);
  $json_url = url('prayvine_ajax_comment', $opts);
  drupal_add_js(array('prayvine_comment' => array('json_url' => $json_url)), 'setting');
  $opts = array('absolute' => TRUE);
  $json_url = url('prayvine_ajax_prayer', $opts);
  drupal_add_js(array('prayvine_prayer' => array('json_url' => $json_url)), 'setting');
  drupal_add_js('modules/filter/filter.js');

  //handling redirect on # anchor
  global $base_url;
  drupal_add_js(array('base_url' => array('url' => $base_url)), 'setting');
  drupal_add_js('sites/all/modules/prayvine/prayvine_init.js');
  //
  module_load_include('inc', 'node', 'node.pages'); //put to put ajax upload logo avaible
  if (module_exists('prayvinestat')) {
    prayvinestat_stat_event('general');
  }

  if (stripos($_GET['q'], 'prayvine_mail') !== FALSE) {//count email opens
    $data = explode('/', $_GET['q']);
    $content_id = $data[1];
    $user_uid = $data[2];
    $type = $data[3];
    $key = $data[4];
    prayvine_logger_mail_open($content_id, $user_uid, $type, $key);
  }
  //check expire date of token
  if (stripos($_GET['q'], 'node') !== FALSE && !empty($_GET['token'])) {

    $split_q = explode('/', $_GET['q']);
    $nid = $split_q[1];
    $topic = node_load($nid);

    if (!prayvine_expire_token($_GET['token']) && empty($topic->field_ministry['und'][0]['value'])) {
      drupal_set_message("To maintain security, your invitation has expired. Please request a new invation from your prayer partner.");
      drupal_goto("");
    }
  }

  //add to subcribers if user is logged in
  global $user;
  if ((stripos($_GET['q'], 'node') !== FALSE) && !empty($_GET['token']) && $user->uid > 0) {
    $account = user_load($user->uid);
    $q = explode('/', $_GET['q']);
    $iNid = $q[1];
    _prayvine_do_add_subscription($iNid, $user->uid);
    $token = $_GET['token'];
    prayvine_add_subscription($iNid, $token, $account);
  }

  //optout unregister user
  if (stripos($_GET['q'], 'prayvine_unsubscribe') !== FALSE) {
    $q = explode('/', $_GET['q']);
    $inviteId = $q[1];
    $unsubscribe_key = $q[2];
    $compare_key = md5('!optout163##123' . $inviteId);
    if ($unsubscribe_key == $compare_key) {
      //unsubscribe user
      $topic_data = db_select('prayvine_invites', 'i')->fields('i', array('nid'))->
              condition('i.inviteId', $inviteId)->execute()->fetchAll();
      $topic_id = $topic_data[0]->nid;
      $topic = node_load($topic_id);
      drupal_set_message(t('You succesfully unsubscribe to @title topic.', array('@title' => $topic->title)));
      $delete = db_delete('prayvine_invites')->condition('inviteId', $inviteId)->execute();
      drupal_goto();
    }
    else {
      if (!empty($unsubscribe_key)) {
        drupal_set_message(t('Your unsubscribe link is not valid, contact support.'));
        drupal_goto();
      }
    }
  }


  global $user;
  if ($user->uid > 0) {
    drupal_add_js(array('user' => array('is_logged' => 1)), 'setting');
  }
  else {
    drupal_add_js(array('user' => array('is_logged' => 0)), 'setting');
  }
  if (!empty($_GET['reset_tutorial'])) {
    global $user;
    $tutorial_state = variable_get('tutorial_state', array());
    unset($tutorial_state[$user->uid]);
    variable_set('tutorial_state', $tutorial_state);
  }
}

/**
 * encrypt function
 * @global string $_SECRET_KEY
 * @param type $value
 * @return boolean
 */
function encryptPrayvine($value) {
  global $_SECRET_KEY;
  if (!$value) {
    return false;
  }
  $key = $_SECRET_KEY;
  $text = $value;
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
  $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
  $crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $text, MCRYPT_MODE_ECB, $iv);
  return trim(base64_encode($crypttext)); //encode for cookie
}

/**
 * decrypt content not used
 * @global string $_SECRET_KEY
 * @param type $value
 * @return boolean
 */
function decryptPrayvine($value) {
  global $_SECRET_KEY;
  if (!$value) {
    return false;
  }
  $key = $_SECRET_KEY;
  $crypttext = base64_decode($value); //decode cookie
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
  $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
  $decrypttext = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $crypttext, MCRYPT_MODE_ECB, $iv);
  return trim($decrypttext);
}

/**
 * generate lorem ipsum dummy text for sanitations
 * @param type $length
 * @return type
 */
function prayvine_Loremipsum($length = 0) {

  $text = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
  if ($length > 0)
    $text = substr($text, 0, $length);
  return $text;
}

/**
 * check token expire
 * @param type $token
 */
function prayvine_expire_token($token) {
  $sent_time = db_query("select sent from {prayvine_invites} where invite_code = :token", array(':token' => $token))->fetchField();
  $timestamp_today = time();
  $timestamp_sent = strtotime($sent_time);
  $length = $timestamp_today - $timestamp_sent;
  if ($length > 7 * 24 * 60 * 60) {
    return false;
  }
  return true;
}

/**
 * action hook use in VBO
 * @return type
 */
function prayvine_action_info() {

  return array(
    'prayvine_action_remove_subscriber' => array(
      'type' => 'entity',
      'pass rows' => TRUE,
      'label' => t('Prayvine-1 Remove subscriber from topic page'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'prayvine_action_revoke_invite' => array(
      'type' => 'entity',
      'pass rows' => TRUE,
      'label' => t('Revoke invite'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'prayvine_action_invite_permission' => array(
      'type' => 'entity',
      'pass rows' => TRUE,
      'label' => t('Prayvine-2 Invite Permission'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'prayvine_action_remove_invite_permission' => array(
      'type' => 'entity',
      'pass rows' => TRUE,
      'label' => t('Prayvine-3 Remove Invite Permission'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'prayvine_action_ministry_communicator_permission' => array(
      'type' => 'entity',
      'pass rows' => TRUE,
      'label' => t('Prayvine-4 Ministry Communicator Permission'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'prayvine_action_remove_ministry_communicator_permission' => array(
      'type' => 'entity',
      'pass rows' => TRUE,
      'label' => t('Prayvine-5 Remove Ministry Communicator Permission'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
  );
}

/**
 * remove subscriber from prayer topic
 * @param type $user
 * @param type $context
 */
function prayvine_action_remove_subscriber(&$user, $context) {
  foreach ($context['rows'] as $row) {
    $subscriber_uid = $row->users_prayvine_subscriptions_uid;
    $topic_id = $row->node_prayvine_subscriptions_nid;
    prayvine_remove_subscriber($topic_id, $subscriber_uid);
  }
}

/**
 * give invite permission to subscriber from prayer topic
 * @param type $user
 * @param type $context
 */
function prayvine_action_invite_permission(&$user, $context) {
  foreach ($context['rows'] as $row) {
    $subscriber_uid = $row->users_prayvine_subscriptions_uid;
    $topic_id = $row->node_prayvine_subscriptions_nid;
    prayvine_invite_permission($topic_id, $subscriber_uid);
  }
}

/**
 * give invite permission to subscriber from prayer topic
 * @param type $user
 * @param type $context
 */
function prayvine_action_remove_invite_permission(&$user, $context) {
  foreach ($context['rows'] as $row) {
    $subscriber_uid = $row->users_prayvine_subscriptions_uid;
    $topic_id = $row->node_prayvine_subscriptions_nid;
    prayvine_remove_invite_permission($topic_id, $subscriber_uid);
  }
}

/**
 * give permission for ministry communicator from prayer topic
 * @param type $user
 * @param type $context
 */
function prayvine_action_ministry_communicator_permission(&$user, $context) {
  foreach ($context['rows'] as $row) {
    $subscriber_uid = $row->users_prayvine_subscriptions_uid;
    $topic_id = $row->node_prayvine_subscriptions_nid;
    prayvine_ministry_communicator_permission($topic_id, $subscriber_uid);
  }
}

/**
 * give reomve permission ministry communicator from prayer topic
 * @param type $user
 * @param type $context
 */
function prayvine_action_remove_ministry_communicator_permission(&$user, $context) {
  foreach ($context['rows'] as $row) {
    $subscriber_uid = $row->users_prayvine_subscriptions_uid;
    $topic_id = $row->node_prayvine_subscriptions_nid;
    prayvine_remove_ministry_communicator_permission($topic_id, $subscriber_uid);
  }
}

/**
 * Remove subscriber from prayer topic.
 *
 * @param object $node
 *   Object node.
 * @param object $context
 *   Object context.
 */
function prayvine_action_revoke_invite(&$node, $context) {
  foreach ($context['rows'] as $rows) {
    if (isset($rows->inviteid)) {
      db_delete('prayvine_invites')->condition('inviteId', $rows->inviteid)->execute();
    }
  }
}

/**
 * remove subscriber comments, prayer nodes, amens,
 * @param type $topic
 * @param type $user
 */
function prayvine_remove_subscriber($topic_id, $user_id) {
  //delete comments

  $query = db_select('comment', 'c');
  $query->fields('c', array('cid', 'uid'))
      ->condition('uid', $user_id)
      ->condition('nid', $topic_id);
  $results = $query->execute();
  $cids = array();
  foreach ($results as $comment) {
    $cids[] = $comment->cid;
  }
  unset($query);
  unset($results);
  comment_delete_multiple($cids);

  //delete prayers
  $query = db_select('field_data_field_topic_id', 't');
  $query->join('node', 'n', 't.entity_id=n.nid');
  $query->fields('t', array('entity_id'))
      ->fields('n', array('title', 'nid'))
      ->condition('t.field_topic_id_value', $topic_id)
      ->condition('n.uid', $user_id);
  $results = $query->execute();
  foreach ($results as $prayer) {
    node_delete($prayer->nid);
    //delete amens
    db_delete('prayvine_prayer_amens')
        ->condition('nid', $prayer->nid)
        ->condition('uid', $user_id);
  }
  db_delete('prayvine_subscriptions')->condition('nid', $topic_id)->condition('uid', $user_id)->execute();
}

/**
 * give subscriber a invite permission for topic prayer
 * @param type $topic_id
 * @param type $subscriber_uid
 */
function prayvine_invite_permission($topic_id, $subscriber_uid) {

  $node = node_load($topic_id);
  if (empty($node->field_settings['und'][0])) {
    $settings['invite_permission'][$subscriber_uid] = $subscriber_uid;
  }
  else {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    $settings['invite_permission'][$subscriber_uid] = $subscriber_uid;
  }
  $node->field_settings['und'][0]['value'] = serialize($settings);
  $node->status;
  node_save($node);
}

/**
 * give subscriber a invite permission for topic prayer
 * @param type $topic_id
 * @param type $subscriber_uid
 */
function prayvine_remove_invite_permission($topic_id, $subscriber_uid) {

  $node = node_load($topic_id);
  if (empty($node->field_settings['und'][0])) {
    unset($settings['invite_permission'][$subscriber_uid]);
  }
  else {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    unset($settings['invite_permission'][$subscriber_uid]);
  }
  $node->field_settings['und'][0]['value'] = serialize($settings);
  $node->status = 1;
  node_save($node);
}

/**
 * give subscriber a ministry communicator permission for topic prayer
 * @param type $topic_id
 * @param type $subscriber_uid
 */
function prayvine_ministry_communicator_permission($topic_id, $subscriber_uid) {

  $node = node_load($topic_id);
  if (empty($node->field_settings['und'][0])) {
    $settings['ministry_communicator'][$subscriber_uid] = $subscriber_uid;
  }
  else {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    $settings['ministry_communicator'][$subscriber_uid] = $subscriber_uid;
  }
  $node->field_settings['und'][0]['value'] = serialize($settings);
  $node->status;
  node_save($node);
}

/**
 * remove subscriber a ministry communicator permission for topic prayer
 * @param type $topic_id
 * @param type $subscriber_uid
 */
function prayvine_remove_ministry_communicator_permission($topic_id, $subscriber_uid) {

  $node = node_load($topic_id);
  if (empty($node->field_settings['und'][0])) {
    unset($settings['ministry_communicator'][$subscriber_uid]);
  }
  else {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    unset($settings['ministry_communicator'][$subscriber_uid]);
  }
  $node->field_settings['und'][0]['value'] = serialize($settings);
  $node->status = 1;
  node_save($node);
}

/**
 * check if prayer has permission to display
 * @param type $prayer_id
 */
function prayvine_check_prayer_permission($prayer_node, $uid,$BypassPerm = 0) {
  if(empty($BypassPerm)){
    global $user;

    $topic_id = $prayer_node->field_topic_id['und'][0]['value'];
    $topic = node_load($topic_id);

    // Prayer community.
    if (empty($prayer_node->field_prayer_permission_type[LANGUAGE_NONE][0]['value'])) {
      return TRUE;
    }
    $permission_type_result = $prayer_node->field_prayer_permission_type[LANGUAGE_NONE][0]['value'];

    // "Only me".
    if ($permission_type_result == 1) {
      if ($uid == $prayer_node->uid || $uid == $topic->uid) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }

    // Select specific people.
    if ($permission_type_result == 2) {
      $permissions_field = $prayer_node->field_prayer_select_people[LANGUAGE_NONE];
      foreach ($permissions_field as $values) {
        $permissions[$values['value']] = $values['value'];
      }

      if (in_array($uid, $permissions) || $uid == $prayer_node->uid) {
        return true;
      }
      else {
        return false;
      }
    }

  }else{
    return true;
  }
}

/**
 * get additional form for topic additing
 * @param type $form
 * @param type $form_state
 */
function prayvine_topic_edit_form_node($form, &$form_state, $node) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Topic Title'),
    '#default_value' => $node->title,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['topic_id'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('prayvine_topic_edit_form_submit'),
    '#validate' => array('prayvine_topic_edit_form_validate'),
  );
  return $form;
}

/**
 * edit topic prayer page
 * @param type $form
 * @param type $form_state
 */
function prayvine_topic_edit_form($node) {
  global $user;
  $is_admin = false;
  if (in_array('administrator', $user->roles)) {
    $is_admin = true;
  }
  $ministry = $node->field_ministry['und'][0]['value'];

  if (!empty($node->field_settings['und'][0])) {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    if (!empty($settings['ministry_communicator'][$user->uid])) {
      $is_admin = true;
    }
  }

  if ($ministry) {//**** handling ministry settings
    module_load_include('inc', 'node', 'node.pages');
    $node_form = drupal_get_form('topic_node_form', $node);
    unset($node_form['field_ministry']['und']['#options']['_none']);
    unset($node_form['field_ministry']['und']['_none']);
  }
  else {
    $edit_node = drupal_get_form('prayvine_topic_edit_form_node', $node);
    $edit_node['submit']['#value'] = t('Update journal title');
    if ($is_admin) {
      module_load_include('inc', 'node', 'node.pages');
      $node_form = drupal_get_form('topic_node_form', $node);
      unset($node_form['field_ministry']['und']['#options']['_none']);
      unset($node_form['field_ministry']['und']['_none']);
      $edit_node['submit']['#value'] = t('Update journal title and Ministry settings');
      $submit = $edit_node['submit'];
      unset($edit_node['submit']);
      array_push($edit_node, array('submit' => $submit));
      array_unshift($edit_node, array('field_ministry' => $node_form['field_ministry']));
    }
  }

  if ($is_admin == false) {
    $node_form['field_ministry']['#access'] = false;
  }
  //remove fields we don't need

  $node_form['options']['#access'] = false;
  $node_form['author']['#access'] = false;
  $node_form['body']['#access'] = false;
  $node_form['field_shareable']['#access'] = false;
  $node_form['field_settings']['#access'] = false;
  $node_form['comment_settings']['#access'] = false;
  $node_form['path']['#access'] = false;
  $node_form['revision_information']['#access'] = false;
  $node_form['actions']['delete']['#access'] = false;
  $node_form['actions']['preview']['#access'] = false;
  $node_form['actions']['submit']['#value'] = t('Update Ministry settings');


  //************


  $delete_link = '/node_delete/' . $node->nid . '/delete_topic';
  $view_link = '/node/' . $node->nid;
  if ($ministry) {
    $output = '<h2>' . t('Prayer Ministry settings') . '</h2>';
    $output .= drupal_render($node_form);
  }
  else {
    $output = '<h2>' . t('Prayer Journal Title') . '</h2>';
    $output .= drupal_render($edit_node);
  }


  $display_id = 'default';
  $args = func_get_args();
  $args[0] = $node->nid;
  /*
    array_shift($args); // remove $name
    if (count($args)) {
    array_shift($args); // remove $display_id
    } */

  //subscribe **********************
  $views = views_get_view('subscribers');
  if (!$views || !$views->access($display_id)) {
    return;
  }
  $title = '<h2>' . t('Privacy') . '</h2>';
  $subscribe = $title . $views->preview($display_id, $args);
  //invites ***********************
  $viewp = views_get_view('prayvine_invites');
  if (!$viewp || !$viewp->access($display_id)) {
    return;
  }
  $title = '<h2>' . t('Invites') . '</h2>';
  $invites = $title . $viewp->preview($display_id, $args);
  $output .= $subscribe . $invites;

  $output .= '<h2>' . t('Delete Entire Prayer Page') . '</h2>';
  $output .= '<p>' . t('Delete this entire prayer journal. All prayers, comments and "Say amens" will be deleted. This action cannot be undone.') . '</p>';
  $output .= '<a id="topic-delete-all" href = "' . $delete_link . '">' . t('Delete Entire Page') . '</a>';
  $output .= '<a id="topic-view" href = "' . $view_link . '">' . t('Cancel') . '</a>';
  return $output;
}

/**
 * submit topic prayer data
 * @param type $form
 * @param type $form_state
 */
function prayvine_topic_edit_form_submit($form, &$form_state) {

  $topic_id = $form_state['values']['topic_id'];
  $title = check_plain($form_state['values']['title']);
  $topic = node_load($topic_id);
  $topic->title = strip_tags(htmlspecialchars_decode($title));
  //ministry
  $ministry = $form_state['input']['field_ministry']['und'];
  $topic->field_ministry['und'][0]['value'] = $ministry;
  $topic->status = 1;
  node_save($topic);
}

/**
 * validate topic prayer data
 * @param type $form
 * @param type $form_state
 */
function prayvine_topic_edit_form_validate($form, &$form_state) {

}

/**
 * Implements hook_cron();
 */
function prayvine_cron() {
  prayvine_ministry_prayer_post_reminder();
  prayvine_ministry_post_reminder();
  prayvine_invites_check();
}

/**
 * sent reminders for invitations to users
 * @global type $base_url
 */
function prayvine_invites_check() {
  $query = db_select('prayvine_invites', 'i');
  $query->fields('i', array('mail', 'nid', 'inviter_uid', 'sent', 'claimed_uid', 'invite_code'));
  $result = $query->execute();
  global $base_url;
  foreach ($result as $record) {
    $invite_time = strtotime($record->sent);
    $today = time();
    $lenght = time() - $invite_time;
    $hours_length = round($lenght / (60 * 60));
    $hours = 7 * 24 - $hours_length;
    $mail = $record->mail;
    $topic = node_load($record->nid);
    $inviter = user_load($record->inviter_uid);
    $inviter_name = prayvine_get_name($record->inviter_uid);
    if (!empty($topic) && !empty($inviter)) {
      $expire_date_timestamp = $invite_time + 7 * 24 * 60 * 60;
      $expire_date_token = date('l, F j, Y.', $expire_date_timestamp);
      $invite_link = $base_url . "/node/" . $topic->nid . "?token=" . $record->invite_code; //add expire date same as in register form
      if (empty($record->claimed_uid)) {
        $claimed_id = 0;
      }
      else {
        $claimed_id = $record->claimed_uid;
      }

      if (empty($topic->field_ministry['und'][0]['value'])) {
        $ministry = 0;
      }
      else {
        $ministry = $topic->field_ministry['und'][0]['value'];
      }
      rules_invoke_event('prayvine_invite_reminder', $inviter, $topic, $mail, $hours, $invite_link, $expire_date_token, $claimed_id, $inviter_name, $ministry);
    }
  }
}


/**
 * Facilitates the reminder email for ministry post community.
 */
function prayvine_ministry_post_reminder() {
  $reminder_days_default = 30;

  $sql = "SELECT n.* FROM {node} n " .
      " LEFT JOIN {field_data_field_ministry} m ON m.entity_id = n.nid AND m.bundle ='topic' " .
      " LEFT JOIN {field_data_field_email_reminder} r ON r.entity_id = n.nid AND r.bundle ='topic' " .
      " WHERE n.type = 'topic' AND n.status = 1 " .
      " AND m.field_ministry_value = 1 " .
      " AND DATE_ADD(FROM_UNIXTIME(n.created), INTERVAL IFNULL(r.field_email_reminder_value, " . $reminder_days_default .") DAY) < now() ";

  $query = db_query($sql);
  $result = $query->fetchAllKeyed();

  if (!empty($result)) {
    foreach ($result as $nid => $row) {
      // Load the topic node object.
      $node = (array) node_load($nid);

      // Get the prayer language.
      $lang = LANGUAGE_NONE;
      if (isset($node['language'])) {
        $lang = $node['language'];
      }

      // Get reminder setting for the node.
      // The default value is 30 days.
      $settingdays = $reminder_days_default;
      if (isset($node['field_email_reminder'][$lang][0]['value']) && $node['field_email_reminder'][$lang][0]['value'] > 0) {
        $settingdays = $node['field_email_reminder'][$lang][0]['value'];
      }

      if ($settingdays > 0 && isset($node['nid'])) {
        // Start checking reminder of the community owner.
        $owner = $node['uid'];
        $users = array();
        $users[] = $owner;

        // Start checking reminder for owner of the prayer and for
        // ministry communicators.
        if (isset($node['field_settings'][$lang][0]['value'])) {
          $settings = unserialize($node['field_settings'][$lang][0]['value']);
          if (isset($settings['ministry_communicator']) && is_array($settings['ministry_communicator'])) {
            foreach ($settings['ministry_communicator'] as $uid) {
              $users[] = $uid;
            }
          }
        }

        $users = array_unique($users);

        // Validate the prayer reminder before sending to users.
        if (prayvine_validate_reminder($node, $users, $settingdays, $lang) === TRUE) {
          prayvine_send_reminder($node, $users, $lang);
        }
      }

    }
  }
}

/**
 * Facilitates the reminder email for ministry community.
 */
function prayvine_ministry_prayer_post_reminder() {
  $sql = "SELECT p.nid, n.nid FROM {node} p
          INNER JOIN {field_data_field_want_reminder} w ON w.entity_id = p.nid AND w.bundle ='prayer_request'
          INNER JOIN {field_data_field_topic_id} t ON t.entity_id = p.nid AND t.bundle ='prayer_request'
          INNER JOIN {node} n ON t.field_topic_id_value = n.nid
          INNER JOIN {field_data_field_ministry} m ON m.entity_id = n.nid AND m.bundle ='topic'
          WHERE p.type = 'prayer_request'
          AND n.status = 1 AND m.field_ministry_value = 1
          AND w.field_want_reminder_value = 1";
  $result = db_query($sql)->fetchAllKeyed();

  if (!empty($result)) {
    foreach ($result as $pid => $nid) {
      // Load the topic and prayer request node objects.
      $node = (array) node_load($nid);
      $prayer = (array) node_load($pid);

      // Get the prayer language.
      $lang = LANGUAGE_NONE;
      if (isset($prayer['language'])) {
        $lang = $prayer['language'];
      }

      // Get reminder setting for the node.
      // The default value is zero.
      $settingdays = 0;
      if (isset($prayer['field_email_reminder_prayer'][$lang][0]['value']) &&
        $prayer['field_email_reminder_prayer'][$lang][0]['value'] > 0) {
        $settingdays = $prayer['field_email_reminder_prayer'][$lang][0]['value'];
      }

      // If there are new post updates by ministry communicators, reset the
      // email reminder value of the prayer request to zero.
      $latest_post = _prayvine_get_last_post_date($node['nid']);
      if ($latest_post > $prayer['created']) {
        $settingdays = 0;
        $pr = node_load($prayer['nid']);
        $pr->field_email_reminder_prayer[LANGUAGE_NONE][0]['value'] = 0;
        node_save($pr);
      }

      // Get the days passed since posted.
      $now = time();
      $datediff = $now - $prayer['created'];
      $interval = round($datediff / (60 * 60 * 24));


      if ($settingdays > 0 && isset($prayer['nid']) && isset($node['nid']) && $interval >= $settingdays) {
        // Start checking reminder for owner of the prayer.
        $owner = array();
        $users = array();
        $users[] = $prayer['uid'];

        // Start checking reminder for owner of the prayer and for
        // ministry communicators.
        if (isset($node['field_settings'][$lang][0]['value'])) {
          $settings = unserialize($node['field_settings'][$lang][0]['value']);
          if (isset($settings['ministry_communicator']) && is_array($settings['ministry_communicator'])) {
            foreach ($settings['ministry_communicator'] as $uid) {
              $users[] = $uid;
            }
          }
        }

        $users = array_unique($users);

        // Validate the prayer reminder before sending to owner.
        if (prayvine_validate_prayer_reminder($node, $prayer, $users, $settingdays, $lang) === TRUE) {
          $owner[] = $prayer['uid'];
          prayvine_send_prayer_reminder($node, $prayer, $owner, $lang);
        }
      }

    }
  }
}

/**
 * Validates reminder required for users.
 */
function prayvine_validate_reminder($node, $users, $settingdays, $lang = 'und') {
  $owners = implode(',', $users);
  $default_frequency = 20;

  // SQL for checking prayer and request prayer last post.
  $reminderSQL = 'SELECT IFNULL(DATE_ADD(FROM_UNIXTIME(max(n.created)), INTERVAL :settingdays DAY) < now(), 1) AS reminder FROM {node} n
  LEFT JOIN {field_data_field_topic_id} topic on topic.entity_id = n.nid and topic.bundle = n.type
  WHERE n.type in (\'prayer\', \'prayer_request\') and topic.field_topic_id_value = :nodeid and uid in( :userid )';
  $reminderResult = db_query($reminderSQL, array(':settingdays' => $settingdays, ':userid' => $owners, ':nodeid' => $node['nid']))->fetchObject();

  // SQL for checking last comment posted.
  $reminderCommentSQL = 'SELECT IFNULL(DATE_ADD(FROM_UNIXTIME(max(c.created)), INTERVAL :settingdays DAY) < now(), 1) AS reminder FROM {comment} c where uid in ( :userid ) and nid = :nodeid';
  $reminderCommentResult = db_query($reminderSQL, array(':settingdays' => $settingdays, ':userid' => $owners, ':nodeid' => $node['nid']))->fetchObject();

  // Checking last reminder email sent to the user.
  $reminder_sql = "SELECT * FROM {prayvine_reminder} WHERE nid = :nid ORDER BY created";
  $reminder_rst = db_query($reminder_sql, array(':nid' => $node['nid']));

  // Get the reminder frequency value.
  if (isset($node['field_email_reminder_frequency'][$lang]) &&
      $node['field_email_reminder_frequency'][$lang][0]['value'] > 0) {
    $freqdays = $node['field_email_reminder_frequency'][$lang][0]['value'];
  }
  else {
    $freqdays = $default_frequency;
  }

  // If reminder was sent before, check the frequency interval.
  if ($freqdays > 0 && $reminder_rst->rowCount() > 0) {
    $args = array(
      ':settingdays' => $freqdays,
      ':userid' => $owners,
      ':nodeid' => $node['nid'],
    );
    $frequencySQL = 'SELECT IFNULL(DATE_ADD(max(n.created), INTERVAL :settingdays DAY) < now(), 1) as reminder from {prayvine_reminder} n where nid = :nodeid and uid in ( :userid )';
    $freResult = db_query($frequencySQL, $args)->fetchObject();
  }
  else {
    return ($reminderResult->reminder == 1 && $reminderCommentResult->reminder == 1) ? TRUE : FALSE;
  }

  if ($reminderResult->reminder == 1 && $reminderCommentResult->reminder == 1 && $freResult->reminder == 1) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Validates prayer reminder required for users.
 */
function prayvine_validate_prayer_reminder($node, $prayer, $users, $settingdays, $lang = 'und') {
  $owners = implode(',', $users);

  $latest_post = _prayvine_get_last_post_date($node['nid']);
  $datediff = time() - $latest_post;
  $interval = round($datediff / (60 * 60 * 24));

  if ($interval >= $settingdays) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Sends reminder email to selected users.
 */
function prayvine_send_reminder($topic_node, $users, $lang = 'und') {
  foreach ($users as $uid) {
    // Setting variables for event.
    $subscriber = user_load($uid);
    $author_name = '';
    $author_name_first = '';
    $topic = '';
    $freqdays = 20;
    $days = 30;
    $footer = '';

    if (isset($subscriber->uid)) {
      // Set author name.
      if (isset($subscriber->field_first_name[$lang][0]['value'])) {
        $author_name_first = $subscriber->field_first_name[$lang][0]['value'];
        $author_name = $subscriber->field_first_name[$lang][0]['value'] . ' ';
      }
      if (isset($subscriber->field_last_name[$lang][0]['value'])) {
        $author_name .= $subscriber->field_last_name[$lang][0]['value'];
      }

      // Set topic title.
      if (isset($topic_node['title'])) {
        $topic = $topic_node['title'];
      }

      // Set the frequency days.
      if (isset($topic_node['field_email_reminder_frequency'][$lang][0]['value'])) {
        $freqdays = $topic_node['field_email_reminder_frequency'][$lang][0]['value'];
      }

      // Set the reminder days.
      if (isset($topic_node['field_email_reminder'][$lang][0]['value'])) {
        $days = $topic_node['field_email_reminder'][$lang][0]['value'];
      }

      // Set the email footer.
      if (isset($subscriber->mail)) {
        $footer = prayvine_get_email_footer($subscriber->mail, $subscriber, $topic);
      }

      if ($days > 0) {
        // Calculate the interval between the last activity date inside the
        // topic and today's date.
        $latest_post = _prayvine_get_last_post_date($topic_node['nid']);
        if ($latest_post == 0) {
          $latest_post = $topic_node['created'];
        }
        $datediff = time() - $latest_post;
        $interval = round($datediff / (60 * 60 * 24));
        if ($interval > 0) {
          $days = $interval;
        }

        rules_invoke_event('prayvine_ministry_goal_reminder', $subscriber, $author_name, $author_name_first, $topic, $footer, node_load($topic_node['nid']), $days, $freqdays);

        // Save the reminder in the db.
        if (isset($topic_node['nid'])) {
          db_insert('prayvine_reminder')->fields(array(
            'nid' => $topic_node['nid'],
            'uid' => $uid,
          ))->execute();
        }
      }
    }
  }
}

/**
 * Sends reminder email to selected users.
 */
function prayvine_send_prayer_reminder($topic_node, $prayer_node, $users, $lang = 'und') {
  foreach ($users as $uid) {
    $subscriber = user_load($uid);
    $author_name = '';
    $author_name_first = '';
    $topic = '';
    $freqdays = 0;
    $days = 5;
    $footer = '';

    if (isset($subscriber->uid)) {
      // Set author name.
      if (isset($subscriber->field_first_name[$lang][0]['value'])) {
        $author_name = $subscriber->field_first_name[$lang][0]['value'] . ' ';
        $author_name_first = $subscriber->field_first_name[$lang][0]['value'];
      }
      if (isset($subscriber->field_last_name[$lang][0]['value'])) {
        $author_name .= $subscriber->field_last_name[$lang][0]['value'];
      }

      // Set the topic title.
      if (isset($topic_node['title'])) {
        $topic = $topic_node['title'];
      }

      // Set the reminder frequency.
      if (isset($prayer_node['field_email_reminder_frequency_p'][$lang][0]['value'])) {
        $freqdays = $prayer_node['field_email_reminder_frequency_p'][$lang][0]['value'];
      }

      // Set the reminder days.
      if (isset($prayer_node['field_email_reminder_prayer'][$lang][0]['value'])) {
        $days = $prayer_node['field_email_reminder_prayer'][$lang][0]['value'];
      }

      // Set the email footer.
      if (isset($subscriber->mail)) {
        $footer = prayvine_get_email_footer($subscriber->mail, $subscriber, $topic);
      }

      // Save the reminder in the db.
      if (isset($prayer_node['nid'])) {
        db_insert('prayvine_prayer_reminder')->fields(array(
          'pid' => $prayer_node['nid'],
          'uid' => $uid,
        ))->execute();
      }

      if ($days > 0) {
        rules_invoke_event('prayvine_ministry_prayer_goal_reminder', $subscriber, $author_name, $author_name_first, $topic, $footer, node_load($topic_node['nid']), node_load($prayer_node['nid']), $days, $freqdays);

        // Set the reminder days to zero to avoid receiving the same email again.
        $prayer = node_load($prayer_node['nid']);
        if (isset($prayer->nid)) {
          $prayer->field_email_reminder_prayer[LANGUAGE_NONE][0]['value'] = 0;
          node_save($prayer);
        }
      }
    }
  }
}

/**
 * delete spam accounts that
 */
function prayvine_spam_control() {
  $query = db_select('node', 'n')->fields('n', array('nid', 'title', 'uid'))->condition('type', array('topic', 'prayer'), 'IN');
  $result = $query->execute();
  foreach ($result as $record) {

    $check_topic_body_query = db_select('field_data_body', 'fb')->fields('fb', array('body_value'))->condition('entity_id', $record->nid);
    $check_topic_body = $check_topic_body_query->execute()->fetchCol();
    if (!empty($check_topic_body[0])) {//this should be empty ordinary user do not fill body
      $body = $check_topic_body[0];
      $is_spam = prayvine_spam_check($body);
      if ($is_spam) {
        $spamers[$record->uid] = $record->uid;
        user_delete($record->uid);
        node_delete($record->nid);
      }
    }
    else {
      $is_spam = prayvine_spam_check($record->title);
      if ($is_spam) {
        user_delete($record->uid);
        node_delete($record->nid);
      }
      else {//without subscriptions to any
        $sub_query = db_select('prayvine_subscriptions', 'sb')->fields('sb', array('nid'))->condition('uid', $record->uid);
        $sub_query_result = $sub_query->execute()->fetchCol();
        if (empty($sub_query_result)) {
          user_delete($record->uid);
          node_delete($record->nid);
        }
      }
    }
  }
}

/**
 * check if text belongs to spamer
 * @param type $text
 * @return boolean
 */
function prayvine_spam_check($text) {
  $key_words = array(
    'buy brand amfebutamone',
    'bupropion',
    'misoprostol',
    'prescription',
    'doxycycline',
    'buy cheap',
    'generic',
    'no script',
    'how to buy',
    'best price',
    'buy in online',
    'cheapest',
    'over the counter',
    'can i buy',
    'where to buy',
    'free shipping',
    'overnight delivery',
    'overnight shipping',
    'next day delivery',
    'cash for',
    'prescriptin',
    'perscription',
    'order generic',
    'cheap generic',
    'get cash',
    'order online',
    'aldactone',
    'http://givemeresult.com/pharma',
    'http://lookupform.com',
  );
  $spam = FALSE;
  foreach ($key_words as $key => $word) {
    if (stripos($text, $word) !== FALSE) {
      $spam = TRUE;
    }
  }
  return $spam;
}

/**
 * get login or sign in form
 * @param type $type
 * @return type
 */
function prayvine_render_login($type, $topic) {
  global $user;


  $terms_privacy = t(' <div class="register-lazy-tos">By clicking Pray for @topic you agree to Prayvine\'s <a href="/node/209">Terms of Use</a> and <a href="/node/212">Privacy Policy</a>.</div>', array('@topic' => $topic->title));
  if ($type == 1) {
    if ($user->uid == 0) {
      $token = $_GET['token'];
      $expire_date = prayvine_get_expire_date($token);
      $login_form = drupal_get_form('user_register_form');
      $author = user_load($topic->uid);
      $author_pic = prayvine_get_picture($topic->uid);
      $author_name = prayvine_get_name($topic->uid);
      if ($author->picture !== NULL) {
        $author_pic = str_replace('alt=""', 'alt="' . $author_name . '"', $author_pic);
      }
      else {
        $author_pic = '';
      }


      $login_form['timezone']['#access'] = false;
      $login_form['actions']['submit']['#value'] = t("Pray for") . ' ' . $topic->title;
      $login_form['pass']['#suffix'] = $terms_privacy;
      $login_render_form = drupal_render($login_form);
      $inviter_name = prayvine_get_name($topic->uid);


      $login_html = '<div class="login-form_lazy">';
      $login_html .= '<p class="login-header clearfix">' . $author_pic . ' ' . t('Join @inviter_name in prayer. Start by creating a Prayvine account', array('@inviter_name' => $inviter_name)) . '</p>';
      $login_html .= '<div class="register-lazy"><h2>' . t('Join Prayer Community for @topic', array('@topic' => $topic->title)) . '</h2>';
      $login_html .= '<p>' . t('Already have a Prayvine account? If so, ') . ' <a class="lazy-login-signin" href="#">' . t('sign in') . ' </a>' .
          t('to join this prayer community for @title', array('@title' => $topic->title)) . '</p>';
      $login_html .= $login_render_form;
      $login_html .= '</div>'; // end .register-lazy
      $login_html .= '<div class="register-description"><ul>
        <li>' . t('See prayer requests and answered prayers.') . '</li>' .
          '<li>' . t('Lift @inviter_name\'s spirit through prayer and encouragement.', array('@inviter_name' => $inviter_name)) . '</li>' .
          '<li>' . t('Experience God\'s love and grace as you pray together.') . '</li>' . '</li></ul></div></div>';
    }
    else {
      $login_html = '';
    }
  }
  if ($type == 0) {
    if ($user->uid == 0) {
      $token = $_GET['token'];
      $expire_date = prayvine_get_expire_date($token);
      $login_form = drupal_get_form('user_login');
      $author = user_load($topic->uid);
      $author_pic = prayvine_get_picture($topic->uid);
      $author_name = prayvine_get_name($topic->uid);
      if ($author->picture !== NULL) {
        $author_pic = str_replace('alt=""', 'alt="' . $author_name . '"', $author_pic);
      }
      else {
        $author_pic = '';
      }

      $login_form['actions']['submit']['#value'] = t("Pray for ") . ' ' . $topic->title;
      $login_form_render = drupal_render($login_form);

      $inviter_name = prayvine_get_name($topic->uid);
      $login_html = '<div class="signin-form_lazy">';
      $login_html .= '<p class="login-header clearfix">' . $author_pic . ' ' . t('Welcome to Prayvine! @inviter_name has invited you to this private prayer community for @topic.', array('@inviter_name' => $inviter_name, '@topic' => $topic->title)) . '</p>';

      $login_html .= '<h2>' . t('Sign-in to join Prayer Community for @topic:', array('@topic' => $topic->title)) . '</h2>';

      $login_html .= $login_form_render;

      $login_html .= '<p>' . t('New to Prayvine?') . ' <a class="lazy-login-register" href="#">' . t('Create an account') . ' </a>' .
          t('to join this prayer community for @title', array('@title' => $topic->title)) . '</p></div>';
    }
    else {
      $login_html = '';
    }
  }

  return $login_html;
}

/**
 * get invite expire date
 * @param type $token
 */
function prayvine_get_expire_date($token) {
  $query = db_select('prayvine_invites', 'p')->fields('p', array('mail', 'sent'));
  $query->condition('invite_code', $token);
  $result = $query->execute();
  foreach ($result as $record) {
    $sent_date = $record->sent;
  }
  $expire_timestamp = strtotime($sent_date);
  $expire_date_timestamp = $expire_timestamp + 7 * 24 * 60 * 60;
  if (time() > $expire_date_timestamp) {
    $expire_date = t('Expired');
  }
  else {
    $expire_date = date('l, F j, Y.', $expire_date_timestamp);
  }

  return $expire_date;
}

/**
 * exctrac email address from text
 * @param type $content
 */
function prayvine_extract_emails($content) {
  $mathches = array();
  preg_match_all("/[-0-9a-zA-Z.+_%+!$&*=^|~#%'`?{}]+@[-0-9a-zA-Z.+_]+\.[a-zA-Z]{2,4}/", $content, $matches);
  $emails = $matches[0];
  return $emails;
}

//theme functions
/**
 * render ministry header
 * @param type $topic
 * @return type
 */
function theme_prayvine_ministry_header($topic) {
  //add get data javascript
  $opts = array('absolute' => TRUE);
  $json_url = url('content_data', $opts);
  drupal_add_js(array('prayvine_data' => array('json_url' => $json_url)), 'setting');
  //autoload link
  $json_url = url('topic_autoload', $opts);
  drupal_add_js(array('prayvine_autoload' => array('json_url' => $json_url)), 'setting');
  drupal_add_js(array('prayvine_topic' => array('id' => $topic->nid)), 'setting');

  $is_partners = false; //check is it is partners page
  if (stripos($_GET['q'], 'partners') !== false) {
    $is_partners = true;
  }
  $full_node = node_view($topic);
  $has_permission = false;
  //counts
  $number_users = prayvine_count_users($topic->nid);
  $number_of_comment = prayvine_count_posts($topic->nid, 'comment');
  $number_of_prayer = prayvine_count_posts($topic->nid, 'prayer');
  $number_of_request = prayvine_count_posts($topic->nid, 'prayer_request');
  $total_number_posts = $number_of_comment + $number_of_prayer + $number_of_request;
  $total_number_of_amens = prayvine_count_total_amens($topic->nid);
  $total_number_of_pray_silently = prayvine_count_total_prayer_silently($topic->nid);
  $total = $total_number_of_amens + $total_number_of_pray_silently + $number_of_prayer;
  $stat = t('<a href="/node/' . $topic->nid . '/partners">@users prayer partners</a>, @posts posts,  @total prayers/amens', array('@users' => $number_users, '@posts' => $total_number_posts, '@total' => $total));

  $output = '';
  $invite_allow = true;
  if ($number_of_request == 0) {
    $output = '<p class ="invite-message">' . t(' Please post a prayer request before sending invitations. This helps your friends know how to pray for you.') . '</p>';
    $invite_allow = false;
  }
  if (empty($topic->field_ministry['und'][0]['value'])) {

    //Welcome tutorial page for ordinary ministry
    $output .= '<p class="stat">' . $stat . '</p>';
    global $user;
    $map_html = drupal_render($full_node['field_geolocation']);
    $description_html = drupal_render($full_node['field_description']);
    $logo_html = drupal_render($full_node['field_logo']);
    $donate_html = drupal_render($full_node['field_donate']);

    if (!empty($topic->field_settings['und'][0])) {
      $settings_text = $topic->field_settings['und'][0]['value'];
      $settings = unserialize($settings_text);
      if (!empty($settings['invite_permission'][$user->uid]) || !empty($settings['ministry_communicator'][$user->uid])) {
        $has_permission = true;
      }
    }

    if ($user->uid == $topic->uid || $has_permission) {
      if ($invite_allow) {
        $invite_button = '<a class="invite-friends" href="/invite/' . $topic->nid . '">' . t('Add ministry partner') . '</a>';
      }
      else {
        $invite_button = '<a class="invite-friends-not-allow" href="#">' . t('Add ministry partner') . '</a>';
      }
    }
    else {
      $invite_button = '';
    }

    //$output .= '<div class="ministry-info">' . $logo_html;
    //$output .= '<div class="ministry-about">';
    //$output .= '<h1 id="page-title" class="title">' . drupal_get_title() . '</h1>';
    //$output .= '<p class="stat">' . $stat . '</p>';
    //$output .= $description_html;
    //$output .= $donate_html . $invite_button . '</div>' . $map_html;
    //$output .= '</div>';
    //tutorial links
    $output .= prayvine_tutorial_ordinary_page($topic);
    //Welcome tutorial page for ordinary ministry
  }
  else {
    global $user;
    $map_html = drupal_render($full_node['field_geolocation']);
    $description_html = drupal_render($full_node['field_description']);
    $logo_html = drupal_render($full_node['field_logo']);
    $donate_html = drupal_render($full_node['field_donate']);

    if (!empty($topic->field_settings['und'][0])) {
      $settings_text = $topic->field_settings['und'][0]['value'];
      $settings = unserialize($settings_text);
      if (!empty($settings['invite_permission'][$user->uid]) || !empty($settings['ministry_communicator'][$user->uid])) {
        $has_permission = true;
      }
    }

    if ($user->uid == $topic->uid || $has_permission) {
      if ($invite_allow) {
        $invite_button = '<a class="invite-friends" href="/invite/' . $topic->nid . '">' . t('Add ministry partner') . '</a>';
      }
      else {
        $invite_button = '<a class="invite-friends-not-allow" href="#">' . t('Add ministry partner') . '</a>';
      }
    }
    else {
      $invite_button = '';
    }

    $output .= '<div class="ministry-info">' . $logo_html;
    $output .= '<div class="ministry-about">';
    $output .= '<h1 id="page-title" class="title">' . drupal_get_title() . '</h1>';
    $output .= '<p class="stat">' . $stat . '</p>';
    $output .= $description_html;
    $output .= $donate_html . $invite_button . '</div>' . $map_html;
    $output .= '</div>';
    //tutorial links
    $output .= prayvine_tutorial_page($topic);
  }

  return $output;
}

/**
 * get subscribers of topic
 * @param type $node
 * @param type $bShareable
 * @param type $user
 * @param type $strToken
 * @return string
 *
 */
function prayvine_get_subscribers($node, $bShareable, $user, $strToken) {
  //$subscribersResultSet = db_query("select entity_id from field_data_field_subscriptions where field_subscriptions_nid = :nid", array(':nid' => $node->nid));
  $alSubscriberIds = prayvine_get_subscriber_ids($node->nid);
  $alSubscribers = user_load_multiple($alSubscriberIds);
  $strSubscribers = "";
  $removeMe = '';
  $is_not_ministry = empty($node->field_ministry['und'][0]['value']);
  foreach ($alSubscribers as $subscriber) {
    if (!empty($strSubscribers))
      $strSubscribers .= " ";
    //drupal_set_message("user: <pre>" . print_r($subscriber, true) . "</pre>");
    $strSubscribers .= "<a href='/user/" . $subscriber->uid
        . "'>";
    $strSubcriberName = prayvine_get_name($subscriber->uid);

    $strPicture = prayvine_get_picture_from_user_object($subscriber);
    if (!empty($strPicture))
      $strSubscribers .= $strPicture;
    else
      $strSubscribers .= $strSubcriberName;
    $strSubscribers .= "<span>" . $strSubcriberName . "</span></a>";
    if ($subscriber->uid == $user->uid) {
      if ($user->uid != $node->uid)
        $removeMe = " <a href='/remove/" . $node->nid
            . "'>" . t("Remove me") . "</a>";
    }
  }
  $strSubscribers = "";

  if (($user->uid != $node->uid && $user->uid > 0) && !in_array($user->uid, $alSubscriberIds)) {
    $strSubscribers .= "<a href='"
        . prayvine_get_link($user, $node->nid, "/add/" . $node->nid . "/" . $strToken)
        . "'>Add me</a>";
  }
  $strInvite = '';
  if (($user->uid > 0 && in_array($user->uid, $alSubscriberIds)) || ($user->uid == $node->uid)) {
    if ($is_not_ministry) {//button is displayed on different place for ministry topics
      $number_of_request = prayvine_count_posts($node->nid, 'prayer_request');
      if ($number_of_request == 0) {
        $strInvite = "<br /> <a class='invite-friends-not-allow' href='#'>Invite friends</a>";
      }
      else {
        $strInvite = "<br /> <a href='/invite/" . $node->nid . "'>Invite friends</a>";
      }
    }
  }

  $has_permission = false;

  if (!empty($node->field_settings['und'][0])) {
    $settings_text = $node->field_settings['und'][0]['value'];
    $settings = unserialize($settings_text);
    if (!empty($settings['invite_permission'][$user->uid]) || !empty($settings['ministry_communicator'][$user->uid])) {
      $has_permission = true;
    }
  }
  if ($is_not_ministry) {
    if ($user->uid == $node->uid || prayvine_has_permission($user->uid, $node->nid, '')) {
      $strSharing = "Privacy: <br />";
      $strSubscribers = "<div class='vertical-pad'>" . $strInvite . $removeMe . "</div>";
    }
    else {
      $strSubscribers = "<div class='vertical-pad'>" . $removeMe . "</div>";
    }
  }


  return $strSubscribers;
}

/**
 * get amnes for specific prayers
 * @param type $iNid
 * @param type $user
 * @param type $bSelfSaid
 * @return string
 */
function prayvine_get_amens($iNid, $user, &$bSelfSaid) {
  $bSelfSaid = FALSE;
  $rows = db_query("select uid from {prayvine_prayer_amens} where status > 0 and nid = :nid", array(':nid' => $iNid));
  $strResult = "";
  $prayers_count = 0;
  while (($row = $rows->fetchObject()) != NULL) {

    $result = db_query("SELECT COUNT(*) FROM {users} WHERE uid = :uid;", array(':uid' => $row->uid));

    if ($result->fetchField() > 0) {
      if (!empty($strResult)) {
        $strResult .= ", ";
      }
      $prayers_count++;
      $strResult .= "<a href='/user/" . $row->uid . "'>"
          . prayvine_get_name($row->uid) . "</a>";
    }


    if ($user->uid == $row->uid)
      $bSelfSaid = TRUE;
  }
  if ($prayers_count > 3) {
    if (!empty($strResult))
      $strResult = '<div class="also-prayed-by count-more3">' . t('Also prayed by') . '<div>' . $strResult . '</div><span>' . t('See all') . ' ' . $prayers_count . '</span> </div>';
  } else {
    if (!empty($strResult))
      $strResult = '<div class="also-prayed-by">' . t('Also prayed by') . '<div>' . $strResult . '</div></div>';
  }

  return $strResult;
}

/**
 * get tooltip informations for request
 * @param type $content_id
 */
function prayvine_get_request_data($content_id) {

}

/**
 * get tooltip informations for update
 * @param type $content_id
 */
function prayvine_get_update_data($content_id) {

}

/**
 * get topics
 * @param type $strSql
 * @param type $uid
 * @param type $bShowAuthor
 * @return type
 */
function prayvine_get_topics($strSql, $uid, $bShowAuthor) {
  $rows = db_query($strSql, array(':uid' => $uid));
  $strResult = "";
  while (($row = $rows->fetchObject()) != NULL) {
    $iNid = $row->nid;
    $strTitle = prayvine_get_title($iNid);
    $strAuthorName = "";
    if ($bShowAuthor)
      $strAuthorName = prayvine_get_name($row->uid) . ": ";
    $strResult .= "<a href='/node/" . $iNid . "'>" . $strAuthorName . $strTitle . " </a> / ";
  }
  $strResult = substr($strResult, 0, -2); // remove last slash
  return $strResult;
}

/**
 * get topics pictures
 * @param type $strSql
 * @param type $uid
 * @param type $bShowAuthor
 * @return string
 */
function prayvine_get_topics_pic($strSql, $uid, $bShowAuthor) {
  $rows = db_query($strSql, array(':uid' => $uid));
  $strResult = "";
  $prayer_subscription = array();
  while (($row = $rows->fetchObject()) != NULL) {
    $iNid = $row->nid;
    $strTitle = prayvine_get_title($iNid);
    $prayer_subscription[$row->uid]['nid'][] = $iNid;
    $prayer_subscription[$row->uid]['title'][] = $strTitle;
  }
  //sort topics by user
  foreach ($prayer_subscription as $uid => $topics) {
    $pic = prayvine_get_picture($uid);
    if ($bShowAuthor)
      $strAuthorName = prayvine_get_name($uid) . ": ";
    $strResult .= "<div><h2><a href='/user/" . $uid . "'>" . prayvine_get_name($uid) . "</a></h2>";
    $first_name = prayvine_get_first_name($uid);
    $pic = prayvine_get_picture($uid);
    $strResult .= $pic;
    $strResult .= t("@first's Prayer Communities (shared with you):", array('@first' => $first_name)) . ' ';
    foreach ($topics['nid'] as $key => $nid) {
      $title = $topics['title'][$key];
      $strResult .= "<a href='/node/" . $nid . "'>" . $title . " </a> / ";
    }
    $strResult = substr($strResult, 0, -2); // remove last slash
    $strResult .= '</div>'; // close one user journal
  }

  return $strResult;
}

/**
 * get all prayers connect with request prayers
 * @param type $request_id
 */
function prayvine_get_req_prayers($request_id) {
  $query = db_select('field_data_field_prayer_id', 'p')->fields('p', array('entity_id'))
      ->condition('field_prayer_id_target_id', $request_id);
  $results = $query->execute()->fetchAll();
  foreach ($results as $key => $record) {
    $prayers_req[] = $record->entity_id;
  }
  if (!empty($prayers_req)) {
    return node_load_multiple($prayers_req);
  }
  return array();
}

/**
 * get all prayers connect with request prayers
 * @param type $request_id
 */
function prayvine_get_comm_prayers($comment_id) {
  $query = db_select('field_data_field_comment_id', 'c')->fields('c', array('entity_id'))
      ->condition('field_comment_id_target_id', $comment_id);
  $results = $query->execute()->fetchAll();
  foreach ($results as $key => $record) {
    $prayers_req[] = $record->entity_id;
  }
  if (!empty($prayers_req)) {
    return node_load_multiple($prayers_req);
  }
  return array();
}

/**
 * render comments
 * @param type $unit
 * @param type $iTopicId
 * @param type $user - logged in user
 * @param type $strToken - access token to
 * @param type $node - topic node
 */
function theme_prayvine_render_comment($unit, $iTopicId, $user, $strToken, $node) {

  $cache_id = 'comments_prayers' . $unit->cid;
  $prayers_comm_cache = cache_get($cache_id);
  if (empty($prayers_comm_cache->data)) {
    $prayers = prayvine_get_comm_prayers($unit->cid);
    cache_set($cache_id, $prayers);
  }
  else {
    $prayers = $prayers_comm_cache->data;
  }


  global $user;
  foreach ($prayers as $k => $prayer) {
    if (prayvine_check_prayer_permission($prayer, $user->uid) && $prayer->type == 'prayer') {
      $units[$prayer->created] = theme_prayvine_render_unit($prayer, $iTopicId, $user, $strToken, $node, true);
    }
  }
  if (!empty($units)) {
    krsort($units, SORT_NUMERIC);
  }

  //count views
  if (module_exists('prayvine_logger')) {
    if ($user->uid > 0) {
      prayvine_logger_log($user->uid, $unit->cid, 'view');
    }
    else {
      if (!empty($strToken)) {
        prayvine_logger_log($strToken, $unit->cid, 'view');
      }
    }
  }
  //statistics
  $views = prayvine_count_views($unit->cid) + prayvine_count_open_mails($unit->cid);
  $prayers = prayvine_count_prayer_sub_up($unit->cid);
  $amens = prayvine_count_prayer_sub_amens_up($unit->cid);
  $amens_ = prayvine_count_amens($unit->cid);
  $pray_silently = prayvine_count_sub_pray_silently_up($unit->cid);
  $pray_silently_ = prayvine_count_pray_silently($unit->cid);
  $is_prayed_silently = prayvine_count_pray_silently($unit->cid, $user->uid);
  $total = $prayers + $amens + $pray_silently + $amens_ + $pray_silently_;
  //******

  $bPrayer = isset($unit->type) && ($unit->type == "prayer");
  $iId = $unit->cid;
  $strOutput = '';
  $strOutput .= "<div class='prayer-row'>";
  $strOutput .= "<div class='left-content topic-comment'>";
  $strOutput .= " <div><span class='date-month'>" . format_date($unit->created, 'custom', 'M') . ".</span>";
    $strOutput .= " <span class='date-day'>" . format_date($unit->created, 'custom', 'j') . ",</span>";
    $strOutput .= " <span class='date-year'>" . format_date($unit->created, 'custom', 'Y') . "</span>";
    $strOutput .= " <span class='date-time'>" . format_date($unit->created, 'custom', 'g:i a') . "</span>";
  $strOutput .= "</div>"; // end date format
  $strOutput .= " <div class='image-cropper'><a href='/user/" . $unit->uid . "'>" . prayvine_get_picture($unit->uid) . "</a></div>";
  //statistics
  $strOutput .= '<div class="data-prayers-views">' . t('Views:') . ' ' . $views . '</div>';
  if ($total > 0) {
    $strOutput .= '<div class="data-prayers-amens">' . t('Prayers/Amens:') . ' <span class="stat-data" id="comment_' . $unit->cid . '_' . $iTopicId . '_0">' . $total . '</span></div>';
  }

  if ($is_prayed_silently > 0) {
    $strOutput .= '<p>' . t('You prayed silently');
  }
  $strOutput .= "</div>"; // end comment left-content
  $strOutput .= " <div id ='title-" . $unit->cid . "' class='center-content topic-comment'>";
  $strOutput .= "<h2><a href='/user/" . $unit->uid . "'>" . prayvine_get_name($unit->uid) . "</a> " . t("posted an update:") . " " . "</h2>";

  // Render uploaded photo.
  if (!empty($node->field_ministry['und'][0]['value'])) {
    $photo = field_view_field('comment', $unit, 'field_add_photo');
    $photo['#label_display'] = 'hidden';
    $strOutput .= drupal_render($photo);

    // Render pdf file.
    $pdf = field_view_field('comment', $unit, 'field_pdf_doc');
    $pdf['#label_display'] = 'hidden';
    $strOutput .= drupal_render($pdf);
  }

  $strOutput .= $unit->comment_body['und'][0]['safe_value'];
  //pray silently link
  $key = md5('ve1b2!!' . $unit->cid . $user->uid . 've2b1!!');
  $pray_silently_link = '/pray_silently/' . $unit->cid . '/' . $user->uid . '/1/?key=' . $key;
  //pray to god options
  $prayer_owner_name = prayvine_get_name($unit->uid);

  $strOutput .= "<div class='request-forms comment-forms'><div class='prayvine-buttons clearfix'> <a class='prayer-button-request request-reply prayvine-active' href='prayer/add/" . $unit->nid . "'>" . t('Write a prayer') . "</a>";
  $strOutput .= " <a class='message-silent-button request-silent' href='" . $pray_silently_link . "'>" . t('Pray Silently') . "</a>";
  $strOutput .= " <a class='message-replay-button request-reply' href='" . $unit->uid . "'>" . t('Reply to @name', array('@name' => $prayer_owner_name)) . "</a>";

  $strOutput .= "</div>";
  $strOutput .= '<textarea class="replay-request placeholder-bubble" rows="1" cols="20" placeholder = "' . t('Dear God,') . '"></textarea>';
  $strOutput .= "</div>";
  $strOutput .= " </div>"; // end center-content for prayers and comments
  $strOutput .= " <div class='right-content'>";
  if ($user->uid == $unit->uid) {
    $strOutput .= " <a href='" . prayvine_get_edit_prayer_url(FALSE, $iId, $iTopicId, 'edit') . "'>Edit</a>";
    $strOutput .= " <a href='" . prayvine_get_edit_prayer_url(FALSE, $iId, $iTopicId, 'delete') . "'>Delete</a>";
  }

  if (empty($units)) {
    $last_created = $unit->created;
  }
  else {
    foreach ($units as $created => $text) {
      $last_created = $created;
      break;
    }
  }


  $strOutput .= " </div>"; // end right-content
  $strOutput .= "</div>"; // end prayer-row
  if (!empty($units)) {
    foreach ($units as $unit_html) {
      $strOutput .= "<div class='prayer-row prayer-per-request request-id-" . $unit->cid . "'>";
      $strOutput .= $unit_html;
      $strOutput .= "</div>";
    }
  }

  $output['html'] = $strOutput;
  $output['last_created'] = $last_created;
  return $output;
}

/**
 * rendering prayers
 * @param type $unit - prayer
 * @param type $iTopicId
 * @param type $user
 * @param type $strToken
 * @param type $node - topic node
 * @param type $req - used to defined that we render prayers for requests
 * @return string
 */
function theme_prayvine_render_unit($unit, $iTopicId, $user, $strToken, $node, $req = false) {
  $bPrayer = isset($unit->type) && ($unit->type == "prayer");

  //find request id and do not render again
  if (!empty($unit->field_prayer_id['und'][0]['target_id']) && $req == false) {
    $request_id = $unit->field_prayer_id['und'][0]['target_id'];
    return;
  }
  else {
    $request_id = 0;
  }
  //find comment id and do not render again
  if (!empty($unit->field_comment_id['und'][0]['target_id']) && $req == false) {
    $comment_id = $unit->field_comment_id['und'][0]['target_id'];
    return;
  }
  else {
    $comment_id = 0;
  }

  //count views
  if (module_exists('prayvine_logger')) {
    if ($user->uid > 0) {
      prayvine_logger_log($user->uid, $unit->nid, 'view');
    }
    else {
      if (!empty($strToken)) {
        prayvine_logger_log($strToken, $unit->nid, 'view');
      }
    }
  }
  $strOutput = "";
  if (!$req) {//do not use for request prayers
    $strOutput .= "<div class='prayer-row'>";
  }
  $views = prayvine_count_views($unit->nid) + prayvine_count_open_mails($unit->nid);
  $iId = $unit->nid;
  if (!$bPrayer)
    $iId = $unit->cid;

  if ($bPrayer) {
    $strOutput .= "<div class='left-content'>";
    $strOutput .= " <div><span class='date-month'>" . format_date($unit->created, 'custom', 'M') . ".</span>";
    $strOutput .= " <span class='date-day'>" . format_date($unit->created, 'custom', 'j') . ",</span>";
    $strOutput .= " <span class='date-year'>" . format_date($unit->created, 'custom', 'Y') . "</span>";
    $strOutput .= " <span class='date-time'>" . format_date($unit->created, 'custom', 'g:i a') . "</span>";
    $strOutput .= "</div>"; // end date format

    $strOutput .= " <div class='image-cropper'><a href='/user/" . $unit->uid . "'>" . prayvine_get_picture($unit->uid) . "</a></div>";
    $strOutput .= '<div><a href="/user/' . $unit->uid . '">' . prayvine_get_name($unit->uid) . '</a></div>';
    $strOutput .= '<div class="data-prayers-views">' . t('Views:') . ' ' . $views . '</div>';
    $amens_count = prayvine_count_amens($unit->nid);
    if ($amens_count > 0) {
      $strOutput .= '<div class="data-prayers-amens">' . t('Amens:') . ' <span class="stat-data" id="prayer_' . $unit->nid . '_' . $iTopicId . '_2">' . $amens_count . '</span></div>';
    }



    //statistics
    //add amens
    global $user;
    $bSelfSaidAmen = prayvine_count_amens($unit->nid, $user->uid);
    if ($bSelfSaidAmen) {
      $strOutput .= '<div class = "data-prayedthis">' . t('You said Amen') . '</div>';
    }
    //************

    $strOutput .= " </div>"; // end left-content

    $strOutput .= " <div class='center-content'>";
    $strOutput .= " <h2>" . $unit->title . "</h2>";
    //drupal_set_message("<pre> " . print_r($unit, true) . "</pre>");
    $strText = "";

    // Render uploaded photo.
    if (!empty($unit->type) && !empty($node->field_ministry['und'][0]['value'])) {
      $image_array = field_view_field('node', $unit, 'field_add_photo');
      $image_array['#label_display'] = 'hidden';
      $strOutput .= render($image_array);
    }

    if (isset($unit->field_prayer_text['und'][0]['safe_value']))
      $strText = $unit->field_prayer_text['und'][0]['safe_value'];
    else
      $strText = $unit->field_prayer_text['und'][0]['value'];
    $strOutput .= $strText;
    //handling permission line
    if (count($unit->field_closing) > 0)
      $strOutput .= "<p class='closing'>" . $unit->field_closing['und'][0]['safe_value'] . "</p>";

    $prayer_permission_type = (!empty($unit->field_prayer_permission_type)) ? $unit->field_prayer_permission_type['und'][0]['value'] : null;

    if ($prayer_permission_type == 0) {//this prayer community
      $strOutput .= "<p class='permissions'>" . t('Shared with this prayer community only.') . "</p>";
    }
    if ($prayer_permission_type == 1) {//only me
      $strOutput .= "<p class='permissions'>" . t('Private visible only to me.') . "</p>";
    }
    if ($prayer_permission_type == 2) {//specific persons
      $text = t('Shared with ');
      foreach ($unit->field_prayer_select_people['und'] as $people) {
        $people_uid = $people['value'];
        $people_name = prayvine_get_name($people_uid);
        $text .= $people_name . ', ';
      }
      $text = substr($text, 0, strlen($text) - 2);
      $strOutput .= "<p class='permissions'>" . $text . "</p>";
    }
    //**********
    // comment row start
  }
  else {

  }

  $strOutput .= " </div>"; // end center-content for prayers and comments

  $strOutput .= " <div class='right-content'>";
  $iId = $unit->nid;
  if (!$bPrayer)
    $iId = $unit->cid;

  if ($user->uid == $unit->uid) {
    $strOutput .= " <a href='" . prayvine_get_edit_prayer_url($bPrayer, $iId, $iTopicId, 'edit') . "'>Edit</a>";
    $strOutput .= " <a href='" . prayvine_get_edit_prayer_url($bPrayer, $iId, $iTopicId, 'delete') . "'>Delete</a>";
  }


  if ($bPrayer) {
    $bSelfSaidAmen = FALSE;
    $strAmens = prayvine_get_amens($iId, $user, $bSelfSaidAmen);
    $strAmenNewValue = "1";
    if ($bSelfSaidAmen)
      $strAmenNewValue = "0";
    $strAction = "Amen";
    if ($bSelfSaidAmen)
      $strAction = "Undo Amen";
    $strOutput .= " <div class='say-amen-link-container'>";

    if (!$bSelfSaidAmen) {
      $strOutput .= "<a class='say-amen-link' href='"
          . prayvine_get_link($user, $iTopicId, "/say_amen/" . $iId
              . "/" . $strAmenNewValue . "/" . $strToken)
          . "'>" . $strAction . "</a>";
    }

    $strOutput .= " </div>"; // end buttons
  }

  $strOutput .= " </div>"; // end right-content
  if (!$req) {//do not use for request prayers
    $strOutput .= "</div>"; // end prayer-row
  }

  return $strOutput;
}

/**
 * render prayer request on topic node
 * @param type $unit
 * @param type $iTopicId
 * @param type $user
 * @param type $strToken
 * @param type $node
 */
function theme_prayvine_render_request($unit, $iTopicId, $user, $strToken, $node) {

  $cache_id = 'requests_prayers' . $unit->nid;
  $prayers_req_cache = cache_get($cache_id);
  if (empty($prayers_req_cache->data)) {
    $prayers = prayvine_get_req_prayers($unit->nid);
    cache_set($cache_id, $prayers);
  }
  else {
    $prayers = $prayers_req_cache->data;
  }


  global $user;
  foreach ($prayers as $k => $prayer) {
    if (prayvine_check_prayer_permission($prayer, $user->uid) && $prayer->type == 'prayer') {
      $units[$prayer->created] = theme_prayvine_render_unit($prayer, $iTopicId, $user, $strToken, $node, true);
    }
  }
  if (!empty($units)) {
    krsort($units, SORT_NUMERIC);
  }
  //count views
  if (module_exists('prayvine_logger')) {
    if ($user->uid > 0) {
      prayvine_logger_log($user->uid, $unit->nid, 'view');
    }
    else {
      if (!empty($strToken)) {
        prayvine_logger_log($strToken, $unit->nid, 'view');
      }
    }
  }
  //statistics
  $views = prayvine_count_views($unit->nid) + prayvine_count_open_mails($unit->nid);
  $prayers = prayvine_count_prayer_sub_pr($unit->nid);
  $amens = prayvine_count_prayer_sub_amens_pr($unit->nid);
  $amens_ = prayvine_count_amens($unit->nid);
  $pray_silently = prayvine_count_sub_pray_silently_pr($unit->nid);
  $pray_silently_ = prayvine_count_pray_silently($unit->nid);
  $is_prayed_silently = prayvine_count_pray_silently($unit->nid, $user->uid);
  $total = $prayers + $amens + $pray_silently + $amens_ + $pray_silently_;
  //******
  //$units = array_reverse($units);
  $prayer_owner_name = prayvine_get_name($unit->uid);
  $strOutput = "";
  $strOutput .= "<div class='prayer-row request-id-" . $unit->nid . "'>";
  //begin of left of row
  $strOutput .= "<div class='left-content'>";
  $strOutput .= " <div><span class='date-month'>" . format_date($unit->created, 'custom', 'M') . ".</span>";
    $strOutput .= " <span class='date-day'>" . format_date($unit->created, 'custom', 'j') . ",</span>";
    $strOutput .= " <span class='date-year'>" . format_date($unit->created, 'custom', 'Y') . "</span>";
    $strOutput .= " <span class='date-time'>" . format_date($unit->created, 'custom', 'g:i a') . "</span>";
  $strOutput .= "</div>"; // end date format
  $strOutput .= " <div class='image-cropper'><a href='/user/" . $unit->uid . "'>" . prayvine_get_picture($unit->uid) . "</a></div>";
  //statistics
  $strOutput .= '<div class="data-prayers-views">' . t('Views:') . ' ' . $views . '</div>';
  if ($total > 0) {
    $strOutput .= '<div class="data-prayers-amens">' . t('Prayers/Amens:') . ' <span class="stat-data" id="request_' . $unit->nid . '_' . $iTopicId . '_1">' . $total . '</span></div>';
  }

  if ($is_prayed_silently > 0) {
    $strOutput .= '<p>' . t('You prayed silently');
  }
  //view data
  $strOutput .= " </div>"; // end left-content
  //begin center of row
  $strOutput .= " <div class='center-content' id ='title-" . $unit->nid . "'>";
  $strOutput .= " <div><a href='/user/" . $unit->uid . "'>" . prayvine_get_name($unit->uid) . "</a>" . " " . t('sent a prayer request:') . "</div>";

  //pray silently link
  $key = md5('ve1b2!!' . $unit->nid . $user->uid . 've2b1!!');
  $pray_silently_link = '/pray_silently/' . $unit->nid . '/' . $user->uid . '/0/?key=' . $key;

  // Render uploaded photo.
  if (!empty($unit->type) && !empty($node->field_ministry['und'][0]['value'])) {
    $image_array = field_view_field('node', $unit, 'field_add_photo');
    $image_array['#label_display'] = 'hidden';
    $strOutput .= render($image_array);
  }

  $strOutput .= " <p>" . !empty($unit->body) ? $unit->body['und'][0]['safe_value'] : '' . "</p>";
  $strOutput .= "<div class='request-forms'><div class='prayvine-buttons clearfix'> <a class='prayer-button-request request-reply prayvine-active' href='prayer/add/" . $unit->nid . "'>" . t('Write a prayer') . "</a>";
  $strOutput .= " <a class='message-silent-button request-silent' href='" . $pray_silently_link . "'>" . t('Pray Silently') . "</a>";
  $strOutput .= " <a class='message-replay-button request-reply' href='" . $unit->uid . "'>" . t('Reply to @name', array('@name' => $prayer_owner_name)) . "</a>";
  $strOutput .= "</div>";
  $strOutput .= '<textarea class="replay-request placeholder-bubble" rows="1" cols="20" placeholder = "' . t('Dear God,') . '"></textarea>';
  $strOutput .= "</div></div>"; //end of center
  //begin of right
  $strOutput .= " <div class='right-content'>";
  if ($user->uid == $unit->uid) {
    $strOutput .= " <a href='" . prayvine_get_edit_prayer_url(true, $unit->nid, $iTopicId, 'edit') . "'>Edit</a>";
    $strOutput .= " <a href='" . prayvine_get_edit_prayer_url(true, $unit->nid, $iTopicId, 'delete') . "'>Delete</a>";
  }
  if (empty($units)) {
    $last_created = $unit->created;
  }
  else {
    foreach ($units as $created => $text) {
      $last_created = $created;
      break;
    }
  }


  $strOutput .= " </div>"; // end right-content
  $strOutput .= "</div>"; // end prayer-row
  if (!empty($units)) {
    foreach ($units as $unit_html) {
      $strOutput .= "<div class='prayer-row prayer-per-request request-id-" . $unit->nid . "'>";
      $strOutput .= $unit_html;
      $strOutput .= "</div>";
    }
  }

  $output['html'] = $strOutput;
  $output['last_created'] = $last_created;
  return $output;
}

/**
 * render invites
 * @param type $page
 * @param type $node
 */
function theme_prayvine_render_invites($page, $node) {
  global $base_url;
  global $user;
  if ($page && ($user->uid == $node->uid)) {
    $invitesRecordSet = db_query("select * from {prayvine_invites} where nid = :nid order by sent asc", array(':nid' => $node->nid));
    $strInvited = "";
    while (($row = $invitesRecordSet->fetchObject()) != NULL) {
      if ($row->inviter_uid == $user->uid)
        $strRow = "You";
      else {
        $inviter = user_load($row->inviter_uid);
        $strRow = $inviter->name;
      }
      $strRow .= " invited " . $row->mail;
      $strRow .= " to visit " . $base_url . "/node/" . $node->nid
          . "?token=" . $row->invite_code;
      if (!is_null($row->claimed_uid)) {
        $subscriber = user_load($row->claimed_uid);
        if ($subscriber != NULL) {
          $strRow .= " (accepted by " . $subscriber->name . ")";
        }
      }
      $strInvited .= $strRow . "<br />";
    }
    if (!empty($strInvited))
      $strInvited = "<br /><hr /><br />" . $strInvited;
    return $strInvited;
  }
  return '';
}

/**
 * get number of views of specific content
 * @param type $content_id
 */
function prayvine_count_views($content_id) {
  $query = db_select('prayvine_logs', 'l')->fields('l', array('content_id'))
      ->condition('content_id', $content_id)
      ->condition('type', 'view')
      ->countQuery();
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * get number of views of specific content
 * @param type $content_id
 */
function prayvine_count_open_mails($content_id) {
  $query = db_select('prayvine_logs', 'l')->fields('l', array('content_id'))
      ->condition('content_id', $content_id)
      ->condition('type', 'mail_count')
      ->countQuery();
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * get number of pray silently for speicifi content type
 * @param type $content_id
 */
function prayvine_count_pray_silently($content_id, $user_id = null) {

  if ($user_id == null) {
    $query = db_select('prayvine_logs', 'l')->fields('l', array('content_id'))
        ->condition('content_id', $content_id)
        ->condition('type', 'pray_silently')
        ->countQuery();
  }
  else {
    $query = db_select('prayvine_logs', 'l')->fields('l', array('content_id'))
        ->condition('content_id', $content_id)
        ->condition('user_id', $user_id)
        ->condition('type', 'pray_silently')
        ->countQuery();
  }

  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * get number of amnes of specific content
 * @param type $content_id
 */
function prayvine_count_amens($content_id, $user_id = null) {
  if ($user_id == null) {
    $query = db_select('prayvine_prayer_amens', 'a')->fields('a', array('nid'))
        ->condition('nid', $content_id)
        ->countQuery();
  }
  else {
    $query = db_select('prayvine_prayer_amens', 'a')->fields('a', array('nid'))
        ->condition('nid', $content_id)
        ->condition('uid', $user_id)
        ->countQuery();
  }

  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * get number of subscribers in topic
 * @param type $topic_id
 */
function prayvine_count_users($topic_id) {
  $query = db_select('prayvine_subscriptions', 's')->fields('s', array('nid'))
      ->condition('nid', $topic_id)
      ->countQuery();
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * count number of posts
 * @param type $topic_id
 * @param type $content_type - prayer, prayer_request, comment
 */
function prayvine_count_posts($topic_id, $content_type) {
  if ($content_type !== 'comment') {
    $query = db_select('field_data_field_topic_id', 's')->fields('s', array('entity_id'))
        ->condition('field_topic_id_value', $topic_id)
        ->condition('bundle', $content_type)
        ->countQuery();
  }
  else {
    $query = db_select('comment', 's')->fields('s', array('nid'))
        ->condition('nid', $topic_id)
        ->countQuery();
  }

  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * get total number amens on topic
 * @param type $topic_id
 */
function prayvine_count_total_amens($topic_id) {
  //counts on prayer, prayer request
  $amens = 0;
  $query = db_select('field_data_field_topic_id', 's')->fields('s', array('entity_id'))
      ->condition('field_topic_id_value', $topic_id);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['entity_id'];
    $amens = $amens + prayvine_count_amens($conent_id);
  }
  //counts comments
  $query = db_select('comment', 's')->fields('s', array('cid'))
      ->condition('nid', $topic_id);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['cid'];
    $amens = $amens + prayvine_count_amens($conent_id);
  }

  return $amens;
}

/**
 * get total number of pray silently
 * @param type $topic_id
 */
function prayvine_count_total_prayer_silently($topic_id) {
  //counts on prayer, prayer request
  $prayer_silently = 0;
  $query = db_select('field_data_field_topic_id', 's')->fields('s', array('entity_id'))
      ->condition('field_topic_id_value', $topic_id);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['entity_id'];
    $prayer_silently = $prayer_silently + prayvine_count_pray_silently($conent_id);
  }
  //counts comments
  $query = db_select('comment', 's')->fields('s', array('cid'))
      ->condition('nid', $topic_id);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['cid'];
    $prayer_silently = $prayer_silently + prayvine_count_pray_silently($conent_id);
  }

  return $prayer_silently;
}

/**
 * count number of prayers connected to prayer request
 * @param type $content_id
 */
function prayvine_count_prayer_sub_pr($content_id) {
  $query = db_select('field_data_field_prayer_id', 's')->fields('s', array('entity_id'))
      ->condition('field_prayer_id_target_id', $content_id)
      ->countQuery();
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * count number of prayers connected to update
 * @param type $content_id
 */
function prayvine_count_prayer_sub_up($content_id) {
  $query = db_select('field_data_field_comment_id', 's')->fields('s', array('entity_id'))
      ->condition('field_comment_id_target_id', $content_id)
      ->countQuery();
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * count number of amnes connected to update
 * @param type $content_id
 */
function prayvine_count_prayer_sub_amens_up($content_id) {
  $query = db_select('field_data_field_comment_id', 's')->fields('s', array('entity_id'))
      ->condition('field_comment_id_target_id', $content_id);
  $result = $query->execute();
  $amens = NULL;
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['entity_id'];
    $amens = $amens + prayvine_count_amens($conent_id);
  }
  return $amens;
}

/**
 * count number of amens connected to prayer request
 * @param type $content_id
 */
function prayvine_count_prayer_sub_amens_pr($content_id) {
  $query = db_select('field_data_field_prayer_id', 's')->fields('s', array('entity_id'))
      ->condition('field_prayer_id_target_id', $content_id);
  $result = $query->execute();
  $amens = NULL;
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['entity_id'];
    $amens = $amens + prayvine_count_amens($conent_id);
  }
  return $amens;
}

/**
 * count number of pray silently connected to updates
 * @param type $content_id
 */
function prayvine_count_sub_pray_silently_up($content_id) {
  $query = db_select('field_data_field_comment_id', 's')->fields('s', array('entity_id'))
      ->condition('field_comment_id_target_id', $content_id);
  $result = $query->execute();
  $pray = NULL;
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['entity_id'];
    $pray = $pray + prayvine_count_pray_silently($conent_id);
  }
  return $pray;
}

/**
 * count number of pray silently connected to prayer request
 * @param type $content_id
 */
function prayvine_count_sub_pray_silently_pr($content_id) {
  $query = db_select('field_data_field_prayer_id', 's')->fields('s', array('entity_id'))
      ->condition('field_prayer_id_target_id', $content_id);
  $result = $query->execute();
  $pray = NULL;
  while ($record = $result->fetchAssoc()) {
    $conent_id = $record['entity_id'];
    $pray = $pray + prayvine_count_pray_silently($conent_id);
  }
  return $pray;
}

/**
 * redirect users that don't have permission to see topic
 */
function prayvine_topic_permission($node) {
  $strToken = "0";
  if (isset($_GET['token'])) {
    $strToken = $_GET['token'];
    if (!isset($_SESSION['prayvine_tokens']) || !is_array($_SESSION['prayvine_tokens']))
      $_SESSION['prayvine_tokens'] = array();
    if (!in_array($strToken, $_SESSION['prayvine_tokens']))
      $_SESSION['prayvine_tokens'][] = $strToken;
  }
  global $user;
  if ($user->uid == 1) {//allow user 1 to see everything
    $module_path = drupal_get_path('module', 'prayvine');
    drupal_add_js($module_path . '/prayvine.js');
    return $strToken;
  }
  $bShareable = 1;
  if (isset($node->field_shareable['und'][0]['value']))
    $bShareable = $node->field_shareable['und'][0]['value'];

  if ($user->uid != $node->uid) {
    $bHasPermission = prayvine_has_permission($user->uid, $node->nid, $strToken);
    if (!$bHasPermission) {//
      if ($user->uid == 0) {//i am not logged in that i don't have permission
        drupal_set_message("Please sign in to see this page.");
        drupal_goto("", array('query' => array('destination' => $_GET['q'])));
      }
      else { // i am logged in but not have permission
        drupal_set_message("Please sign in to see this page.");
        drupal_goto("", array('query' => array('destination' => $_GET['q'])));
      }
    }
  }
  $module_path = drupal_get_path('module', 'prayvine');
  drupal_add_js($module_path . '/prayvine.js');
  return $strToken;
}

/**
 * get topic owner - people that ha permission to invite
 * @param type $topic
 */
function prayvine_topic_owner($topic, $uid = 1) {
  $owner = false;
  if ($uid == $topic->uid) {
    return true;
  }
  if (!empty($topic->field_settings['und'][0]['value'])) {
    $settings = unserialize($topic->field_settings['und'][0]['value']);
    if (is_array($settings['ministry_communicator'])) {
      foreach ($settings['ministry_communicator'] as $uid_permission) {
        if ($uid == $uid_permission) {
          return true;
        }
      }
    }
  }
  return $owner;
}

/**
 * redirect users that don't have permission to see prayers
 */
function prayvine_prayer_permission($node) {
  $strToken = "0";
  if (isset($_GET['token'])) {
    $strToken = $_GET['token'];
    if (!isset($_SESSION['prayvine_tokens']) || !is_array($_SESSION['prayvine_tokens']))
      $_SESSION['prayvine_tokens'] = array();
    if (!in_array($strToken, $_SESSION['prayvine_tokens']))
      $_SESSION['prayvine_tokens'][] = $strToken;
  }
  global $user;
  if ($user->uid == 1) {
    return;
  }
  if ($user->uid != $node->uid) {
    $bHasPermission = prayvine_has_permission($user->uid, $node->nid, $strToken);
    if (!$bHasPermission) {
      drupal_set_message("I'm afraid that you don't have access to read that prayer page");

      drupal_goto("", array('query' => array('destination' => $_GET['q'])));
    }
  }
}

function prayvine_util() {
  $file = file_load(61, true);
  $file = file_load(77, true);
  file_delete($file);
}

/**
 * token info hook
 * @return type
 */
function prayvine_token_info() {
  $info['tokens']['user']['user_image'] = array(
    'name' => t('Users Image'),
    'description' => t("Link to user image - prayvine."),
    'type' => 'user',
  );
  $info['tokens']['user']['pic_class'] = array(
    'name' => t('Email body class'),
    'description' => t("Class used in rules for styling - prayvine."),
    'type' => 'user',
  );
  $info['tokens']['node']['photo_token'] = array(
    'name' => t('Add photo token'),
    'description' => t("Render add photo field."),
    'type' => 'node',
  );
  $info['tokens']['comment']['photo_token'] = array(
    'name' => t('Add photo token'),
    'description' => t("Render add photo field."),
    'type' => 'comment',
  );
  $info['tokens']['comment']['pdf_token'] = array(
    'name' => t('Add pdf token'),
    'description' => t("Render add pdf field."),
    'type' => 'comment',
  );
  return $info;
}

/**
 * Implements hook_tokens();
 */
function prayvine_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'user_image':
          // In the case of hook user_presave uid is not set yet.
          $user_image = prayvine_user_image_token($account->uid);
          $image = $user_image['image'];
          $replacements[$original] = $image;
          break;
        case 'pic_class':
          // In the case of hook user_presave uid is not set yet.
          $user_image = prayvine_user_image_token($account->uid);
          $pic_class = $user_image['pic_class'];
          $replacements[$original] = $pic_class;
          break;
      }
    }
  }

  if ($type == 'node' && !empty($data['node'])) {
    //dpm($tokens);
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'photo_token':
          // In the case of hook user_presave uid is not set yet.
          $photo = field_view_field('node', $node, 'field_add_photo');
          if (!empty($photo)) {
            $image = prayvine_photo_render($photo, 'large');
          }
          else {
            $image = '';
          }

          $replacements[$original] = $image;
          break;
      }
    }
  }


  if (isset($data['entity_type']) && $data['entity_type'] == 'comment' && !empty($data['entity'])) {

    $comment = $data['entity'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'photo_token':
          // In the case of hook user_presave uid is not set yet.
          $photo = field_view_field('comment', $comment, 'field_add_photo');
          if (!empty($photo)) {
            $image = prayvine_photo_render($photo, 'large');
          }
          else {
            $image = '';
          }

          $replacements[$original] = $image;
          break;
        case 'pdf_token':
          // In the case of hook user_presave uid is not set yet.
          $pdf_field = field_view_field('comment', $comment, 'field_pdf_doc');
          if (!empty($pdf_field)) {
            $pdf_field['#label_display'] = 'hidden';
            $pdf = prayvine_pdf_render($pdf_field);
          }
          else {
            $pdf = '';
          }
          $replacements[$original] = $pdf;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Render function - workers don't work with theme functions.
 * @param type $photo
 * @param type $style
 */
function prayvine_photo_render($photo, $style) {
  // If uri is not created.
  if (empty($photo['#items'][0]['uri'])) {
    $fid = $photo['#items'][0]['fid'];
    $file = file_load($fid);
    $image['path'] = $file->uri;
  }
  else {
    $image['path'] = $photo['#items'][0]['uri'];
  }

  $image['alt'] = $photo['#items'][0]['alt'];
  $image['height'] = $photo['#items'][0]['height'];
  $image['width'] = $photo['#items'][0]['width'];
  $image['style_name'] = $style;
  $image_output = theme('image_style', $image);

  return $image_output;
}

/**
 * render pdf field
 * @param type $pdf_file
 * @return type
 */
function prayvine_pdf_render($pdf_file) {
  $fid = $pdf_file['#items'][0]['fid'];
  $file = file_load($fid);
  $variables['file'] = $file;
  $output = theme_file_link($variables);
  return $output;
}

/**
 * hook presave file when it is about to save in database
 * @param type $file
 */
function prayvine_file_presave($file) {
  //remove white spaces
  $file->filename = str_replace(' ', '_', $file->filename);
  //remove special characters
  $file->filename = preg_replace('/[^A-Za-z0-9\-\.]/', '', $file->filename);
}

/**
 * gearman clients
 */

/**
 * gearman client notify when comment is posted
 * @param type $comment
 */
function prayvine_gear_comment_notify($comment) {
  global $user;
  global $conf;
  $client = new GearmanClient();
  $client->addServer();
  $client->setTimeout(1000);
  $data['comment'] = $comment;
  $data['user'] = $user;
  $css = variable_get('mimemail_css_template', '');
  if (empty($css)) {
    $is_alive = false;
  }
  else {
    $is_alive = true;
  }

  $path_local = variable_get('path_local', NULL);
  $path_live = variable_get('path_live', NULL);
  $path_dev = variable_get('path_dev', NULL);

  if (stripos($_SERVER['SERVER_NAME'], $path_local) !== FALSE) {
    $is_alive = false;
  }

  if (!$is_alive) {
    return false;
  }
  $json_data = json_encode($data);
  if (isset($conf['gearman_server']) && $conf['gearman_server'] == 'local') {
    $client->addServer($conf['gearman_local_server']);
    $result = $client->doBackground("comment_notify_local", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_live) {
    $result = $client->doBackground("comment_notify", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_dev && $conf['gearman_server'] == 'dev') {
    $result = $client->doBackground("comment_notify_skele", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_dev && $conf['gearman_server'] == 'staging') {
    $result = $client->doBackground("comment_notify_skele_staging", $json_data);
  }
  return true;
}

/**
 * gearman client notify when prayer is posted
 * @param type $comment
 */
function prayvine_gear_prayer_notify($prayer) {
  global $user;
  global $conf;
  $client = new GearmanClient();
  $client->addServer();
  $client->setTimeout(1000);
  $data['prayer'] = $prayer;
  $data['user'] = $user;
  $is_alive = true;
  $css = variable_get('mimemail_css_template', '');
  if (empty($css)) {
    $is_alive = false;
  }
  else {
    $is_alive = true;
  }

  $path_local = variable_get('path_local', NULL);
  $path_live = variable_get('path_live', NULL);
  $path_dev = variable_get('path_dev', NULL);

  if (stripos($_SERVER['SERVER_NAME'], $path_local) !== FALSE) {
    $is_alive = false;
  }
  //$is_alive = $client->doHigh("prayer_notify_check",'as');
  if (!$is_alive) {
    watchdog('gearman', 'prayer notify worker not found');
    return false;
  }
  $json_data = json_encode($data);
  if (isset($conf['gearman_server']) && $conf['gearman_server'] == 'local') {
    $client->addServer($conf['gearman_local_server']);
    $result = $client->doBackground("prayer_notify_local", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_live) {
    $client->addServer();
    $result = $client->doBackground("prayer_notify", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_dev && isset($conf['gearman_server']) &&
    $conf['gearman_server'] == 'dev') {
    $result = $client->doBackground("prayer_notify_skele", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_dev && isset($conf['gearman_server']) &&
    $conf['gearman_server'] == 'staging') {
    $result = $client->doBackground("prayer_notify_skele_staging", $json_data);
  }

  return true;
}

/**
 * gearman client notify when request is posted
 * @param type $comment
 */
function prayvine_gear_request_notify($request) {
  global $user;
  global $conf;
  $client = new GearmanClient();
  $client->addServer();
  $client->setTimeout(1000);
  $data['request'] = $request;
  $data['user'] = $user;
  $is_alive = true;
  $css = variable_get('mimemail_css_template', '');
  if (empty($css)) {
    $is_alive = false;
  }
  else {
    $is_alive = true;
  }

  $path_local = variable_get('path_local', NULL);
  $path_live = variable_get('path_live', NULL);
  $path_dev = variable_get('path_dev', NULL);

  if (stripos($_SERVER['SERVER_NAME'], $path_local) !== FALSE) {
    $is_alive = false;
  }
  //$is_alive = $client->doHigh("request_notify_check",'as');
  if (!$is_alive) {
    watchdog('gearman', 'request notify worker not found');
    return false;
  }
  $json_data = json_encode($data);
  if (isset($conf['gearman_local_server']) && $conf['gearman_server'] == 'local') {
    $client->addServer($conf['gearman_local_server']);
    $result = $client->doBackground("request_notify_local", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_dev && isset($conf['gearman_server']) &&
    $conf['gearman_server'] == 'dev') {
    $result = $client->doBackground("request_notify_skele", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_live) {
    $result = $client->doBackground("request_notify", $json_data);
  }
  if ($_SERVER['SERVER_NAME'] === $path_dev && isset($conf['gearman_server']) &&
    $conf['gearman_server'] == 'staging') {
    $result = $client->doBackground("request_notify_skele_staging", $json_data);
  }
  return true;
}

/**
 * auto load topic page
 */
function prayvine_autoload_topic() {
  $begin = $_GET['begin'];
  $nid = $_GET['nid']; //topic id
  $strToken = '';
  if ($nid > 0) {

  }
  else {
    return;
  }
  $node = node_load($nid);
  global $user;
  $units = array();
  $cache_id = 'requests_' . $node->nid;
  $request_cache = cache_get($cache_id);
  if (empty($request_cache->data)) {
    $requests = prayvine_get_requests($node->nid); //TODO: cache this
    cache_set($cache_id, $requests);
  }
  else {
    $requests = $request_cache->data;
  }
  $counter = 0;
  foreach ($requests as $request) {
    $request_created = theme_prayvine_render_request($request, $node->nid, $user, $strToken, $node);
    $units[$counter]['html'] = $request_created['html'];
    $units[$counter]['time'] = $request_created['last_created'];
    $counter++;
  }

  $cache_id = 'prayers_' . $node->nid;
  $prayers_cache = cache_get($cache_id);
  if (empty($prayers_cache->data)) {
    $prayers = prayvine_get_prayers($node->nid); //TODO: cache this
    cache_set($cache_id, $prayers);
  }
  else {
    $prayers = $prayers_cache->data;
  }
  foreach ($prayers as $prayer) {
    if (prayvine_check_prayer_permission($prayer, $user->uid) && $prayer->type == 'prayer') {
      $units[$counter]['html'] = theme_prayvine_render_unit($prayer, $node->nid, $user, $strToken, $node);
      $units[$counter]['time'] = $prayer->created;
      $counter++;
    }
  }

  $cache_id = 'comments_' . $node->nid;
  $comments_cache = cache_get($cache_id);
  if (empty($comments_cache->data)) {
    $comments = prayvine_get_comments($node->nid); //TODO: cache this
    cache_set($cache_id, $comments);
  }
  else {
    $comments = $comments_cache->data;
  }

  foreach ($comments as $comment) {
    $comment_unit = theme_prayvine_render_comment($comment, $node->nid, $user, $strToken, $node);
    $units[$counter]['html'] = $comment_unit['html'];
    $units[$counter]['time'] = $comment_unit['last_created'];
    $counter++;
  }

  if (is_array($timestamps)) {
    arsort($timestamps);
  }

  if (is_array($units)) {
    uasort($units, 'unit_sort');
  }

  $topics = '';
  $counter = 0;
  $is_empty = true;

  foreach ($units as $key => $unit_render) {
    if ($counter > $begin) {
      $topics .= $units[$key]['html'];
      $is_empty = false;
    }

    if (($counter - $begin) == 5) {
      break;
    }
    $counter++;
  }
  if ($is_empty) {//there is no additional content to load
    $topics.='<div class="autoload_finish"></div>';
  }
  else {
    $topics.='<div id="counter_' . $counter . '" class="loading-marker"></div>';
  }

  drupal_json_output($topics);
}

function unit_sort($unit_1, $unit_2) {
  if ($unit_1['time'] > $unit_2['time']) {
    return -1;
  }
  else {
    return 1;
  }
  if ($unit_1['time'] == $unit_2['time']) {
    return 0;
  }
}

/**
 * admin pages
 */

/**
 * administry page
 * @param type $form
 * @param type $form_state
 */
function prayvine_admin_emails() {
  $display_id = 'default';
  $args = func_get_args();
  global $user;

  if ($user->uid > 3) {
    return;
  }

  //pravine invites **********************
  $title = '<h2>' . t('Prayvine Invitations') . '</h2>';
  $view_render_1 = views_embed_view('admin_prayvine_invites', $display_id = 'default');
  $invites = $title . $view_render_1;
  //user admin
  $title = '<h2>' . t('User admin') . '</h2>';
  $view_render = views_embed_view('user_admin', $display_id = 'page');
  $user_admins = $title . $view_render;

  $output = $user_admins . $invites;

  return $output;
}

/**
 * Get the latest activity post date within the topic community.
 */
function _prayvine_get_last_post_date($nid = 0) {
  $latest_post = 0;

  if (is_numeric($nid) && $nid > 0) {
    // Get all ministry communicator's uid.
    $communicators_arr = _prayvine_get_topic_ministry_communicators($nid);
    if (count($communicators_arr) == 0) {
      $communicators_arr = array(0);
    }

    // Get latest prayer or prayer request posted by communicators.
    $result = db_select('node', 'n');
    $result->leftJoin('field_data_field_topic_id', 't', 'n.nid = t.entity_id');
    $result->fields('n', array('created'))
      ->condition('n.type', array('prayer', 'prayer_request'), 'IN')
      ->condition('n.uid', $communicators_arr, 'IN')
      ->condition('t.field_topic_id_value', $nid, '=')
      ->orderBy('n.created', 'DESC')
      ->range(0, 1);
    $row = $result->execute()->fetchAll();

    foreach ($row as $prayer) {
      $latest_post = $prayer->created;
    }

    // Get latest comment posted by communicators.
    $communicators_arr = implode(",", $communicators_arr);
    $sql = "SELECT created FROM {comment} WHERE nid = :nid
            AND uid IN (:uids)
            ORDER BY created DESC LIMIT 1";
    $rst = db_query($sql, array(':nid' => $nid, ':uids' => $communicators_arr));
    foreach ($rst as $row) {
      if ($row->created > $latest_post) {
        $latest_post = $row->created;
      }
    }
  }

  return $latest_post;
}

/**
 * Get the last email reminder sent for the specific topic.
 */
function _prayvine_get_last_topic_reminder($nid = 0) {
  $last_reminder = 0;

  $reminder_sql = "SELECT * FROM {prayvine_reminder} WHERE nid = :nid ORDER BY created DESC LIMIT 1";
  $reminder_rst = db_query($reminder_sql, array(':nid' => $nid));

  foreach ($reminder_rst as $row) {
    $last_reminder = strtotime($row->created);
  }

  return $last_reminder;
}

/**
 * Fetches all ministry communicators of the topic community.
 */
function _prayvine_get_topic_ministry_communicators($topic = 0) {
  $communicators_arr = array();

  if (is_numeric($topic) && $topic > 0) {
    $node = node_load($topic);
    if (isset($node->type) && $node->type == 'topic') {
      if (isset($node->field_settings[LANGUAGE_NONE][0]['value'])) {
        $settings = unserialize($node->field_settings[LANGUAGE_NONE][0]['value']);
        if (isset($settings['ministry_communicator']) && is_array($settings['ministry_communicator'])) {
          foreach ($settings['ministry_communicator'] as $uid) {
            $communicators_arr[] = $uid;
          }
        }
      }

      // Include the topic owner as ministry communicator.
      $communicators_arr[] = $node->uid;

      $communicators_arr = array_unique($communicators_arr);
    }
  }

  return $communicators_arr;
}
